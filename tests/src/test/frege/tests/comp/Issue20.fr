--- 'https://github.com/Frege/frege/issues/20  Better java support' 
module tests.comp.Issue20 where

import Java.Util

native module 
  type Object
  interface Comparator Int, Comparable String 
  where { 
    // Be careful with comments, no unpaired braces, please!
    // And also no pre- or post-decrement, because this would be a Frege comment!
    // You can write \u002d\u002d if you must.

    final private frege.runtime.Lambda f;
    final public int compare(   final java.lang.Object arg$1,
                                final java.lang.Object arg$2
                            ) {
        return Prelude.IEnum_Ordering.ord(
            (short)frege.runtime.Delayed.<java.lang.Short>forced(
                  f.apply(arg$1).apply(arg$2).result()
                )
          ) - 1;
    }
    public Issue20(frege.runtime.Lambda x) { f = x; }
    public static java.util.Comparator mk(frege.runtime.Lambda f) { return new Issue20(f); }
    public int compareTo(Object other) { return -1; }
}

pure native mkComparator Issue20.mk :: (a -> a -> Ordering) -> Comparator a

compareFst :: (Int, a) -> (Int, a) -> Ordering
compareFst = comparing fst

main = do
    let stringComparator = mkComparator (String.<=>) 
        tupleComparator  = mkComparator compareFst
    println (stringComparator.compare "foo" "bar")
    println (tupleComparator.compare (42, "foo") (43, "bar"))
