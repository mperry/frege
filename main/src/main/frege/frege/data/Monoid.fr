--- This module deals with Semigroups and Monoids

package Data.Monoid  where

infixr 13 `<>` mappend

(<>) = mappend

class Semigroup this where
  mappend :: this -> this -> this
  
  --doesn't support empty lists, use mconcat if possible
  sconcat :: [this] -> this
  sconcat xs = foldr mappend (head xs) (tail xs)
  
  --doesn't support factor of 0, use mtimes if possible
  stimes :: Int -> this -> this
  stimes n x | n < 1 = error "factor must be positive"
             | n == 1 = x
             | n `rem` 2 == 0 = stimes (n `quot` 2) $ mappend x x
             | otherwise = mappend x $ stimes (n `quot` 2) $ mappend x x 
  
class Monoid Semigroup this => this where
  mempty :: this 
  
  mconcat :: [this] -> this
  mconcat = fold mappend mempty  
  
  mtimes :: Int -> this -> this
  mtimes 0 _ = mempty
  mtimes n x = stimes n x 
  
-- List ----------------------------------------------------------------------- 

instance Monoid [a] where
  mempty = []
  mappend = (++)
  
instance Monoid String where
    mappend = (++)
    mempty  = String.empty
    
-- Unit -----------------------------------------------------------------------

instance Monoid () where
  mempty = ()  
  _ `mappend` _ = ()  

-- Maybe ---------------------------------------------------------------------

instance Monoid Semigroup a => Maybe a where
  mempty = Nothing
  Nothing `mappend` b = b
  a `mappend` Nothing = a
  Just a `mappend` Just b = Just (mappend a b)
-- First ---------------------------------------------------------------------- 

data First a = First { getFirst :: Maybe a }
derive Show First a
derive Eq First a
derive Ord First a

instance Monoid First a where
  mempty = First Nothing
  First Nothing `mappend` y = y
  x `mappend` _ = x
  
-- Last ----------------------------------------------------------------------- 

data Last a = Last { getLast :: Maybe a }
derive Show Last a
derive Eq Last a
derive Ord Last a

instance Monoid Last a where
  mempty = Last Nothing
  x `mappend` Last Nothing = x 
  _ `mappend` y = y

-- Ordering -------------------------------------------------------------------

instance Monoid Ordering where
  mempty = Eq
  Lt `mappend` _ = Lt
  Eq `mappend` y = y
  Gt `mappend` _ = Gt  
 


instance Monoid (a->a) where
    f `mappend` g = f . g
    mempty        = id

-- IO -------------------------------------------------------------------------

instance Monoid Monoid a => IO a where
  mempty = return mempty 
  mappend = liftM2 mappend
{- 
--with #FlexibleInstances this would generalize to
instance Semigroup (Monad m, Semigroup a) => m a where
  mappend = liftM2 Semigroup.mappend
instance Monoid (Monad m, Monoid a) => m a where
  mempty = return Monoid.mempty 
-}  
  

