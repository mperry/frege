--- 'Monoid' instances for bounded and ordered values, using 'min' and 'max'
module frege.data.wrapper.Ord where

import Data.Monoid

  
data Min a = Min { unwrap :: a }
derive Show Min a
derive Eq Min a
derive Ord Min a

getMin = Min.unwrap

instance Monoid (Ord a, Bounded a) => Min a where
  mempty = Min maxBound
instance Semigroup Ord a => Min a where
  Min a `mappend` Min b = Min (a `min` b)
    
  
data Max a = Max { unwrap :: a }
derive Show Max a
derive Eq Max a
derive Ord Max a

getMax = Max.unwrap

instance Monoid (Ord a, Bounded a) => Max a where
  mempty = Max minBound
instance Semigroup Ord a => Max a where
  Max a `mappend` Max b = Max (a `max` b)
