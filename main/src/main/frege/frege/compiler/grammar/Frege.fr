--begin top
{- 

    Copyright Â© 2011 - 2015, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. 
        
        Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

     -}

{--
    This is the grammar for the Frege language.
-}
module frege.compiler.grammar.Frege where

    {-
       !!! DO NOT CHANGE FILE Frege.fr, IT HAS BEEN CREATED AUTOMATICALLY !!!
    -}

import frege.Prelude hiding(<+>, break)

import frege.control.monad.State(State)

import Data.TreeMap(insert)
import Data.List as DL(elemBy)

import  Compiler.enums.Flags 
import  Compiler.enums.TokenID(TokenID)
import  Compiler.enums.Visibility
import  Compiler.enums.Literals
import  Compiler.enums.CaseKind

import  Compiler.types.Positions
import  Compiler.types.Tokens
import  Compiler.types.Kinds
import  Compiler.types.SNames
import  Compiler.types.Packs(magicPack)
import  Compiler.types.ImportDetails
import  Compiler.types.Types
import  Compiler.types.SourceDefinitions
import  Compiler.types.ConstructorField
import  Compiler.types.Global as G

import  Compiler.common.Mangle
import  Compiler.common.Errors as E()
import  Compiler.common.Resolve as R(enclosed)

import Lib.PP (group, break, msgdoc)
import frege.compiler.common.Tuples as T(tuple)
import frege.compiler.common.Desugar

import frege.compiler.grammar.Lexer (substQQ)


-- this will speed up the parser by a factor of 70, cause yyprods comes out monotyped.
private yyprod1 :: [(Int, YYsi ParseResult Token)]
    -> StG (YYsi ParseResult Token, [(Int, YYsi ParseResult Token)])


{-
 The following definitions are not strictly necessary, but they help
 to avoid truly crazy type signatures for parse stack items and
 considerably speed up type checking in giving the result types of
 certain nonterminal reduction rules.
 Note that you cannot lie about the type of nonterminal reduction rules.
 Note that types like "Maybe x" on the RHS must be given like so: (Maybe x)
 -}
--end top
type YYM = State;
-- data YYAction = YYShift Int | YYRed Int | YYErr | YYAccept;
!yyAccept = maxBound :: Int;
!yyErr    = minBound :: Int;
{-- positive numbers are *shift* actions, or *accept*
    negative ones are *reduce* actions, or *error* --}
data YYAction = YYAction Int;
data YYsi res tok  = 
	  YYStart () | YYAcc res | YYTok tok
	| YYNTaeq Token
	| YYNTalias Token
	| YYNTannoitem Token
	| YYNTannoitems [Token]
	| YYNTannotation [Def]
	| YYNTappex Exp
	| YYNTbinex Exp
	| YYNTboundvar String
	| YYNTboundvars [String]
	| YYNTcalt CAltS
	| YYNTcalts [CAltS]
	| YYNTclassdef Def
	| YYNTcommata Int
	| YYNTconfld [ConField SName]
	| YYNTconflds [ConField SName]
	| YYNTcontypes [ConField SName]
	| YYNTdalt DConS
	| YYNTdalts [DConS]
	| YYNTdatadef Def
	| YYNTdatainit Def
	| YYNTdefinition [Def]
	| YYNTdefinitions [Def]
	| YYNTderivedef Def
	| YYNTdocs String
	| YYNTdocumentation Def
	| YYNTdodefs [Qual]
	| YYNTdplocaldef [Def]
	| YYNTdvars [TauS]
	| YYNTelsex Token
	| YYNTexpr Exp
	| YYNTexprSC [Exp]
	| YYNTexprSS [Exp]
	| YYNTfield (String, Exp)
	| YYNTfields [(String, Exp)]
	| YYNTfixity Def
	| YYNTfldid (Position, String, Visibility, Bool)
	| YYNTfldids [(Position, String, Visibility, Bool)]
	| YYNTforall SigmaS
	| YYNTfundef [Def]
	| YYNTfunhead (Exp, [Pat])
	| YYNTgetfield (Token, Bool,Exp)
	| YYNTgetfields [(Token,Bool,Exp)]
	| YYNTgqual Qual
	| YYNTgquals [Qual]
	| YYNTguard Guard
	| YYNTguards [Guard]
	| YYNTimport Def
	| YYNTimportitem ImportItem
	| YYNTimportliste ImportList
	| YYNTimportspec ImportItem
	| YYNTimportspecs [ImportItem]
	| YYNTimpurenativedef Def
	| YYNTinfix Def
	| YYNTinstdef Def
	| YYNTinterfaces [TauS]
	| YYNTjtoken Token
	| YYNTjtokens [Token]
	| YYNTkind Kind
	| YYNTlambda Exp
	| YYNTlcqual Qual
	| YYNTlcquals [Qual]
	| YYNTletdef [Def]
	| YYNTletdefs [Def]
	| YYNTliteral Exp
	| YYNTlocaldef [Def]
	| YYNTlocaldefs [Def]
	| YYNTmbdot Token
	| YYNTmemspec ImportItem
	| YYNTmemspecs [ImportItem]
	| YYNTmoduledefinition Def
	| YYNTnativedef Def
	| YYNTnativename String
	| YYNTnativepur (Bool, Bool)
	| YYNTnativestart Token
	| YYNToperator Token
	| YYNToperators [String]
	| YYNTopstring String
	| YYNTpackage ParseResult
	| YYNTpackageclause (String, Maybe String, Position)
	| YYNTpackagename (String, Position)
	| YYNTpackagename1 (String, Position)
	| YYNTpattern Pat
	| YYNTplainfldid (Position, String, Visibility, Bool)
	| YYNTplocaldef [Def]
	| YYNTprimary Exp
	| YYNTpublicdefinition [Def]
	| YYNTqconid SName
	| YYNTqualifiers (Token -> SName)
	| YYNTqvarid SName
	| YYNTqvarids [SName]
	| YYNTqvarop SName
	| YYNTrho RhoS
	| YYNTrhofun RhoS
	| YYNTscript ParseResult
	| YYNTsemicoli Int
	| YYNTsigex SigExs
	| YYNTsigexs [SigExs]
	| YYNTsigma SigmaS
	| YYNTsimpledalt DConS
	| YYNTsimplekind Kind
	| YYNTsimpletype TauS
	| YYNTsimpletypes [TauS]
	| YYNTstrictdalt DConS
	| YYNTstrictfldid (Position, String, Visibility, Bool)
	| YYNTtapp TauS
	| YYNTtau TauS
	| YYNTtauSB [TauS]
	| YYNTtauSC [TauS]
	| YYNTterm Exp
	| YYNTthenx Token
	| YYNTtopdefinition [Def]
	| YYNTtopex Exp
	| YYNTtyname SName
	| YYNTtypeclause (Maybe TauS)
	| YYNTtypedef Def
	| YYNTtyvar TauS
	| YYNTunex Exp
	| YYNTunop Token
	| YYNTvarid Token
	| YYNTvaridkw Token
	| YYNTvarop Token
	| YYNTvisdalt DConS
	| YYNTvisibledefinition [Def]
	| YYNTwheredef [Def]
	| YYNTwherelet [Def]
	| YYNTwheretokens [Token]
	| YYNTword String
	| YYNTwords [String];
showsi (YYStart  _) = "%start ";
	showsi (YYAcc _) = "%accept ";
	showsi (YYTok x) = yyshow x;
	showsi (YYNTaeq _) = "<aeq>";
	showsi (YYNTalias _) = "<alias>";
	showsi (YYNTannoitem _) = "<annoitem>";
	showsi (YYNTannoitems _) = "<annoitems>";
	showsi (YYNTannotation _) = "<annotation>";
	showsi (YYNTappex _) = "<appex>";
	showsi (YYNTbinex _) = "<binex>";
	showsi (YYNTboundvar _) = "<boundvar>";
	showsi (YYNTboundvars _) = "<boundvars>";
	showsi (YYNTcalt _) = "<calt>";
	showsi (YYNTcalts _) = "<calts>";
	showsi (YYNTclassdef _) = "<classdef>";
	showsi (YYNTcommata _) = "<commata>";
	showsi (YYNTconfld _) = "<confld>";
	showsi (YYNTconflds _) = "<conflds>";
	showsi (YYNTcontypes _) = "<contypes>";
	showsi (YYNTdalt _) = "<dalt>";
	showsi (YYNTdalts _) = "<dalts>";
	showsi (YYNTdatadef _) = "<datadef>";
	showsi (YYNTdatainit _) = "<datainit>";
	showsi (YYNTdefinition _) = "<definition>";
	showsi (YYNTdefinitions _) = "<definitions>";
	showsi (YYNTderivedef _) = "<derivedef>";
	showsi (YYNTdocs _) = "<docs>";
	showsi (YYNTdocumentation _) = "<documentation>";
	showsi (YYNTdodefs _) = "<dodefs>";
	showsi (YYNTdplocaldef _) = "<dplocaldef>";
	showsi (YYNTdvars _) = "<dvars>";
	showsi (YYNTelsex _) = "<elsex>";
	showsi (YYNTexpr _) = "<expr>";
	showsi (YYNTexprSC _) = "<exprSC>";
	showsi (YYNTexprSS _) = "<exprSS>";
	showsi (YYNTfield _) = "<field>";
	showsi (YYNTfields _) = "<fields>";
	showsi (YYNTfixity _) = "<fixity>";
	showsi (YYNTfldid _) = "<fldid>";
	showsi (YYNTfldids _) = "<fldids>";
	showsi (YYNTforall _) = "<forall>";
	showsi (YYNTfundef _) = "<fundef>";
	showsi (YYNTfunhead _) = "<funhead>";
	showsi (YYNTgetfield _) = "<getfield>";
	showsi (YYNTgetfields _) = "<getfields>";
	showsi (YYNTgqual _) = "<gqual>";
	showsi (YYNTgquals _) = "<gquals>";
	showsi (YYNTguard _) = "<guard>";
	showsi (YYNTguards _) = "<guards>";
	showsi (YYNTimport _) = "<import>";
	showsi (YYNTimportitem _) = "<importitem>";
	showsi (YYNTimportliste _) = "<importliste>";
	showsi (YYNTimportspec _) = "<importspec>";
	showsi (YYNTimportspecs _) = "<importspecs>";
	showsi (YYNTimpurenativedef _) = "<impurenativedef>";
	showsi (YYNTinfix _) = "<infix>";
	showsi (YYNTinstdef _) = "<instdef>";
	showsi (YYNTinterfaces _) = "<interfaces>";
	showsi (YYNTjtoken _) = "<jtoken>";
	showsi (YYNTjtokens _) = "<jtokens>";
	showsi (YYNTkind _) = "<kind>";
	showsi (YYNTlambda _) = "<lambda>";
	showsi (YYNTlcqual _) = "<lcqual>";
	showsi (YYNTlcquals _) = "<lcquals>";
	showsi (YYNTletdef _) = "<letdef>";
	showsi (YYNTletdefs _) = "<letdefs>";
	showsi (YYNTliteral _) = "<literal>";
	showsi (YYNTlocaldef _) = "<localdef>";
	showsi (YYNTlocaldefs _) = "<localdefs>";
	showsi (YYNTmbdot _) = "<mbdot>";
	showsi (YYNTmemspec _) = "<memspec>";
	showsi (YYNTmemspecs _) = "<memspecs>";
	showsi (YYNTmoduledefinition _) = "<moduledefinition>";
	showsi (YYNTnativedef _) = "<nativedef>";
	showsi (YYNTnativename _) = "<nativename>";
	showsi (YYNTnativepur _) = "<nativepur>";
	showsi (YYNTnativestart _) = "<nativestart>";
	showsi (YYNToperator _) = "<operator>";
	showsi (YYNToperators _) = "<operators>";
	showsi (YYNTopstring _) = "<opstring>";
	showsi (YYNTpackage _) = "<package>";
	showsi (YYNTpackageclause _) = "<packageclause>";
	showsi (YYNTpackagename _) = "<packagename>";
	showsi (YYNTpackagename1 _) = "<packagename1>";
	showsi (YYNTpattern _) = "<pattern>";
	showsi (YYNTplainfldid _) = "<plainfldid>";
	showsi (YYNTplocaldef _) = "<plocaldef>";
	showsi (YYNTprimary _) = "<primary>";
	showsi (YYNTpublicdefinition _) = "<publicdefinition>";
	showsi (YYNTqconid _) = "<qconid>";
	showsi (YYNTqualifiers _) = "<qualifiers>";
	showsi (YYNTqvarid _) = "<qvarid>";
	showsi (YYNTqvarids _) = "<qvarids>";
	showsi (YYNTqvarop _) = "<qvarop>";
	showsi (YYNTrho _) = "<rho>";
	showsi (YYNTrhofun _) = "<rhofun>";
	showsi (YYNTscript _) = "<script>";
	showsi (YYNTsemicoli _) = "<semicoli>";
	showsi (YYNTsigex _) = "<sigex>";
	showsi (YYNTsigexs _) = "<sigexs>";
	showsi (YYNTsigma _) = "<sigma>";
	showsi (YYNTsimpledalt _) = "<simpledalt>";
	showsi (YYNTsimplekind _) = "<simplekind>";
	showsi (YYNTsimpletype _) = "<simpletype>";
	showsi (YYNTsimpletypes _) = "<simpletypes>";
	showsi (YYNTstrictdalt _) = "<strictdalt>";
	showsi (YYNTstrictfldid _) = "<strictfldid>";
	showsi (YYNTtapp _) = "<tapp>";
	showsi (YYNTtau _) = "<tau>";
	showsi (YYNTtauSB _) = "<tauSB>";
	showsi (YYNTtauSC _) = "<tauSC>";
	showsi (YYNTterm _) = "<term>";
	showsi (YYNTthenx _) = "<thenx>";
	showsi (YYNTtopdefinition _) = "<topdefinition>";
	showsi (YYNTtopex _) = "<topex>";
	showsi (YYNTtyname _) = "<tyname>";
	showsi (YYNTtypeclause _) = "<typeclause>";
	showsi (YYNTtypedef _) = "<typedef>";
	showsi (YYNTtyvar _) = "<tyvar>";
	showsi (YYNTunex _) = "<unex>";
	showsi (YYNTunop _) = "<unop>";
	showsi (YYNTvarid _) = "<varid>";
	showsi (YYNTvaridkw _) = "<varidkw>";
	showsi (YYNTvarop _) = "<varop>";
	showsi (YYNTvisdalt _) = "<visdalt>";
	showsi (YYNTvisibledefinition _) = "<visibledefinition>";
	showsi (YYNTwheredef _) = "<wheredef>";
	showsi (YYNTwherelet _) = "<wherelet>";
	showsi (YYNTwheretokens _) = "<wheretokens>";
	showsi (YYNTword _) = "<word>";
	showsi (YYNTwords _) = "<words>";
showst st = joined " " (map (\(_,si) -> showsi si) (reverse st));
!yydebug = (maybe "" id (System.getenv "YYDEBUG")).toLowerCase ~ Â´(1|yes|true|on)Â´;
yytrace s = (if yydebug then trace s else false) `seq` ();
yydbgAccept  s t = yytrace ("in state " ++ show s ++ " accept  " ++ show t ++  "\n" );
private yyaction0 t =   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    PACKAGE -> YYAction 2;
    PROTECTED -> YYAction 3;
    INTERPRET -> YYAction 4;
    _ -> (YYAction yyErr);
  };
private yyaction1 t =   case yychar t of {
  ';' -> YYAction 8;
  '?' -> YYAction (-14);
  '!' -> YYAction (-14);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    VARID -> YYAction (-14);
    PACKAGE -> YYAction (-14);
    PRIVATE -> YYAction (-14);
    PROTECTED -> YYAction (-14);
    PUBLIC -> YYAction (-14);
    _ -> (YYAction yyErr);
  };
};
private yyaction2 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction3 t =   case yytoken t of {
    PACKAGE -> YYAction 23;
    _ -> (YYAction yyErr);
  };
private yyaction4 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
yyaccept  (yyvals@((5, (YYNTpackage yy1)):_), yytoks) = yydbgAccept 5 (showst (take 1 yyvals)) `seq`
	([(5, YYAcc yy1)], yytoks);
yyaccept (yyvs,_) = yybadprod 5 yyvs;
private yyaction5 t = (YYAction yyErr);
private yyaction6 t =   case yychar t of {
  ';' -> YYAction 64;
  _ ->   case yytoken t of {
    VARID -> YYAction 62;
    WHERE -> YYAction 63;
    _ -> (YYAction yyErr);
  };
};
private yyaction7 t =   case yytoken t of {
    PACKAGE -> YYAction 67;
    PROTECTED -> YYAction 68;
    _ -> (YYAction yyErr);
  };
private yyaction8 t =   case yychar t of {
  ';' -> YYAction 8;
  '-' -> YYAction (-25);
  '}' -> YYAction (-25);
  '(' -> YYAction (-25);
  '[' -> YYAction (-25);
  '?' -> YYAction (-25);
  '!' -> YYAction (-25);
  '\\' -> YYAction (-25);
  '_' -> YYAction (-25);
  _ ->   case yytoken t of {
    VARID -> YYAction (-25);
    CONID -> YYAction (-25);
    QUALIFIER -> YYAction (-25);
    DOCUMENTATION -> YYAction (-25);
    IMPORT -> YYAction (-25);
    INFIX -> YYAction (-25);
    INFIXR -> YYAction (-25);
    INFIXL -> YYAction (-25);
    NATIVE -> YYAction (-25);
    DATA -> YYAction (-25);
    CLASS -> YYAction (-25);
    INSTANCE -> YYAction (-25);
    ABSTRACT -> YYAction (-25);
    TYPE -> YYAction (-25);
    TRUE -> YYAction (-25);
    FALSE -> YYAction (-25);
    IF -> YYAction (-25);
    CASE -> YYAction (-25);
    DERIVE -> YYAction (-25);
    LET -> YYAction (-25);
    DO -> YYAction (-25);
    PRIVATE -> YYAction (-25);
    PROTECTED -> YYAction (-25);
    PUBLIC -> YYAction (-25);
    PURE -> YYAction (-25);
    INTCONST -> YYAction (-25);
    STRCONST -> YYAction (-25);
    LONGCONST -> YYAction (-25);
    FLTCONST -> YYAction (-25);
    DBLCONST -> YYAction (-25);
    CHRCONST -> YYAction (-25);
    REGEXP -> YYAction (-25);
    BIGCONST -> YYAction (-25);
    _ -> (YYAction yyErr);
  };
};
private yyaction9 t = YYAction (-15);
private yyaction10 t =   case yytoken t of {
    DOCUMENTATION -> YYAction 1;
    _ -> (YYAction yyErr);
  };
private yyaction11 t = YYAction (-172);
private yyaction12 t = YYAction (-10);
private yyaction13 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction14 t = YYAction (-177);
private yyaction15 t = YYAction (-178);
private yyaction16 t = YYAction (-175);
private yyaction17 t = YYAction (-173);
private yyaction18 t = YYAction (-174);
private yyaction19 t = YYAction (-176);
private yyaction20 t = YYAction (-13);
private yyaction21 t =   case yychar t of {
  '.' -> YYAction 72;
  _ -> (YYAction yyErr);
};
private yyaction22 t = YYAction (-18);
private yyaction23 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction24 t = YYAction (-183);
private yyaction25 t = YYAction (-186);
private yyaction26 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '{' -> YYAction (-380);
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 75;
    QUALIFIER -> YYAction 76;
    _ -> (YYAction yyErr);
  };
};
private yyaction27 t = YYAction (-323);
private yyaction28 t = YYAction (-324);
private yyaction29 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction30 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction31 t =   case yychar t of {
  '{' -> YYAction 81;
  _ -> (YYAction yyErr);
};
private yyaction32 t =   case yychar t of {
  '{' -> YYAction 82;
  _ -> (YYAction yyErr);
};
private yyaction33 t = YYAction (-327);
private yyaction34 t = YYAction (-326);
private yyaction35 t = YYAction (-329);
private yyaction36 t = YYAction (-330);
private yyaction37 t = YYAction (-331);
private yyaction38 t = YYAction (-325);
private yyaction39 t = YYAction (-332);
private yyaction40 t = YYAction (-328);
private yyaction41 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction42 t =   case yychar t of {
  '-' -> YYAction 85;
  '(' -> YYAction 42;
  ')' -> YYAction 86;
  ',' -> YYAction 87;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction43 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  ']' -> YYAction 93;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction44 t = YYAction (-195);
private yyaction45 t = YYAction (-194);
private yyaction46 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction47 t = YYAction (-398);
private yyaction48 t = YYAction (-3);
private yyaction49 t = YYAction (-4);
private yyaction50 t = YYAction (-396);
private yyaction51 t =   case yychar t of {
  '{' -> YYAction 98;
  '-' -> YYAction (-399);
  ';' -> YYAction (-399);
  '}' -> YYAction (-399);
  '.' -> YYAction (-399);
  '(' -> YYAction (-399);
  ')' -> YYAction (-399);
  ',' -> YYAction (-399);
  '|' -> YYAction (-399);
  '[' -> YYAction (-399);
  ']' -> YYAction (-399);
  '?' -> YYAction (-399);
  '!' -> YYAction (-399);
  '=' -> YYAction (-399);
  '\\' -> YYAction (-399);
  '_' -> YYAction (-399);
  _ ->   case yytoken t of {
    VARID -> YYAction (-399);
    CONID -> YYAction (-399);
    QUALIFIER -> YYAction (-399);
    WHERE -> YYAction (-399);
    TRUE -> YYAction (-399);
    FALSE -> YYAction (-399);
    THEN -> YYAction (-399);
    ELSE -> YYAction (-399);
    OF -> YYAction (-399);
    DO -> YYAction (-399);
    INTCONST -> YYAction (-399);
    STRCONST -> YYAction (-399);
    LONGCONST -> YYAction (-399);
    FLTCONST -> YYAction (-399);
    DBLCONST -> YYAction (-399);
    CHRCONST -> YYAction (-399);
    REGEXP -> YYAction (-399);
    BIGCONST -> YYAction (-399);
    ARROW -> YYAction (-399);
    DCOLON -> YYAction (-399);
    GETS -> YYAction (-399);
    DOTDOT -> YYAction (-399);
    SOMEOP -> YYAction (-399);
    _ -> (YYAction yyErr);
  };
};
private yyaction52 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction53 t =   case yychar t of {
  '-' -> YYAction 102;
  ';' -> YYAction (-362);
  '}' -> YYAction (-362);
  ')' -> YYAction (-362);
  ',' -> YYAction (-362);
  '|' -> YYAction (-362);
  ']' -> YYAction (-362);
  '=' -> YYAction (-362);
  '\\' -> YYAction (-362);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 100;
    SOMEOP -> YYAction 101;
    WHERE -> YYAction (-362);
    THEN -> YYAction (-362);
    ELSE -> YYAction (-362);
    OF -> YYAction (-362);
    ARROW -> YYAction (-362);
    GETS -> YYAction (-362);
    DOTDOT -> YYAction (-362);
    _ -> (YYAction yyErr);
  };
};
private yyaction54 t = YYAction (-397);
private yyaction55 t = YYAction (-374);
private yyaction56 t = YYAction (-370);
private yyaction57 t =   case yychar t of {
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  '-' -> YYAction (-375);
  ';' -> YYAction (-375);
  '}' -> YYAction (-375);
  ')' -> YYAction (-375);
  ',' -> YYAction (-375);
  '|' -> YYAction (-375);
  ']' -> YYAction (-375);
  '=' -> YYAction (-375);
  '\\' -> YYAction (-375);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    WHERE -> YYAction (-375);
    THEN -> YYAction (-375);
    ELSE -> YYAction (-375);
    OF -> YYAction (-375);
    ARROW -> YYAction (-375);
    DCOLON -> YYAction (-375);
    GETS -> YYAction (-375);
    DOTDOT -> YYAction (-375);
    SOMEOP -> YYAction (-375);
    _ -> (YYAction yyErr);
  };
};
private yyaction58 t = YYAction (-376);
private yyaction59 t =   case yychar t of {
  '.' -> YYAction 104;
  '-' -> YYAction (-378);
  ';' -> YYAction (-378);
  '}' -> YYAction (-378);
  '(' -> YYAction (-378);
  ')' -> YYAction (-378);
  ',' -> YYAction (-378);
  '|' -> YYAction (-378);
  '[' -> YYAction (-378);
  ']' -> YYAction (-378);
  '?' -> YYAction (-378);
  '!' -> YYAction (-378);
  '=' -> YYAction (-378);
  '\\' -> YYAction (-378);
  '_' -> YYAction (-378);
  _ ->   case yytoken t of {
    VARID -> YYAction (-378);
    CONID -> YYAction (-378);
    QUALIFIER -> YYAction (-378);
    WHERE -> YYAction (-378);
    TRUE -> YYAction (-378);
    FALSE -> YYAction (-378);
    THEN -> YYAction (-378);
    ELSE -> YYAction (-378);
    OF -> YYAction (-378);
    DO -> YYAction (-378);
    INTCONST -> YYAction (-378);
    STRCONST -> YYAction (-378);
    LONGCONST -> YYAction (-378);
    FLTCONST -> YYAction (-378);
    DBLCONST -> YYAction (-378);
    CHRCONST -> YYAction (-378);
    REGEXP -> YYAction (-378);
    BIGCONST -> YYAction (-378);
    ARROW -> YYAction (-378);
    DCOLON -> YYAction (-378);
    GETS -> YYAction (-378);
    DOTDOT -> YYAction (-378);
    SOMEOP -> YYAction (-378);
    _ -> (YYAction yyErr);
  };
};
private yyaction60 t =   case yychar t of {
  '{' -> YYAction 105;
  _ -> (YYAction yyErr);
};
private yyaction61 t = YYAction (-382);
private yyaction62 t = YYAction (-22);
private yyaction63 t =   case yychar t of {
  '{' -> YYAction 106;
  _ -> (YYAction yyErr);
};
private yyaction64 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    ABSTRACT -> YYAction 117;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 120;
    PROTECTED -> YYAction 121;
    PUBLIC -> YYAction 122;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction65 t =   case yychar t of {
  '(' -> YYAction 152;
  _ -> (YYAction yyErr);
};
private yyaction66 t =   case yychar t of {
  '(' -> YYAction (-23);
  _ ->   case yytoken t of {
    VARID -> YYAction 62;
    _ -> (YYAction yyErr);
  };
};
private yyaction67 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction68 t =   case yytoken t of {
    PACKAGE -> YYAction 155;
    _ -> (YYAction yyErr);
  };
private yyaction69 t = YYAction (-26);
private yyaction70 t = YYAction (-16);
private yyaction71 t = YYAction (-12);
private yyaction72 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction73 t = YYAction (-20);
private yyaction74 t = YYAction (-187);
private yyaction75 t = YYAction (-185);
private yyaction76 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '{' -> YYAction (-381);
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 157;
    _ -> (YYAction yyErr);
  };
};
private yyaction77 t = YYAction (-188);
private yyaction78 t = YYAction (-182);
private yyaction79 t =   case yychar t of {
  ';' -> YYAction 160;
  _ ->   case yytoken t of {
    THEN -> YYAction 159;
    _ -> (YYAction yyErr);
  };
};
private yyaction80 t =   case yytoken t of {
    OF -> YYAction 162;
    _ -> (YYAction yyErr);
  };
private yyaction81 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction82 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction83 t = YYAction (-369);
private yyaction84 t = YYAction (-193);
private yyaction85 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 172;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction86 t = YYAction (-402);
private yyaction87 t =   case yychar t of {
  ',' -> YYAction 87;
  ')' -> YYAction (-418);
  _ -> (YYAction yyErr);
};
private yyaction88 t =   case yychar t of {
  ';' -> YYAction 174;
  ')' -> YYAction 175;
  ',' -> YYAction 176;
  _ -> (YYAction yyErr);
};
private yyaction89 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  ')' -> YYAction 177;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction90 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 179;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction91 t =   case yychar t of {
  ')' -> YYAction 180;
  _ -> (YYAction yyErr);
};
private yyaction92 t =   case yychar t of {
  '-' -> YYAction 182;
  ';' -> YYAction (-362);
  ')' -> YYAction (-362);
  ',' -> YYAction (-362);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 100;
    SOMEOP -> YYAction 181;
    _ -> (YYAction yyErr);
  };
};
private yyaction93 t = YYAction (-413);
private yyaction94 t =   case yychar t of {
  ',' -> YYAction 184;
  '|' -> YYAction 185;
  ']' -> YYAction (-431);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-431);
    _ -> (YYAction yyErr);
  };
};
private yyaction95 t =   case yychar t of {
  ']' -> YYAction 187;
  _ ->   case yytoken t of {
    DOTDOT -> YYAction 186;
    _ -> (YYAction yyErr);
  };
};
private yyaction96 t = YYAction (-333);
private yyaction97 t =   case yychar t of {
  '\\' -> YYAction 46;
  _ ->   case yytoken t of {
    ARROW -> YYAction 188;
    _ -> (YYAction yyErr);
  };
};
private yyaction98 t =   case yychar t of {
  '}' -> YYAction 191;
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    _ -> (YYAction yyErr);
  };
};
private yyaction99 t = YYAction (-379);
private yyaction100 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction101 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction102 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction103 t = YYAction (-377);
private yyaction104 t =   case yychar t of {
  '{' -> YYAction 213;
  '[' -> YYAction 214;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 212;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction105 t =   case yytoken t of {
    VARID -> YYAction 217;
    _ -> (YYAction yyErr);
  };
private yyaction106 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    ABSTRACT -> YYAction 117;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 120;
    PROTECTED -> YYAction 121;
    PUBLIC -> YYAction 122;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction107 t =   case yychar t of {
  '-' -> YYAction (-183);
  '.' -> YYAction (-183);
  '(' -> YYAction (-183);
  ',' -> YYAction (-171);
  '|' -> YYAction (-183);
  '[' -> YYAction (-183);
  '?' -> YYAction (-183);
  '!' -> YYAction (-183);
  '=' -> YYAction (-183);
  '_' -> YYAction (-183);
  _ ->   case yytoken t of {
    VARID -> YYAction (-183);
    CONID -> YYAction (-183);
    QUALIFIER -> YYAction (-183);
    TRUE -> YYAction (-183);
    FALSE -> YYAction (-183);
    DO -> YYAction (-183);
    INTCONST -> YYAction (-183);
    STRCONST -> YYAction (-183);
    LONGCONST -> YYAction (-183);
    FLTCONST -> YYAction (-183);
    DBLCONST -> YYAction (-183);
    CHRCONST -> YYAction (-183);
    REGEXP -> YYAction (-183);
    BIGCONST -> YYAction (-183);
    DCOLON -> YYAction (-171);
    SOMEOP -> YYAction (-183);
    _ -> (YYAction yyErr);
  };
};
private yyaction108 t = YYAction (-117);
private yyaction109 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction110 t =   case yytoken t of {
    INTCONST -> YYAction 222;
    _ -> (YYAction yyErr);
  };
private yyaction111 t =   case yytoken t of {
    INTCONST -> YYAction 223;
    _ -> (YYAction yyErr);
  };
private yyaction112 t =   case yytoken t of {
    INTCONST -> YYAction 224;
    _ -> (YYAction yyErr);
  };
private yyaction113 t =   case yychar t of {
  '-' -> YYAction 226;
  '(' -> YYAction 227;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    PACKAGE -> YYAction 225;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction114 t =   case yytoken t of {
    CONID -> YYAction 231;
    _ -> (YYAction yyErr);
  };
private yyaction115 t =   case yytoken t of {
    CONID -> YYAction 232;
    _ -> (YYAction yyErr);
  };
private yyaction116 t =   case yychar t of {
  '(' -> YYAction 233;
  '[' -> YYAction 234;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    _ -> (YYAction yyErr);
  };
};
private yyaction117 t =   case yytoken t of {
    DATA -> YYAction 114;
    _ -> (YYAction yyErr);
  };
private yyaction118 t =   case yytoken t of {
    CONID -> YYAction 237;
    _ -> (YYAction yyErr);
  };
private yyaction119 t =   case yychar t of {
  '(' -> YYAction 233;
  '[' -> YYAction 234;
  _ ->   case yytoken t of {
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    _ -> (YYAction yyErr);
  };
};
private yyaction120 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 239;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction121 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 239;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction122 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 239;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction123 t =   case yytoken t of {
    NATIVE -> YYAction 239;
    _ -> (YYAction yyErr);
  };
private yyaction124 t =   case yychar t of {
  '-' -> YYAction 244;
  '(' -> YYAction 42;
  ')' -> YYAction 86;
  ',' -> YYAction 87;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction125 t = YYAction (-1);
private yyaction126 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-27);
  _ -> (YYAction yyErr);
};
private yyaction127 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ';' -> YYAction (-30);
  '}' -> YYAction (-30);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    ABSTRACT -> YYAction 117;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 120;
    PROTECTED -> YYAction 121;
    PUBLIC -> YYAction 122;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction128 t = YYAction (-32);
private yyaction129 t = YYAction (-33);
private yyaction130 t = YYAction (-41);
private yyaction131 t = YYAction (-119);
private yyaction132 t = YYAction (-38);
private yyaction133 t = YYAction (-39);
private yyaction134 t = YYAction (-40);
private yyaction135 t = YYAction (-118);
private yyaction136 t = YYAction (-120);
private yyaction137 t = YYAction (-121);
private yyaction138 t = YYAction (-122);
private yyaction139 t = YYAction (-123);
private yyaction140 t = YYAction (-127);
private yyaction141 t = YYAction (-128);
private yyaction142 t =   case yychar t of {
  ';' -> YYAction (-129);
  '}' -> YYAction (-129);
  _ ->   case yytoken t of {
    WHERE -> YYAction 249;
    _ -> (YYAction yyErr);
  };
};
private yyaction143 t = YYAction (-206);
private yyaction144 t =   case yychar t of {
  '-' -> YYAction 252;
  _ ->   case yytoken t of {
    VARID -> YYAction 251;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction145 t =   case yytoken t of {
    DCOLON -> YYAction 256;
    _ -> (YYAction yyErr);
  };
private yyaction146 t =   case yychar t of {
  ',' -> YYAction 257;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-210);
    _ -> (YYAction yyErr);
  };
};
private yyaction147 t = YYAction (-213);
private yyaction148 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 258;
    CONID -> YYAction 259;
    QUALIFIER -> YYAction 260;
    STRCONST -> YYAction 261;
    DCOLON -> YYAction 262;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction149 t =   case yychar t of {
  ';' -> YYAction (-314);
  '}' -> YYAction (-314);
  _ ->   case yytoken t of {
    WHERE -> YYAction 266;
    _ -> (YYAction yyErr);
  };
};
private yyaction150 t =   case yychar t of {
  '|' -> YYAction 268;
  '=' -> YYAction 269;
  _ -> (YYAction yyErr);
};
private yyaction151 t =   case yychar t of {
  '-' -> YYAction 102;
  '|' -> YYAction (-322);
  '=' -> YYAction (-322);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 101;
    _ -> (YYAction yyErr);
  };
};
private yyaction152 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    QUALIFIER -> YYAction 272;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction153 t = YYAction (-24);
private yyaction154 t = YYAction (-17);
private yyaction155 t =   case yytoken t of {
    VARID -> YYAction 11;
    CONID -> YYAction 12;
    QUALIFIER -> YYAction 13;
    PACKAGE -> YYAction 14;
    IMPORT -> YYAction 15;
    NATIVE -> YYAction 16;
    DATA -> YYAction 17;
    TYPE -> YYAction 18;
    PURE -> YYAction 19;
    _ -> (YYAction yyErr);
  };
private yyaction156 t = YYAction (-11);
private yyaction157 t = YYAction (-184);
private yyaction158 t = YYAction (-181);
private yyaction159 t = YYAction (-364);
private yyaction160 t =   case yytoken t of {
    THEN -> YYAction 278;
    _ -> (YYAction yyErr);
  };
private yyaction161 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction162 t =   case yychar t of {
  '{' -> YYAction 280;
  _ -> (YYAction yyErr);
};
private yyaction163 t = YYAction (-137);
private yyaction164 t =   case yychar t of {
  ';' -> YYAction (-138);
  '}' -> YYAction (-138);
  _ ->   case yytoken t of {
    WHERE -> YYAction 249;
    _ -> (YYAction yyErr);
  };
};
private yyaction165 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-139);
  _ -> (YYAction yyErr);
};
private yyaction166 t =   case yychar t of {
  '}' -> YYAction 282;
  _ -> (YYAction yyErr);
};
private yyaction167 t =   case yychar t of {
  '{' -> YYAction 283;
  _ -> (YYAction yyErr);
};
private yyaction168 t =   case yychar t of {
  '=' -> YYAction 285;
  ';' -> YYAction (-345);
  '}' -> YYAction (-345);
  ',' -> YYAction (-345);
  ']' -> YYAction (-345);
  _ ->   case yytoken t of {
    GETS -> YYAction 284;
    _ -> (YYAction yyErr);
  };
};
private yyaction169 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-342);
  _ -> (YYAction yyErr);
};
private yyaction170 t = YYAction (-336);
private yyaction171 t =   case yychar t of {
  '}' -> YYAction 287;
  _ -> (YYAction yyErr);
};
private yyaction172 t = YYAction (-406);
private yyaction173 t = YYAction (-419);
private yyaction174 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction175 t = YYAction (-412);
private yyaction176 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction177 t = YYAction (-405);
private yyaction178 t =   case yychar t of {
  ')' -> YYAction 292;
  _ -> (YYAction yyErr);
};
private yyaction179 t = YYAction (-404);
private yyaction180 t = YYAction (-403);
private yyaction181 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ')' -> YYAction (-193);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction182 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  ')' -> YYAction 293;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction183 t =   case yychar t of {
  ')' -> YYAction 294;
  _ -> (YYAction yyErr);
};
private yyaction184 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ')' -> YYAction (-433);
  ']' -> YYAction (-433);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    DOTDOT -> YYAction (-433);
    _ -> (YYAction yyErr);
  };
};
private yyaction185 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction186 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  ']' -> YYAction 298;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction187 t = YYAction (-414);
private yyaction188 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction189 t = YYAction (-359);
private yyaction190 t = YYAction (-171);
private yyaction191 t = YYAction (-400);
private yyaction192 t =   case yychar t of {
  '=' -> YYAction 301;
  '}' -> YYAction (-430);
  ',' -> YYAction (-430);
  _ -> (YYAction yyErr);
};
private yyaction193 t =   case yychar t of {
  '}' -> YYAction 302;
  _ -> (YYAction yyErr);
};
private yyaction194 t =   case yychar t of {
  ',' -> YYAction 303;
  '}' -> YYAction (-420);
  _ -> (YYAction yyErr);
};
private yyaction195 t = YYAction (-252);
private yyaction196 t =   case yytoken t of {
    CONID -> YYAction 75;
    QUALIFIER -> YYAction 304;
    _ -> (YYAction yyErr);
  };
private yyaction197 t =   case yytoken t of {
    VARID -> YYAction 305;
    _ -> (YYAction yyErr);
  };
private yyaction198 t =   case yychar t of {
  '(' -> YYAction 198;
  ')' -> YYAction 310;
  ',' -> YYAction 87;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 308;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    ARROW -> YYAction 309;
    _ -> (YYAction yyErr);
  };
};
private yyaction199 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  ']' -> YYAction 315;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction200 t = YYAction (-254);
private yyaction201 t = YYAction (-361);
private yyaction202 t = YYAction (-229);
private yyaction203 t = YYAction (-230);
private yyaction204 t =   case yychar t of {
  '-' -> YYAction (-236);
  ';' -> YYAction (-236);
  '}' -> YYAction (-236);
  ')' -> YYAction (-236);
  ',' -> YYAction (-236);
  '|' -> YYAction (-236);
  ']' -> YYAction (-236);
  '=' -> YYAction (-236);
  '\\' -> YYAction (-236);
  _ ->   case yytoken t of {
    ARROW -> YYAction 317;
    EARROW -> YYAction 318;
    DOCUMENTATION -> YYAction (-236);
    WHERE -> YYAction (-236);
    CLASS -> YYAction (-236);
    THEN -> YYAction (-236);
    ELSE -> YYAction (-236);
    OF -> YYAction (-236);
    THROWS -> YYAction (-236);
    DCOLON -> YYAction (-236);
    GETS -> YYAction (-236);
    DOTDOT -> YYAction (-236);
    SOMEOP -> YYAction (-236);
    _ -> (YYAction yyErr);
  };
};
private yyaction205 t = YYAction (-235);
private yyaction206 t = YYAction (-245);
private yyaction207 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  '-' -> YYAction (-294);
  ';' -> YYAction (-294);
  '}' -> YYAction (-294);
  ')' -> YYAction (-294);
  ',' -> YYAction (-294);
  '|' -> YYAction (-294);
  ']' -> YYAction (-294);
  '=' -> YYAction (-294);
  '\\' -> YYAction (-294);
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    DOCUMENTATION -> YYAction (-294);
    WHERE -> YYAction (-294);
    CLASS -> YYAction (-294);
    THEN -> YYAction (-294);
    ELSE -> YYAction (-294);
    OF -> YYAction (-294);
    THROWS -> YYAction (-294);
    ARROW -> YYAction (-294);
    DCOLON -> YYAction (-294);
    GETS -> YYAction (-294);
    EARROW -> YYAction (-294);
    DOTDOT -> YYAction (-294);
    SOMEOP -> YYAction (-294);
    _ -> (YYAction yyErr);
  };
};
private yyaction208 t = YYAction (-246);
private yyaction209 t = YYAction (-247);
private yyaction210 t =   case yychar t of {
  '-' -> YYAction 102;
  ';' -> YYAction (-367);
  '}' -> YYAction (-367);
  ')' -> YYAction (-367);
  ',' -> YYAction (-367);
  '|' -> YYAction (-367);
  ']' -> YYAction (-367);
  '=' -> YYAction (-367);
  '\\' -> YYAction (-367);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 101;
    WHERE -> YYAction (-367);
    THEN -> YYAction (-367);
    ELSE -> YYAction (-367);
    OF -> YYAction (-367);
    ARROW -> YYAction (-367);
    DCOLON -> YYAction (-367);
    GETS -> YYAction (-367);
    DOTDOT -> YYAction (-367);
    _ -> (YYAction yyErr);
  };
};
private yyaction211 t =   case yychar t of {
  '-' -> YYAction 102;
  ';' -> YYAction (-368);
  '}' -> YYAction (-368);
  ')' -> YYAction (-368);
  ',' -> YYAction (-368);
  '|' -> YYAction (-368);
  ']' -> YYAction (-368);
  '=' -> YYAction (-368);
  '\\' -> YYAction (-368);
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 101;
    WHERE -> YYAction (-368);
    THEN -> YYAction (-368);
    ELSE -> YYAction (-368);
    OF -> YYAction (-368);
    ARROW -> YYAction (-368);
    DCOLON -> YYAction (-368);
    GETS -> YYAction (-368);
    DOTDOT -> YYAction (-368);
    _ -> (YYAction yyErr);
  };
};
private yyaction212 t = YYAction (-384);
private yyaction213 t =   case yytoken t of {
    VARID -> YYAction 320;
    _ -> (YYAction yyErr);
  };
private yyaction214 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction215 t = YYAction (-385);
private yyaction216 t = YYAction (-386);
private yyaction217 t =   case yychar t of {
  '?' -> YYAction 324;
  '=' -> YYAction 325;
  '}' -> YYAction (-428);
  ',' -> YYAction (-428);
  _ ->   case yytoken t of {
    GETS -> YYAction 323;
    _ -> (YYAction yyErr);
  };
};
private yyaction218 t =   case yychar t of {
  '}' -> YYAction 326;
  _ -> (YYAction yyErr);
};
private yyaction219 t =   case yychar t of {
  ',' -> YYAction 327;
  '}' -> YYAction (-423);
  _ -> (YYAction yyErr);
};
private yyaction220 t =   case yychar t of {
  '}' -> YYAction 328;
  _ -> (YYAction yyErr);
};
private yyaction221 t =   case yychar t of {
  '(' -> YYAction 332;
  ';' -> YYAction (-145);
  '}' -> YYAction (-145);
  _ ->   case yytoken t of {
    VARID -> YYAction 329;
    CONID -> YYAction 330;
    PUBLIC -> YYAction 331;
    _ -> (YYAction yyErr);
  };
};
private yyaction222 t = YYAction (-196);
private yyaction223 t = YYAction (-198);
private yyaction224 t = YYAction (-197);
private yyaction225 t =   case yytoken t of {
    TYPE -> YYAction 335;
    WHERE -> YYAction (-43);
    CLASS -> YYAction (-43);
    _ -> (YYAction yyErr);
  };
private yyaction226 t = YYAction (-217);
private yyaction227 t =   case yychar t of {
  '-' -> YYAction 337;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction228 t = YYAction (-215);
private yyaction229 t = YYAction (-216);
private yyaction230 t = YYAction (-214);
private yyaction231 t =   case yychar t of {
  '(' -> YYAction 340;
  '=' -> YYAction 341;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    _ -> (YYAction yyErr);
  };
};
private yyaction232 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction233 t =   case yychar t of {
  ')' -> YYAction 310;
  ',' -> YYAction 87;
  _ ->   case yytoken t of {
    ARROW -> YYAction 309;
    _ -> (YYAction yyErr);
  };
};
private yyaction234 t =   case yychar t of {
  ']' -> YYAction 315;
  _ -> (YYAction yyErr);
};
private yyaction235 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction236 t = YYAction (-37);
private yyaction237 t =   case yychar t of {
  '(' -> YYAction 340;
  '=' -> YYAction 347;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    _ -> (YYAction yyErr);
  };
};
private yyaction238 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction239 t =   case yychar t of {
  '-' -> YYAction 226;
  '(' -> YYAction 227;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction240 t = YYAction (-34);
private yyaction241 t = YYAction (-35);
private yyaction242 t = YYAction (-36);
private yyaction243 t = YYAction (-212);
private yyaction244 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 350;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction245 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  ')' -> YYAction 351;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction246 t =   case yychar t of {
  '(' -> YYAction 42;
  ')' -> YYAction 352;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction247 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-28);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    IMPORT -> YYAction 109;
    INFIX -> YYAction 110;
    INFIXR -> YYAction 111;
    INFIXL -> YYAction 112;
    NATIVE -> YYAction 113;
    DATA -> YYAction 114;
    CLASS -> YYAction 115;
    INSTANCE -> YYAction 116;
    ABSTRACT -> YYAction 117;
    TYPE -> YYAction 118;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    DERIVE -> YYAction 119;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 120;
    PROTECTED -> YYAction 121;
    PUBLIC -> YYAction 122;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction248 t = YYAction (-31);
private yyaction249 t =   case yychar t of {
  '{' -> YYAction 354;
  _ -> (YYAction yyErr);
};
private yyaction250 t = YYAction (-321);
private yyaction251 t = YYAction (-200);
private yyaction252 t = YYAction (-201);
private yyaction253 t = YYAction (-199);
private yyaction254 t =   case yychar t of {
  '-' -> YYAction 252;
  ';' -> YYAction (-202);
  '}' -> YYAction (-202);
  _ ->   case yytoken t of {
    VARID -> YYAction 251;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction255 t = YYAction (-204);
private yyaction256 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction257 t =   case yychar t of {
  '(' -> YYAction 227;
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    _ -> (YYAction yyErr);
  };
};
private yyaction258 t =   case yychar t of {
  '.' -> YYAction 358;
  ';' -> YYAction (-5);
  '}' -> YYAction (-5);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-5);
    DCOLON -> YYAction (-5);
    _ -> (YYAction yyErr);
  };
};
private yyaction259 t = YYAction (-6);
private yyaction260 t =   case yytoken t of {
    VARID -> YYAction 258;
    CONID -> YYAction 259;
    QUALIFIER -> YYAction 260;
    STRCONST -> YYAction 261;
    _ -> (YYAction yyErr);
  };
private yyaction261 t = YYAction (-9);
private yyaction262 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction263 t =   case yytoken t of {
    DCOLON -> YYAction 363;
    _ -> (YYAction yyErr);
  };
private yyaction264 t =   case yytoken t of {
    DCOLON -> YYAction 364;
    _ -> (YYAction yyErr);
  };
private yyaction265 t =   case yytoken t of {
    DCOLON -> YYAction 365;
    _ -> (YYAction yyErr);
  };
private yyaction266 t =   case yychar t of {
  '{' -> YYAction 366;
  _ -> (YYAction yyErr);
};
private yyaction267 t = YYAction (-268);
private yyaction268 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction269 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction270 t = YYAction (-320);
private yyaction271 t =   case yychar t of {
  '|' -> YYAction 268;
  ';' -> YYAction (-351);
  '}' -> YYAction (-351);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-351);
    _ -> (YYAction yyErr);
  };
};
private yyaction272 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    QUALIFIER -> YYAction 372;
    _ -> (YYAction yyErr);
  };
};
private yyaction273 t =   case yychar t of {
  ')' -> YYAction 374;
  _ -> (YYAction yyErr);
};
private yyaction274 t = YYAction (-192);
private yyaction275 t =   case yychar t of {
  ',' -> YYAction 375;
  ')' -> YYAction (-179);
  _ -> (YYAction yyErr);
};
private yyaction276 t = YYAction (-191);
private yyaction277 t = YYAction (-19);
private yyaction278 t = YYAction (-363);
private yyaction279 t =   case yychar t of {
  ';' -> YYAction 377;
  _ ->   case yytoken t of {
    ELSE -> YYAction 376;
    _ -> (YYAction yyErr);
  };
};
private yyaction280 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction281 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-140);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction282 t =   case yytoken t of {
    IN -> YYAction 383;
    _ -> (YYAction yyErr);
  };
private yyaction283 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction284 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction285 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction286 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-343);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction287 t = YYAction (-383);
private yyaction288 t =   case yychar t of {
  ';' -> YYAction 388;
  ')' -> YYAction (-434);
  _ -> (YYAction yyErr);
};
private yyaction289 t =   case yychar t of {
  ')' -> YYAction 389;
  _ -> (YYAction yyErr);
};
private yyaction290 t =   case yychar t of {
  ',' -> YYAction 184;
  ')' -> YYAction (-431);
  ']' -> YYAction (-431);
  _ ->   case yytoken t of {
    DOTDOT -> YYAction (-431);
    _ -> (YYAction yyErr);
  };
};
private yyaction291 t =   case yychar t of {
  ')' -> YYAction 390;
  _ -> (YYAction yyErr);
};
private yyaction292 t = YYAction (-407);
private yyaction293 t = YYAction (-409);
private yyaction294 t = YYAction (-408);
private yyaction295 t = YYAction (-432);
private yyaction296 t =   case yychar t of {
  ',' -> YYAction 391;
  ']' -> YYAction (-339);
  _ -> (YYAction yyErr);
};
private yyaction297 t =   case yychar t of {
  ']' -> YYAction 392;
  _ -> (YYAction yyErr);
};
private yyaction298 t = YYAction (-415);
private yyaction299 t =   case yychar t of {
  ']' -> YYAction 393;
  _ -> (YYAction yyErr);
};
private yyaction300 t = YYAction (-360);
private yyaction301 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction302 t = YYAction (-401);
private yyaction303 t =   case yychar t of {
  '}' -> YYAction (-422);
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    _ -> (YYAction yyErr);
  };
};
private yyaction304 t =   case yytoken t of {
    CONID -> YYAction 157;
    _ -> (YYAction yyErr);
  };
private yyaction305 t = YYAction (-228);
private yyaction306 t =   case yychar t of {
  '.' -> YYAction 397;
  _ ->   case yytoken t of {
    SOMEOP -> YYAction 396;
    _ -> (YYAction yyErr);
  };
};
private yyaction307 t =   case yychar t of {
  '.' -> YYAction (-226);
  _ ->   case yytoken t of {
    VARID -> YYAction 305;
    SOMEOP -> YYAction (-226);
    _ -> (YYAction yyErr);
  };
};
private yyaction308 t =   case yychar t of {
  '(' -> YYAction (-252);
  ')' -> YYAction (-252);
  ',' -> YYAction (-252);
  '|' -> YYAction (-252);
  '[' -> YYAction (-252);
  _ ->   case yytoken t of {
    DCOLON -> YYAction 400;
    VARID -> YYAction (-252);
    CONID -> YYAction (-252);
    QUALIFIER -> YYAction (-252);
    ARROW -> YYAction (-252);
    _ -> (YYAction yyErr);
  };
};
private yyaction309 t =   case yychar t of {
  ')' -> YYAction 401;
  _ -> (YYAction yyErr);
};
private yyaction310 t = YYAction (-256);
private yyaction311 t =   case yychar t of {
  ')' -> YYAction 402;
  ',' -> YYAction 403;
  '|' -> YYAction 404;
  _ -> (YYAction yyErr);
};
private yyaction312 t = YYAction (-239);
private yyaction313 t =   case yychar t of {
  ';' -> YYAction (-238);
  '}' -> YYAction (-238);
  ')' -> YYAction (-238);
  ',' -> YYAction (-238);
  '|' -> YYAction (-238);
  ']' -> YYAction (-238);
  _ ->   case yytoken t of {
    ARROW -> YYAction 405;
    WHERE -> YYAction (-238);
    CLASS -> YYAction (-238);
    EARROW -> YYAction (-238);
    _ -> (YYAction yyErr);
  };
};
private yyaction314 t =   case yychar t of {
  ')' -> YYAction 406;
  _ -> (YYAction yyErr);
};
private yyaction315 t = YYAction (-255);
private yyaction316 t =   case yychar t of {
  ']' -> YYAction 407;
  _ -> (YYAction yyErr);
};
private yyaction317 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    _ -> (YYAction yyErr);
  };
};
private yyaction318 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    _ -> (YYAction yyErr);
  };
};
private yyaction319 t = YYAction (-295);
private yyaction320 t =   case yychar t of {
  '?' -> YYAction 412;
  '=' -> YYAction 413;
  '}' -> YYAction (-428);
  ',' -> YYAction (-428);
  _ ->   case yytoken t of {
    GETS -> YYAction 411;
    _ -> (YYAction yyErr);
  };
};
private yyaction321 t =   case yychar t of {
  '}' -> YYAction 414;
  _ -> (YYAction yyErr);
};
private yyaction322 t =   case yychar t of {
  ']' -> YYAction 415;
  _ -> (YYAction yyErr);
};
private yyaction323 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 416;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction324 t =   case yychar t of {
  '}' -> YYAction 418;
  _ -> (YYAction yyErr);
};
private yyaction325 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 419;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction326 t = YYAction (-390);
private yyaction327 t =   case yychar t of {
  '}' -> YYAction (-425);
  _ ->   case yytoken t of {
    VARID -> YYAction 421;
    _ -> (YYAction yyErr);
  };
};
private yyaction328 t = YYAction (-2);
private yyaction329 t =   case yychar t of {
  '(' -> YYAction (-171);
  _ ->   case yytoken t of {
    CONID -> YYAction 423;
    _ -> (YYAction yyErr);
  };
};
private yyaction330 t =   case yychar t of {
  '(' -> YYAction 332;
  ';' -> YYAction (-145);
  '}' -> YYAction (-145);
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    PUBLIC -> YYAction 331;
    _ -> (YYAction yyErr);
  };
};
private yyaction331 t =   case yychar t of {
  '(' -> YYAction 332;
  ';' -> YYAction (-145);
  '}' -> YYAction (-145);
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    PUBLIC -> YYAction 331;
    _ -> (YYAction yyErr);
  };
};
private yyaction332 t =   case yychar t of {
  ')' -> YYAction 429;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 426;
    QUALIFIER -> YYAction 427;
    PUBLIC -> YYAction 428;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction333 t = YYAction (-142);
private yyaction334 t =   case yychar t of {
  '(' -> YYAction 437;
  _ -> (YYAction yyErr);
};
private yyaction335 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction336 t =   case yytoken t of {
    CLASS -> YYAction 439;
    WHERE -> YYAction (-45);
    _ -> (YYAction yyErr);
  };
private yyaction337 t =   case yychar t of {
  ')' -> YYAction 441;
  _ -> (YYAction yyErr);
};
private yyaction338 t =   case yychar t of {
  ')' -> YYAction 442;
  _ -> (YYAction yyErr);
};
private yyaction339 t =   case yychar t of {
  ')' -> YYAction 443;
  _ -> (YYAction yyErr);
};
private yyaction340 t =   case yytoken t of {
    VARID -> YYAction 444;
    _ -> (YYAction yyErr);
  };
private yyaction341 t =   case yychar t of {
  '?' -> YYAction 453;
  '!' -> YYAction 454;
  _ ->   case yytoken t of {
    CONID -> YYAction 445;
    DOCUMENTATION -> YYAction 446;
    NATIVE -> YYAction 447;
    PRIVATE -> YYAction 448;
    PROTECTED -> YYAction 449;
    PUBLIC -> YYAction 450;
    PURE -> YYAction 451;
    MUTABLE -> YYAction 452;
    _ -> (YYAction yyErr);
  };
};
private yyaction342 t =   case yychar t of {
  '(' -> YYAction 340;
  '=' -> YYAction (-276);
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    _ -> (YYAction yyErr);
  };
};
private yyaction343 t =   case yychar t of {
  '=' -> YYAction 462;
  _ -> (YYAction yyErr);
};
private yyaction344 t =   case yytoken t of {
    EARROW -> YYAction 463;
    _ -> (YYAction yyErr);
  };
private yyaction345 t =   case yychar t of {
  ';' -> YYAction (-314);
  '}' -> YYAction (-314);
  '(' -> YYAction (-246);
  '[' -> YYAction (-246);
  _ ->   case yytoken t of {
    WHERE -> YYAction 266;
    VARID -> YYAction (-246);
    CONID -> YYAction (-246);
    QUALIFIER -> YYAction (-246);
    ARROW -> YYAction (-246);
    EARROW -> YYAction (-246);
    _ -> (YYAction yyErr);
  };
};
private yyaction346 t =   case yychar t of {
  ';' -> YYAction (-314);
  '}' -> YYAction (-314);
  _ ->   case yytoken t of {
    WHERE -> YYAction 266;
    _ -> (YYAction yyErr);
  };
};
private yyaction347 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction348 t =   case yychar t of {
  '=' -> YYAction 467;
  _ -> (YYAction yyErr);
};
private yyaction349 t = YYAction (-267);
private yyaction350 t =   case yychar t of {
  '-' -> YYAction (-406);
  '.' -> YYAction (-406);
  '(' -> YYAction (-406);
  ',' -> YYAction (-209);
  '|' -> YYAction (-406);
  '[' -> YYAction (-406);
  '?' -> YYAction (-406);
  '!' -> YYAction (-406);
  '=' -> YYAction (-406);
  '_' -> YYAction (-406);
  _ ->   case yytoken t of {
    VARID -> YYAction (-406);
    CONID -> YYAction (-406);
    QUALIFIER -> YYAction (-406);
    TRUE -> YYAction (-406);
    FALSE -> YYAction (-406);
    DO -> YYAction (-406);
    INTCONST -> YYAction (-406);
    STRCONST -> YYAction (-406);
    LONGCONST -> YYAction (-406);
    FLTCONST -> YYAction (-406);
    DBLCONST -> YYAction (-406);
    CHRCONST -> YYAction (-406);
    REGEXP -> YYAction (-406);
    BIGCONST -> YYAction (-406);
    DCOLON -> YYAction (-209);
    SOMEOP -> YYAction (-406);
    _ -> (YYAction yyErr);
  };
};
private yyaction351 t =   case yychar t of {
  '-' -> YYAction (-405);
  '.' -> YYAction (-405);
  '(' -> YYAction (-405);
  ',' -> YYAction (-207);
  '|' -> YYAction (-405);
  '[' -> YYAction (-405);
  '?' -> YYAction (-405);
  '!' -> YYAction (-405);
  '=' -> YYAction (-405);
  '_' -> YYAction (-405);
  _ ->   case yytoken t of {
    VARID -> YYAction (-405);
    CONID -> YYAction (-405);
    QUALIFIER -> YYAction (-405);
    TRUE -> YYAction (-405);
    FALSE -> YYAction (-405);
    DO -> YYAction (-405);
    INTCONST -> YYAction (-405);
    STRCONST -> YYAction (-405);
    LONGCONST -> YYAction (-405);
    FLTCONST -> YYAction (-405);
    DBLCONST -> YYAction (-405);
    CHRCONST -> YYAction (-405);
    REGEXP -> YYAction (-405);
    BIGCONST -> YYAction (-405);
    DCOLON -> YYAction (-207);
    SOMEOP -> YYAction (-405);
    _ -> (YYAction yyErr);
  };
};
private yyaction352 t =   case yychar t of {
  '-' -> YYAction (-404);
  '.' -> YYAction (-404);
  '(' -> YYAction (-404);
  ',' -> YYAction (-208);
  '|' -> YYAction (-404);
  '[' -> YYAction (-404);
  '?' -> YYAction (-404);
  '!' -> YYAction (-404);
  '=' -> YYAction (-404);
  '_' -> YYAction (-404);
  _ ->   case yytoken t of {
    VARID -> YYAction (-404);
    CONID -> YYAction (-404);
    QUALIFIER -> YYAction (-404);
    TRUE -> YYAction (-404);
    FALSE -> YYAction (-404);
    DO -> YYAction (-404);
    INTCONST -> YYAction (-404);
    STRCONST -> YYAction (-404);
    LONGCONST -> YYAction (-404);
    FLTCONST -> YYAction (-404);
    DBLCONST -> YYAction (-404);
    CHRCONST -> YYAction (-404);
    REGEXP -> YYAction (-404);
    BIGCONST -> YYAction (-404);
    DCOLON -> YYAction (-208);
    SOMEOP -> YYAction (-404);
    _ -> (YYAction yyErr);
  };
};
private yyaction353 t = YYAction (-29);
private yyaction354 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 468;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction355 t = YYAction (-203);
private yyaction356 t = YYAction (-205);
private yyaction357 t = YYAction (-211);
private yyaction358 t =   case yytoken t of {
    VARID -> YYAction 258;
    CONID -> YYAction 259;
    QUALIFIER -> YYAction 260;
    STRCONST -> YYAction 261;
    _ -> (YYAction yyErr);
  };
private yyaction359 t = YYAction (-8);
private yyaction360 t =   case yychar t of {
  ';' -> YYAction (-219);
  '}' -> YYAction (-219);
  '|' -> YYAction (-219);
  _ ->   case yytoken t of {
    THROWS -> YYAction 471;
    _ -> (YYAction yyErr);
  };
};
private yyaction361 t =   case yychar t of {
  '|' -> YYAction 472;
  ';' -> YYAction (-220);
  '}' -> YYAction (-220);
  _ -> (YYAction yyErr);
};
private yyaction362 t = YYAction (-222);
private yyaction363 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction364 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction365 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction366 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 479;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    NATIVE -> YYAction 239;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 476;
    PROTECTED -> YYAction 477;
    PUBLIC -> YYAction 478;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction367 t =   case yychar t of {
  ',' -> YYAction (-345);
  '=' -> YYAction (-345);
  _ ->   case yytoken t of {
    GETS -> YYAction 284;
    ARROW -> YYAction (-345);
    _ -> (YYAction yyErr);
  };
};
private yyaction368 t =   case yychar t of {
  ',' -> YYAction 485;
  '=' -> YYAction (-347);
  _ ->   case yytoken t of {
    ARROW -> YYAction (-347);
    _ -> (YYAction yyErr);
  };
};
private yyaction369 t =   case yychar t of {
  '=' -> YYAction 487;
  _ ->   case yytoken t of {
    ARROW -> YYAction 486;
    _ -> (YYAction yyErr);
  };
};
private yyaction370 t = YYAction (-319);
private yyaction371 t = YYAction (-352);
private yyaction372 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    _ -> (YYAction yyErr);
  };
};
private yyaction373 t = YYAction (-190);
private yyaction374 t = YYAction (-21);
private yyaction375 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    QUALIFIER -> YYAction 272;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction376 t = YYAction (-366);
private yyaction377 t =   case yytoken t of {
    ELSE -> YYAction 491;
    _ -> (YYAction yyErr);
  };
private yyaction378 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction379 t =   case yychar t of {
  '|' -> YYAction 268;
  '=' -> YYAction 487;
  _ ->   case yytoken t of {
    ARROW -> YYAction 486;
    _ -> (YYAction yyErr);
  };
};
private yyaction380 t =   case yychar t of {
  ';' -> YYAction 495;
  '}' -> YYAction (-356);
  _ ->   case yytoken t of {
    WHERE -> YYAction 249;
    _ -> (YYAction yyErr);
  };
};
private yyaction381 t =   case yychar t of {
  '}' -> YYAction 497;
  _ -> (YYAction yyErr);
};
private yyaction382 t = YYAction (-141);
private yyaction383 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction384 t =   case yychar t of {
  '}' -> YYAction 499;
  _ -> (YYAction yyErr);
};
private yyaction385 t = YYAction (-346);
private yyaction386 t = YYAction (-337);
private yyaction387 t = YYAction (-344);
private yyaction388 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ')' -> YYAction (-436);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction389 t = YYAction (-411);
private yyaction390 t = YYAction (-410);
private yyaction391 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ']' -> YYAction (-341);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 167;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction392 t = YYAction (-417);
private yyaction393 t = YYAction (-416);
private yyaction394 t = YYAction (-429);
private yyaction395 t = YYAction (-421);
private yyaction396 t = YYAction (-233);
private yyaction397 t = YYAction (-232);
private yyaction398 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    _ -> (YYAction yyErr);
  };
};
private yyaction399 t = YYAction (-227);
private yyaction400 t =   case yychar t of {
  '(' -> YYAction 505;
  _ ->   case yytoken t of {
    VARID -> YYAction 503;
    SOMEOP -> YYAction 504;
    _ -> (YYAction yyErr);
  };
};
private yyaction401 t = YYAction (-258);
private yyaction402 t = YYAction (-248);
private yyaction403 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction404 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction405 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction406 t = YYAction (-257);
private yyaction407 t = YYAction (-251);
private yyaction408 t =   case yychar t of {
  '-' -> YYAction (-236);
  ';' -> YYAction (-236);
  '}' -> YYAction (-236);
  ')' -> YYAction (-236);
  ',' -> YYAction (-236);
  '|' -> YYAction (-236);
  ']' -> YYAction (-236);
  '=' -> YYAction (-236);
  '\\' -> YYAction (-236);
  _ ->   case yytoken t of {
    ARROW -> YYAction 317;
    DOCUMENTATION -> YYAction (-236);
    WHERE -> YYAction (-236);
    CLASS -> YYAction (-236);
    THEN -> YYAction (-236);
    ELSE -> YYAction (-236);
    OF -> YYAction (-236);
    THROWS -> YYAction (-236);
    DCOLON -> YYAction (-236);
    GETS -> YYAction (-236);
    EARROW -> YYAction (-236);
    DOTDOT -> YYAction (-236);
    SOMEOP -> YYAction (-236);
    _ -> (YYAction yyErr);
  };
};
private yyaction409 t = YYAction (-237);
private yyaction410 t = YYAction (-234);
private yyaction411 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 513;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction412 t =   case yychar t of {
  '}' -> YYAction 514;
  _ -> (YYAction yyErr);
};
private yyaction413 t =   case yychar t of {
  '-' -> YYAction 41;
  '}' -> YYAction 515;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction414 t = YYAction (-394);
private yyaction415 t = YYAction (-395);
private yyaction416 t = YYAction (-389);
private yyaction417 t = YYAction (-426);
private yyaction418 t = YYAction (-387);
private yyaction419 t = YYAction (-388);
private yyaction420 t = YYAction (-427);
private yyaction421 t =   case yychar t of {
  '=' -> YYAction 517;
  '}' -> YYAction (-428);
  ',' -> YYAction (-428);
  _ ->   case yytoken t of {
    GETS -> YYAction 516;
    _ -> (YYAction yyErr);
  };
};
private yyaction422 t = YYAction (-424);
private yyaction423 t =   case yychar t of {
  '(' -> YYAction 332;
  ';' -> YYAction (-145);
  '}' -> YYAction (-145);
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    PUBLIC -> YYAction 331;
    _ -> (YYAction yyErr);
  };
};
private yyaction424 t = YYAction (-144);
private yyaction425 t = YYAction (-149);
private yyaction426 t =   case yychar t of {
  '(' -> YYAction 519;
  ')' -> YYAction (-186);
  ',' -> YYAction (-186);
  _ ->   case yytoken t of {
    VARID -> YYAction (-186);
    CONID -> YYAction (-186);
    SOMEOP -> YYAction (-186);
    _ -> (YYAction yyErr);
  };
};
private yyaction427 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 75;
    QUALIFIER -> YYAction 520;
    _ -> (YYAction yyErr);
  };
};
private yyaction428 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 426;
    QUALIFIER -> YYAction 427;
    PUBLIC -> YYAction 428;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction429 t = YYAction (-147);
private yyaction430 t =   case yychar t of {
  ')' -> YYAction 522;
  _ -> (YYAction yyErr);
};
private yyaction431 t =   case yychar t of {
  ',' -> YYAction 523;
  ')' -> YYAction (-150);
  _ -> (YYAction yyErr);
};
private yyaction432 t =   case yychar t of {
  ')' -> YYAction (-159);
  ',' -> YYAction (-159);
  _ ->   case yytoken t of {
    VARID -> YYAction 524;
    CONID -> YYAction 525;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction433 t = YYAction (-153);
private yyaction434 t = YYAction (-156);
private yyaction435 t = YYAction (-157);
private yyaction436 t = YYAction (-158);
private yyaction437 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 426;
    QUALIFIER -> YYAction 427;
    PUBLIC -> YYAction 428;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction438 t = YYAction (-44);
private yyaction439 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction440 t =   case yytoken t of {
    WHERE -> YYAction 530;
    _ -> (YYAction yyErr);
  };
private yyaction441 t = YYAction (-209);
private yyaction442 t = YYAction (-207);
private yyaction443 t = YYAction (-208);
private yyaction444 t =   case yytoken t of {
    DCOLON -> YYAction 400;
    _ -> (YYAction yyErr);
  };
private yyaction445 t =   case yychar t of {
  '{' -> YYAction 532;
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  ';' -> YYAction (-290);
  '}' -> YYAction (-290);
  '|' -> YYAction (-290);
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    DOCUMENTATION -> YYAction (-290);
    WHERE -> YYAction (-290);
    _ -> (YYAction yyErr);
  };
};
private yyaction446 t =   case yychar t of {
  '?' -> YYAction 453;
  '!' -> YYAction 454;
  _ ->   case yytoken t of {
    CONID -> YYAction 445;
    PRIVATE -> YYAction 448;
    PROTECTED -> YYAction 449;
    PUBLIC -> YYAction 450;
    _ -> (YYAction yyErr);
  };
};
private yyaction447 t = YYAction (-271);
private yyaction448 t =   case yychar t of {
  '?' -> YYAction 453;
  '!' -> YYAction 454;
  _ ->   case yytoken t of {
    CONID -> YYAction 445;
    _ -> (YYAction yyErr);
  };
};
private yyaction449 t =   case yychar t of {
  '?' -> YYAction 453;
  '!' -> YYAction 454;
  _ ->   case yytoken t of {
    CONID -> YYAction 445;
    _ -> (YYAction yyErr);
  };
};
private yyaction450 t =   case yychar t of {
  '?' -> YYAction 453;
  '!' -> YYAction 454;
  _ ->   case yytoken t of {
    CONID -> YYAction 445;
    _ -> (YYAction yyErr);
  };
};
private yyaction451 t =   case yytoken t of {
    NATIVE -> YYAction 539;
    _ -> (YYAction yyErr);
  };
private yyaction452 t =   case yytoken t of {
    NATIVE -> YYAction 540;
    _ -> (YYAction yyErr);
  };
private yyaction453 t =   case yytoken t of {
    CONID -> YYAction 445;
    _ -> (YYAction yyErr);
  };
private yyaction454 t =   case yytoken t of {
    CONID -> YYAction 445;
    _ -> (YYAction yyErr);
  };
private yyaction455 t =   case yytoken t of {
    VARID -> YYAction 258;
    CONID -> YYAction 259;
    QUALIFIER -> YYAction 260;
    STRCONST -> YYAction 261;
    _ -> (YYAction yyErr);
  };
private yyaction456 t = YYAction (-275);
private yyaction457 t =   case yychar t of {
  '|' -> YYAction 544;
  ';' -> YYAction (-278);
  '}' -> YYAction (-278);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-278);
    _ -> (YYAction yyErr);
  };
};
private yyaction458 t =   case yychar t of {
  ';' -> YYAction (-280);
  '}' -> YYAction (-280);
  '|' -> YYAction (-280);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 545;
    WHERE -> YYAction (-280);
    _ -> (YYAction yyErr);
  };
};
private yyaction459 t = YYAction (-283);
private yyaction460 t = YYAction (-289);
private yyaction461 t = YYAction (-277);
private yyaction462 t =   case yychar t of {
  '?' -> YYAction 453;
  '!' -> YYAction 454;
  _ ->   case yytoken t of {
    CONID -> YYAction 445;
    DOCUMENTATION -> YYAction 446;
    NATIVE -> YYAction 447;
    PRIVATE -> YYAction 448;
    PROTECTED -> YYAction 449;
    PUBLIC -> YYAction 450;
    PURE -> YYAction 451;
    MUTABLE -> YYAction 452;
    _ -> (YYAction yyErr);
  };
};
private yyaction463 t =   case yytoken t of {
    VARID -> YYAction 190;
    _ -> (YYAction yyErr);
  };
private yyaction464 t = YYAction (-264);
private yyaction465 t = YYAction (-266);
private yyaction466 t = YYAction (-312);
private yyaction467 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction468 t = YYAction (-317);
private yyaction469 t =   case yychar t of {
  '}' -> YYAction 550;
  _ -> (YYAction yyErr);
};
private yyaction470 t = YYAction (-7);
private yyaction471 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction472 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction473 t = YYAction (-223);
private yyaction474 t = YYAction (-224);
private yyaction475 t = YYAction (-225);
private yyaction476 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 239;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction477 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 239;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction478 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    NATIVE -> YYAction 239;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction479 t = YYAction (-315);
private yyaction480 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  ';' -> YYAction (-134);
  '}' -> YYAction (-134);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    NATIVE -> YYAction 239;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 476;
    PROTECTED -> YYAction 477;
    PUBLIC -> YYAction 478;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction481 t = YYAction (-130);
private yyaction482 t =   case yychar t of {
  '}' -> YYAction 557;
  _ -> (YYAction yyErr);
};
private yyaction483 t =   case yychar t of {
  ';' -> YYAction 8;
  '}' -> YYAction (-124);
  _ -> (YYAction yyErr);
};
private yyaction484 t = YYAction (-136);
private yyaction485 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '=' -> YYAction (-349);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    ARROW -> YYAction (-349);
    _ -> (YYAction yyErr);
  };
};
private yyaction486 t = YYAction (-334);
private yyaction487 t = YYAction (-335);
private yyaction488 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction489 t = YYAction (-189);
private yyaction490 t = YYAction (-180);
private yyaction491 t = YYAction (-365);
private yyaction492 t = YYAction (-371);
private yyaction493 t = YYAction (-354);
private yyaction494 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction495 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-358);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction496 t = YYAction (-355);
private yyaction497 t = YYAction (-372);
private yyaction498 t = YYAction (-373);
private yyaction499 t =   case yychar t of {
  ';' -> YYAction (-338);
  '}' -> YYAction (-338);
  ',' -> YYAction (-338);
  ']' -> YYAction (-338);
  _ ->   case yytoken t of {
    IN -> YYAction 383;
    _ -> (YYAction yyErr);
  };
};
private yyaction500 t = YYAction (-435);
private yyaction501 t = YYAction (-340);
private yyaction502 t = YYAction (-231);
private yyaction503 t = YYAction (-262);
private yyaction504 t = YYAction (-261);
private yyaction505 t =   case yychar t of {
  '(' -> YYAction 505;
  _ ->   case yytoken t of {
    VARID -> YYAction 503;
    SOMEOP -> YYAction 504;
    _ -> (YYAction yyErr);
  };
};
private yyaction506 t =   case yychar t of {
  ')' -> YYAction 564;
  _ -> (YYAction yyErr);
};
private yyaction507 t =   case yychar t of {
  ')' -> YYAction (-260);
  _ ->   case yytoken t of {
    ARROW -> YYAction 565;
    _ -> (YYAction yyErr);
  };
};
private yyaction508 t =   case yychar t of {
  ',' -> YYAction 566;
  ';' -> YYAction (-241);
  '}' -> YYAction (-241);
  ')' -> YYAction (-241);
  '|' -> YYAction (-241);
  _ ->   case yytoken t of {
    WHERE -> YYAction (-241);
    _ -> (YYAction yyErr);
  };
};
private yyaction509 t =   case yychar t of {
  ')' -> YYAction 567;
  _ -> (YYAction yyErr);
};
private yyaction510 t =   case yychar t of {
  '|' -> YYAction 568;
  ')' -> YYAction (-243);
  _ -> (YYAction yyErr);
};
private yyaction511 t =   case yychar t of {
  ')' -> YYAction 569;
  _ -> (YYAction yyErr);
};
private yyaction512 t = YYAction (-240);
private yyaction513 t = YYAction (-393);
private yyaction514 t = YYAction (-391);
private yyaction515 t = YYAction (-392);
private yyaction516 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction517 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 42;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction518 t = YYAction (-143);
private yyaction519 t =   case yychar t of {
  ')' -> YYAction 571;
  _ ->   case yytoken t of {
    VARID -> YYAction 524;
    CONID -> YYAction 525;
    PUBLIC -> YYAction 570;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction520 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  _ ->   case yytoken t of {
    VARID -> YYAction 74;
    CONID -> YYAction 157;
    _ -> (YYAction yyErr);
  };
};
private yyaction521 t = YYAction (-161);
private yyaction522 t = YYAction (-148);
private yyaction523 t =   case yychar t of {
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  ')' -> YYAction (-151);
  _ ->   case yytoken t of {
    VARID -> YYAction 24;
    CONID -> YYAction 426;
    QUALIFIER -> YYAction 427;
    PUBLIC -> YYAction 428;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction524 t = YYAction (-168);
private yyaction525 t = YYAction (-169);
private yyaction526 t = YYAction (-170);
private yyaction527 t = YYAction (-160);
private yyaction528 t =   case yychar t of {
  ')' -> YYAction 576;
  _ -> (YYAction yyErr);
};
private yyaction529 t = YYAction (-46);
private yyaction530 t =   case yychar t of {
  '{' -> YYAction 577;
  _ -> (YYAction yyErr);
};
private yyaction531 t = YYAction (-42);
private yyaction532 t =   case yychar t of {
  '?' -> YYAction 580;
  '!' -> YYAction 581;
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 578;
    PUBLIC -> YYAction 579;
    _ -> (YYAction yyErr);
  };
};
private yyaction533 t = YYAction (-293);
private yyaction534 t = YYAction (-292);
private yyaction535 t = YYAction (-282);
private yyaction536 t = YYAction (-285);
private yyaction537 t = YYAction (-286);
private yyaction538 t = YYAction (-284);
private yyaction539 t = YYAction (-269);
private yyaction540 t = YYAction (-270);
private yyaction541 t = YYAction (-288);
private yyaction542 t = YYAction (-287);
private yyaction543 t = YYAction (-272);
private yyaction544 t =   case yychar t of {
  '?' -> YYAction 453;
  '!' -> YYAction 454;
  _ ->   case yytoken t of {
    CONID -> YYAction 445;
    DOCUMENTATION -> YYAction 446;
    PRIVATE -> YYAction 448;
    PROTECTED -> YYAction 449;
    PUBLIC -> YYAction 450;
    _ -> (YYAction yyErr);
  };
};
private yyaction545 t = YYAction (-281);
private yyaction546 t =   case yytoken t of {
    VARID -> YYAction 258;
    CONID -> YYAction 259;
    QUALIFIER -> YYAction 260;
    STRCONST -> YYAction 261;
    _ -> (YYAction yyErr);
  };
private yyaction547 t = YYAction (-274);
private yyaction548 t =   case yychar t of {
  ';' -> YYAction (-314);
  '}' -> YYAction (-314);
  _ ->   case yytoken t of {
    WHERE -> YYAction 266;
    _ -> (YYAction yyErr);
  };
};
private yyaction549 t = YYAction (-313);
private yyaction550 t = YYAction (-318);
private yyaction551 t = YYAction (-218);
private yyaction552 t = YYAction (-221);
private yyaction553 t = YYAction (-131);
private yyaction554 t = YYAction (-132);
private yyaction555 t = YYAction (-133);
private yyaction556 t = YYAction (-135);
private yyaction557 t = YYAction (-316);
private yyaction558 t =   case yychar t of {
  '-' -> YYAction 41;
  '(' -> YYAction 124;
  '[' -> YYAction 43;
  '?' -> YYAction 44;
  '!' -> YYAction 45;
  '\\' -> YYAction 46;
  '_' -> YYAction 47;
  '}' -> YYAction (-125);
  _ ->   case yytoken t of {
    VARID -> YYAction 107;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 26;
    DOCUMENTATION -> YYAction 108;
    NATIVE -> YYAction 239;
    TRUE -> YYAction 27;
    FALSE -> YYAction 28;
    IF -> YYAction 29;
    CASE -> YYAction 30;
    LET -> YYAction 31;
    DO -> YYAction 32;
    PRIVATE -> YYAction 476;
    PROTECTED -> YYAction 477;
    PUBLIC -> YYAction 478;
    PURE -> YYAction 123;
    INTCONST -> YYAction 33;
    STRCONST -> YYAction 34;
    LONGCONST -> YYAction 35;
    FLTCONST -> YYAction 36;
    DBLCONST -> YYAction 37;
    CHRCONST -> YYAction 38;
    REGEXP -> YYAction 39;
    BIGCONST -> YYAction 40;
    _ -> (YYAction yyErr);
  };
};
private yyaction559 t = YYAction (-348);
private yyaction560 t = YYAction (-350);
private yyaction561 t = YYAction (-353);
private yyaction562 t = YYAction (-357);
private yyaction563 t =   case yychar t of {
  ')' -> YYAction 594;
  _ -> (YYAction yyErr);
};
private yyaction564 t = YYAction (-253);
private yyaction565 t =   case yychar t of {
  '(' -> YYAction 505;
  _ ->   case yytoken t of {
    VARID -> YYAction 503;
    SOMEOP -> YYAction 504;
    _ -> (YYAction yyErr);
  };
};
private yyaction566 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction567 t = YYAction (-249);
private yyaction568 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction569 t = YYAction (-250);
private yyaction570 t =   case yytoken t of {
    VARID -> YYAction 524;
    CONID -> YYAction 525;
    PUBLIC -> YYAction 570;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
private yyaction571 t = YYAction (-155);
private yyaction572 t =   case yychar t of {
  ')' -> YYAction 599;
  _ -> (YYAction yyErr);
};
private yyaction573 t =   case yychar t of {
  ')' -> YYAction (-162);
  ',' -> YYAction (-162);
  _ ->   case yytoken t of {
    VARID -> YYAction 524;
    CONID -> YYAction 525;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction574 t =   case yychar t of {
  ',' -> YYAction 601;
  ')' -> YYAction (-165);
  _ -> (YYAction yyErr);
};
private yyaction575 t = YYAction (-152);
private yyaction576 t = YYAction (-146);
private yyaction577 t =   case yychar t of {
  '-' -> YYAction 651;
  ';' -> YYAction 652;
  '{' -> YYAction 653;
  '}' -> YYAction 654;
  '.' -> YYAction 655;
  '(' -> YYAction 656;
  ')' -> YYAction 657;
  ',' -> YYAction 658;
  '|' -> YYAction 659;
  '[' -> YYAction 660;
  ']' -> YYAction 661;
  '?' -> YYAction 662;
  '!' -> YYAction 663;
  '=' -> YYAction 664;
  '\\' -> YYAction 665;
  _ ->   case yytoken t of {
    VARID -> YYAction 602;
    CONID -> YYAction 603;
    QVARID -> YYAction 604;
    QCONID -> YYAction 605;
    QUALIFIER -> YYAction 606;
    DOCUMENTATION -> YYAction 607;
    PACKAGE -> YYAction 608;
    IMPORT -> YYAction 609;
    INFIX -> YYAction 610;
    INFIXR -> YYAction 611;
    INFIXL -> YYAction 612;
    NATIVE -> YYAction 613;
    DATA -> YYAction 614;
    WHERE -> YYAction 615;
    CLASS -> YYAction 616;
    INSTANCE -> YYAction 617;
    ABSTRACT -> YYAction 618;
    TYPE -> YYAction 619;
    TRUE -> YYAction 620;
    FALSE -> YYAction 621;
    IF -> YYAction 622;
    THEN -> YYAction 623;
    ELSE -> YYAction 624;
    CASE -> YYAction 625;
    OF -> YYAction 626;
    DERIVE -> YYAction 627;
    LET -> YYAction 628;
    IN -> YYAction 629;
    DO -> YYAction 630;
    FORALL -> YYAction 631;
    PRIVATE -> YYAction 632;
    PROTECTED -> YYAction 633;
    PUBLIC -> YYAction 634;
    PURE -> YYAction 635;
    THROWS -> YYAction 636;
    MUTABLE -> YYAction 637;
    INTCONST -> YYAction 638;
    STRCONST -> YYAction 639;
    LONGCONST -> YYAction 640;
    FLTCONST -> YYAction 641;
    DBLCONST -> YYAction 642;
    CHRCONST -> YYAction 643;
    ARROW -> YYAction 644;
    DCOLON -> YYAction 645;
    GETS -> YYAction 646;
    EARROW -> YYAction 647;
    DOTDOT -> YYAction 648;
    SOMEOP -> YYAction 649;
    INTERPRET -> YYAction 650;
    _ -> (YYAction yyErr);
  };
};
private yyaction578 t =   case yychar t of {
  '?' -> YYAction 580;
  '!' -> YYAction 581;
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    _ -> (YYAction yyErr);
  };
};
private yyaction579 t =   case yychar t of {
  '?' -> YYAction 580;
  '!' -> YYAction 581;
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    _ -> (YYAction yyErr);
  };
};
private yyaction580 t =   case yytoken t of {
    VARID -> YYAction 190;
    _ -> (YYAction yyErr);
  };
private yyaction581 t =   case yytoken t of {
    VARID -> YYAction 190;
    _ -> (YYAction yyErr);
  };
private yyaction582 t =   case yychar t of {
  '?' -> YYAction 580;
  '!' -> YYAction 581;
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    PRIVATE -> YYAction 578;
    PUBLIC -> YYAction 579;
    _ -> (YYAction yyErr);
  };
};
private yyaction583 t = YYAction (-311);
private yyaction584 t =   case yychar t of {
  '}' -> YYAction 673;
  _ -> (YYAction yyErr);
};
private yyaction585 t =   case yychar t of {
  ',' -> YYAction 675;
  '}' -> YYAction (-296);
  _ ->   case yytoken t of {
    DOCUMENTATION -> YYAction 674;
    _ -> (YYAction yyErr);
  };
};
private yyaction586 t =   case yytoken t of {
    DCOLON -> YYAction 676;
    _ -> (YYAction yyErr);
  };
private yyaction587 t =   case yychar t of {
  ',' -> YYAction 677;
  _ ->   case yytoken t of {
    DCOLON -> YYAction (-303);
    _ -> (YYAction yyErr);
  };
};
private yyaction588 t = YYAction (-305);
private yyaction589 t = YYAction (-308);
private yyaction590 t = YYAction (-279);
private yyaction591 t = YYAction (-273);
private yyaction592 t = YYAction (-265);
private yyaction593 t = YYAction (-126);
private yyaction594 t = YYAction (-263);
private yyaction595 t = YYAction (-259);
private yyaction596 t = YYAction (-242);
private yyaction597 t = YYAction (-244);
private yyaction598 t = YYAction (-164);
private yyaction599 t = YYAction (-154);
private yyaction600 t = YYAction (-163);
private yyaction601 t =   case yychar t of {
  ')' -> YYAction (-166);
  _ ->   case yytoken t of {
    VARID -> YYAction 524;
    CONID -> YYAction 525;
    PUBLIC -> YYAction 570;
    SOMEOP -> YYAction 84;
    _ -> (YYAction yyErr);
  };
};
private yyaction602 t = YYAction (-49);
private yyaction603 t = YYAction (-50);
private yyaction604 t = YYAction (-51);
private yyaction605 t = YYAction (-52);
private yyaction606 t = YYAction (-53);
private yyaction607 t = YYAction (-54);
private yyaction608 t = YYAction (-55);
private yyaction609 t = YYAction (-56);
private yyaction610 t = YYAction (-57);
private yyaction611 t = YYAction (-58);
private yyaction612 t = YYAction (-59);
private yyaction613 t = YYAction (-60);
private yyaction614 t = YYAction (-61);
private yyaction615 t = YYAction (-62);
private yyaction616 t = YYAction (-63);
private yyaction617 t = YYAction (-64);
private yyaction618 t = YYAction (-65);
private yyaction619 t = YYAction (-66);
private yyaction620 t = YYAction (-67);
private yyaction621 t = YYAction (-68);
private yyaction622 t = YYAction (-69);
private yyaction623 t = YYAction (-70);
private yyaction624 t = YYAction (-71);
private yyaction625 t = YYAction (-72);
private yyaction626 t = YYAction (-73);
private yyaction627 t = YYAction (-74);
private yyaction628 t = YYAction (-75);
private yyaction629 t = YYAction (-76);
private yyaction630 t = YYAction (-77);
private yyaction631 t = YYAction (-78);
private yyaction632 t = YYAction (-79);
private yyaction633 t = YYAction (-80);
private yyaction634 t = YYAction (-81);
private yyaction635 t = YYAction (-82);
private yyaction636 t = YYAction (-83);
private yyaction637 t = YYAction (-84);
private yyaction638 t = YYAction (-85);
private yyaction639 t = YYAction (-86);
private yyaction640 t = YYAction (-87);
private yyaction641 t = YYAction (-88);
private yyaction642 t = YYAction (-89);
private yyaction643 t = YYAction (-90);
private yyaction644 t = YYAction (-91);
private yyaction645 t = YYAction (-92);
private yyaction646 t = YYAction (-93);
private yyaction647 t = YYAction (-94);
private yyaction648 t = YYAction (-95);
private yyaction649 t = YYAction (-96);
private yyaction650 t = YYAction (-97);
private yyaction651 t = YYAction (-106);
private yyaction652 t = YYAction (-107);
private yyaction653 t =   case yychar t of {
  '-' -> YYAction 651;
  ';' -> YYAction 652;
  '{' -> YYAction 653;
  '}' -> YYAction 679;
  '.' -> YYAction 655;
  '(' -> YYAction 656;
  ')' -> YYAction 657;
  ',' -> YYAction 658;
  '|' -> YYAction 659;
  '[' -> YYAction 660;
  ']' -> YYAction 661;
  '?' -> YYAction 662;
  '!' -> YYAction 663;
  '=' -> YYAction 664;
  '\\' -> YYAction 665;
  _ ->   case yytoken t of {
    VARID -> YYAction 602;
    CONID -> YYAction 603;
    QVARID -> YYAction 604;
    QCONID -> YYAction 605;
    QUALIFIER -> YYAction 606;
    DOCUMENTATION -> YYAction 607;
    PACKAGE -> YYAction 608;
    IMPORT -> YYAction 609;
    INFIX -> YYAction 610;
    INFIXR -> YYAction 611;
    INFIXL -> YYAction 612;
    NATIVE -> YYAction 613;
    DATA -> YYAction 614;
    WHERE -> YYAction 615;
    CLASS -> YYAction 616;
    INSTANCE -> YYAction 617;
    ABSTRACT -> YYAction 618;
    TYPE -> YYAction 619;
    TRUE -> YYAction 620;
    FALSE -> YYAction 621;
    IF -> YYAction 622;
    THEN -> YYAction 623;
    ELSE -> YYAction 624;
    CASE -> YYAction 625;
    OF -> YYAction 626;
    DERIVE -> YYAction 627;
    LET -> YYAction 628;
    IN -> YYAction 629;
    DO -> YYAction 630;
    FORALL -> YYAction 631;
    PRIVATE -> YYAction 632;
    PROTECTED -> YYAction 633;
    PUBLIC -> YYAction 634;
    PURE -> YYAction 635;
    THROWS -> YYAction 636;
    MUTABLE -> YYAction 637;
    INTCONST -> YYAction 638;
    STRCONST -> YYAction 639;
    LONGCONST -> YYAction 640;
    FLTCONST -> YYAction 641;
    DBLCONST -> YYAction 642;
    CHRCONST -> YYAction 643;
    ARROW -> YYAction 644;
    DCOLON -> YYAction 645;
    GETS -> YYAction 646;
    EARROW -> YYAction 647;
    DOTDOT -> YYAction 648;
    SOMEOP -> YYAction 649;
    INTERPRET -> YYAction 650;
    _ -> (YYAction yyErr);
  };
};
private yyaction654 t = YYAction (-48);
private yyaction655 t = YYAction (-104);
private yyaction656 t = YYAction (-102);
private yyaction657 t = YYAction (-103);
private yyaction658 t = YYAction (-98);
private yyaction659 t = YYAction (-99);
private yyaction660 t = YYAction (-100);
private yyaction661 t = YYAction (-101);
private yyaction662 t = YYAction (-105);
private yyaction663 t = YYAction (-108);
private yyaction664 t = YYAction (-109);
private yyaction665 t = YYAction (-110);
private yyaction666 t =   case yychar t of {
  '}' -> YYAction 681;
  _ -> (YYAction yyErr);
};
private yyaction667 t =   case yychar t of {
  '-' -> YYAction 651;
  ';' -> YYAction 652;
  '{' -> YYAction 653;
  '.' -> YYAction 655;
  '(' -> YYAction 656;
  ')' -> YYAction 657;
  ',' -> YYAction 658;
  '|' -> YYAction 659;
  '[' -> YYAction 660;
  ']' -> YYAction 661;
  '?' -> YYAction 662;
  '!' -> YYAction 663;
  '=' -> YYAction 664;
  '\\' -> YYAction 665;
  '}' -> YYAction (-111);
  _ ->   case yytoken t of {
    VARID -> YYAction 602;
    CONID -> YYAction 603;
    QVARID -> YYAction 604;
    QCONID -> YYAction 605;
    QUALIFIER -> YYAction 606;
    DOCUMENTATION -> YYAction 607;
    PACKAGE -> YYAction 608;
    IMPORT -> YYAction 609;
    INFIX -> YYAction 610;
    INFIXR -> YYAction 611;
    INFIXL -> YYAction 612;
    NATIVE -> YYAction 613;
    DATA -> YYAction 614;
    WHERE -> YYAction 615;
    CLASS -> YYAction 616;
    INSTANCE -> YYAction 617;
    ABSTRACT -> YYAction 618;
    TYPE -> YYAction 619;
    TRUE -> YYAction 620;
    FALSE -> YYAction 621;
    IF -> YYAction 622;
    THEN -> YYAction 623;
    ELSE -> YYAction 624;
    CASE -> YYAction 625;
    OF -> YYAction 626;
    DERIVE -> YYAction 627;
    LET -> YYAction 628;
    IN -> YYAction 629;
    DO -> YYAction 630;
    FORALL -> YYAction 631;
    PRIVATE -> YYAction 632;
    PROTECTED -> YYAction 633;
    PUBLIC -> YYAction 634;
    PURE -> YYAction 635;
    THROWS -> YYAction 636;
    MUTABLE -> YYAction 637;
    INTCONST -> YYAction 638;
    STRCONST -> YYAction 639;
    LONGCONST -> YYAction 640;
    FLTCONST -> YYAction 641;
    DBLCONST -> YYAction 642;
    CHRCONST -> YYAction 643;
    ARROW -> YYAction 644;
    DCOLON -> YYAction 645;
    GETS -> YYAction 646;
    EARROW -> YYAction 647;
    DOTDOT -> YYAction 648;
    SOMEOP -> YYAction 649;
    INTERPRET -> YYAction 650;
    _ -> (YYAction yyErr);
  };
};
private yyaction668 t = YYAction (-307);
private yyaction669 t = YYAction (-306);
private yyaction670 t = YYAction (-310);
private yyaction671 t = YYAction (-309);
private yyaction672 t =   case yytoken t of {
    DCOLON -> YYAction 683;
    _ -> (YYAction yyErr);
  };
private yyaction673 t = YYAction (-291);
private yyaction674 t =   case yychar t of {
  '?' -> YYAction 580;
  '!' -> YYAction 581;
  '}' -> YYAction (-298);
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 578;
    PUBLIC -> YYAction 579;
    _ -> (YYAction yyErr);
  };
};
private yyaction675 t =   case yychar t of {
  '?' -> YYAction 580;
  '!' -> YYAction 581;
  '}' -> YYAction (-297);
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    DOCUMENTATION -> YYAction 1;
    PRIVATE -> YYAction 578;
    PUBLIC -> YYAction 579;
    _ -> (YYAction yyErr);
  };
};
private yyaction676 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction677 t =   case yychar t of {
  '?' -> YYAction 580;
  '!' -> YYAction 581;
  _ ->   case yytoken t of {
    VARID -> YYAction 190;
    PRIVATE -> YYAction 578;
    PUBLIC -> YYAction 579;
    _ -> (YYAction yyErr);
  };
};
private yyaction678 t = YYAction (-167);
private yyaction679 t =   case yychar t of {
  '-' -> YYAction 651;
  ';' -> YYAction 652;
  '{' -> YYAction 653;
  '.' -> YYAction 655;
  '(' -> YYAction 656;
  ')' -> YYAction 657;
  ',' -> YYAction 658;
  '|' -> YYAction 659;
  '[' -> YYAction 660;
  ']' -> YYAction 661;
  '?' -> YYAction 662;
  '!' -> YYAction 663;
  '=' -> YYAction 664;
  '\\' -> YYAction 665;
  '}' -> YYAction (-115);
  _ ->   case yytoken t of {
    VARID -> YYAction 602;
    CONID -> YYAction 603;
    QVARID -> YYAction 604;
    QCONID -> YYAction 605;
    QUALIFIER -> YYAction 606;
    DOCUMENTATION -> YYAction 607;
    PACKAGE -> YYAction 608;
    IMPORT -> YYAction 609;
    INFIX -> YYAction 610;
    INFIXR -> YYAction 611;
    INFIXL -> YYAction 612;
    NATIVE -> YYAction 613;
    DATA -> YYAction 614;
    WHERE -> YYAction 615;
    CLASS -> YYAction 616;
    INSTANCE -> YYAction 617;
    ABSTRACT -> YYAction 618;
    TYPE -> YYAction 619;
    TRUE -> YYAction 620;
    FALSE -> YYAction 621;
    IF -> YYAction 622;
    THEN -> YYAction 623;
    ELSE -> YYAction 624;
    CASE -> YYAction 625;
    OF -> YYAction 626;
    DERIVE -> YYAction 627;
    LET -> YYAction 628;
    IN -> YYAction 629;
    DO -> YYAction 630;
    FORALL -> YYAction 631;
    PRIVATE -> YYAction 632;
    PROTECTED -> YYAction 633;
    PUBLIC -> YYAction 634;
    PURE -> YYAction 635;
    THROWS -> YYAction 636;
    MUTABLE -> YYAction 637;
    INTCONST -> YYAction 638;
    STRCONST -> YYAction 639;
    LONGCONST -> YYAction 640;
    FLTCONST -> YYAction 641;
    DBLCONST -> YYAction 642;
    CHRCONST -> YYAction 643;
    ARROW -> YYAction 644;
    DCOLON -> YYAction 645;
    GETS -> YYAction 646;
    EARROW -> YYAction 647;
    DOTDOT -> YYAction 648;
    SOMEOP -> YYAction 649;
    INTERPRET -> YYAction 650;
    _ -> (YYAction yyErr);
  };
};
private yyaction680 t =   case yychar t of {
  '}' -> YYAction 689;
  _ -> (YYAction yyErr);
};
private yyaction681 t = YYAction (-47);
private yyaction682 t = YYAction (-112);
private yyaction683 t =   case yychar t of {
  '(' -> YYAction 198;
  '[' -> YYAction 199;
  _ ->   case yytoken t of {
    VARID -> YYAction 195;
    CONID -> YYAction 25;
    QUALIFIER -> YYAction 196;
    FORALL -> YYAction 197;
    _ -> (YYAction yyErr);
  };
};
private yyaction684 t = YYAction (-300);
private yyaction685 t = YYAction (-299);
private yyaction686 t = YYAction (-301);
private yyaction687 t = YYAction (-304);
private yyaction688 t = YYAction (-116);
private yyaction689 t =   case yychar t of {
  '-' -> YYAction 651;
  ';' -> YYAction 652;
  '{' -> YYAction 653;
  '.' -> YYAction 655;
  '(' -> YYAction 656;
  ')' -> YYAction 657;
  ',' -> YYAction 658;
  '|' -> YYAction 659;
  '[' -> YYAction 660;
  ']' -> YYAction 661;
  '?' -> YYAction 662;
  '!' -> YYAction 663;
  '=' -> YYAction 664;
  '\\' -> YYAction 665;
  '}' -> YYAction (-113);
  _ ->   case yytoken t of {
    VARID -> YYAction 602;
    CONID -> YYAction 603;
    QVARID -> YYAction 604;
    QCONID -> YYAction 605;
    QUALIFIER -> YYAction 606;
    DOCUMENTATION -> YYAction 607;
    PACKAGE -> YYAction 608;
    IMPORT -> YYAction 609;
    INFIX -> YYAction 610;
    INFIXR -> YYAction 611;
    INFIXL -> YYAction 612;
    NATIVE -> YYAction 613;
    DATA -> YYAction 614;
    WHERE -> YYAction 615;
    CLASS -> YYAction 616;
    INSTANCE -> YYAction 617;
    ABSTRACT -> YYAction 618;
    TYPE -> YYAction 619;
    TRUE -> YYAction 620;
    FALSE -> YYAction 621;
    IF -> YYAction 622;
    THEN -> YYAction 623;
    ELSE -> YYAction 624;
    CASE -> YYAction 625;
    OF -> YYAction 626;
    DERIVE -> YYAction 627;
    LET -> YYAction 628;
    IN -> YYAction 629;
    DO -> YYAction 630;
    FORALL -> YYAction 631;
    PRIVATE -> YYAction 632;
    PROTECTED -> YYAction 633;
    PUBLIC -> YYAction 634;
    PURE -> YYAction 635;
    THROWS -> YYAction 636;
    MUTABLE -> YYAction 637;
    INTCONST -> YYAction 638;
    STRCONST -> YYAction 639;
    LONGCONST -> YYAction 640;
    FLTCONST -> YYAction 641;
    DBLCONST -> YYAction 642;
    CHRCONST -> YYAction 643;
    ARROW -> YYAction 644;
    DCOLON -> YYAction 645;
    GETS -> YYAction 646;
    EARROW -> YYAction 647;
    DOTDOT -> YYAction 648;
    SOMEOP -> YYAction 649;
    INTERPRET -> YYAction 650;
    _ -> (YYAction yyErr);
  };
};
private yyaction690 t = YYAction (-302);
private yyaction691 t = YYAction (-114);
private reduce1 =  \(a,d,p)\w\b     -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.return $ Program.Module (a,b,d) }
;
private reduce2 =  \(a,d,p)\w\_\b\_ -> do {
                                                        changeST Global.{sub <- SubSt.{
                                                            thisPos = p}};
                                                        YYM.return $ Program.Module (a,b,d) }
;
private reduce3 = \_\d -> d
;
private reduce4 = \e -> do {
                                YYM.return $ Program.Expression e}
;
private reduce5 =  \t -> Token.value t 
;
private reduce6 =  \t -> Token.value t 
;
private reduce7 =  \a\_\c -> Token.value a ++ "." ++ c 
;
private reduce8 =  \a\c   -> Token.value a ++ "." ++ c 
;
private reduce9 =  \x -> let s = Token.value x; i = length s - 1 in substr s 1 i 
;
private reduce10 =  \t     -> do {
                                                changeST Global.{sub <- SubSt.{
                                                    idKind <- insert (KeyTk t) (Left())}};
                                                YYM.return (Token.value t, yyline t) }
;
private reduce11 =  \a\_\(c,p) -> (repljavakws (Token.value a) ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce12 =  \a\(c,p)   -> (Token.value a ++ "." ++ c,
                                                 (yyline a).merge p) 
;
private reduce13 =  \(nm, pos) -> (magicPack nm, pos) 
;
private reduce14 =  Token.value 
;
private reduce15 =  \b\a   -> (Token.value b ++ "\n" ++ a) 
;
private reduce16 =  \b\_\a -> (Token.value b ++ "\n" ++ a) 
;
private reduce17 =  \docu\p\b   -> (fst b, Just docu, snd b) 
;
private reduce18 =  \p\b        -> (fst b, Nothing, snd b) 
;
private reduce19 =  \docu\p\_\b   -> do {
                                                    g <- getST;
                                                    changeST Global.{options = g.options.{
                                                        flags = setFlag g.options.flags INPRELUDE}};
                                                    YYM.return (fst b, Just docu, snd b) }
;
private reduce20 =  \p\_\b   -> do {
                                                    g <- getST;
                                                    changeST Global.{options = g.options.{
                                                        flags = setFlag g.options.flags INPRELUDE}};
                                                    YYM.return (fst b, Nothing, snd b) }
;
private reduce21 =  \p\vs\v\qs\_ -> do {
                                                     g <- getST;
                                                     let {clause = unwords vs};
                                                     let {expected = ["inline" , "inline candidates"]};
                                                     when (clause `notElem` expected) do {
                                                        yyerror (yyline v) (show (head expected) ++ " expected instead of " ++ show clause)
                                                     };
                                                     changeST Global.{sub <- SubSt.{
                                                            toExport = qs}};
                                                     YYM.return p;}
                                                 
;
private reduce22 =  Token.value 
;
private reduce23 =  single 
;
private reduce24 =  (:) 
;
private reduce25 =  const 1 
;
private reduce26 =  \_\n -> 1+n
;
private reduce28 =  const 
;
private reduce29 =  \a\_\b -> a ++ b 
;
private reduce30 =  single 
;
private reduce31 =  (:) 
;
private reduce34 =  \_\ds -> map (updVis Private) ds 
;
private reduce35 =  \_\ds -> map (updVis Protected) ds 
;
private reduce36 =  \_\ds -> map (updVis Public) ds 
;
private reduce37 =  \_\(d::Def) -> [d.{ctrs <- map updCtr}] 
;
private reduce38 =  single 
;
private reduce39 =  single 
;
private reduce40 =  single 
;
private reduce42 =  \_\m\t\i\js -> ModDcl {pos = yyline m, extends=t, implements=i, code=js }
;
private reduce43 =  Nothing 
;
private reduce44 =  \a\b -> Just b 
;
private reduce45 =  [] 
;
private reduce46 =  \_\taus -> taus 
;
private reduce47 =  \_\_\c\_ -> c  
;
private reduce48 =  \_\_\_   -> [] 
;
private reduce111 =  single 
;
private reduce112 =  (:) 
;
private reduce113 =  \a\b\c -> a:(b++[c]) 
;
private reduce114 =  \a\b\c\d -> (a:b)++(c:d) 
;
private reduce115 =  \a\b -> [a,b] 
;
private reduce116 =  \a\b\cs -> a:b:cs 
;
private reduce117 =  \t -> DocDcl {pos = yyline t, text = t.value}
;
private reduce118 =  single 
;
private reduce119 =  single 
;
private reduce120 =  single 
;
private reduce121 =  single 
;
private reduce122 =  single 
;
private reduce125 =  const 
;
private reduce126 =  \d\_\ds -> d ++ ds 
;
private reduce128 =  single 
;
private reduce131 =  \_\ds -> map (updVis Private) ds 
;
private reduce132 =  \_\ds -> map (updVis Protected) ds 
;
private reduce133 =  \_\ds -> map (updVis Public) ds 
;
private reduce134 =  single 
;
private reduce135 =  (:) 
;
private reduce140 =  const 
;
private reduce141 =  \ds1\_\ds2 -> ds1 ++ ds2 
;
private reduce142 =  \i\b\c -> ImpDcl {pos=snd b, pack=fst b, imports=c, as=Nothing} 
;
private reduce143 =  \i\p\a\c\l -> do
            when (Token.value a != "as") do
                yyerror (yyline a) (show "as" ++ " expected instead of " ++ show (Token.value a))
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.return ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce144 =  \i\p\c\l -> do
            changeST Global.{sub <- SubSt.{idKind <- insert (KeyTk c) (Left()) }}
            YYM.return ImpDcl {pos = snd p, pack = fst p, imports = l, as = Just (Token.value c)}
        
;
private reduce145 =  linkAll 
;
private reduce146 =  \v\_\is\_ -> do
            when ( v.value `notElem` [ "except", "excluding", "without", "auÃer", "ohne", "hiding" ]) do
                yyerror (yyline v) (show "hiding" ++ " expected instead of " ++ show v.value)
            YYM.return linkAll.{items=is}
        
;
private reduce147 =  \_\_    -> linkNone 
;
private reduce148 =  \_\is\_ -> linkNone.{items = is}  
;
private reduce149 =  \_\il   -> ImportList.{publik = true} il 
;
private reduce150 =  single 
;
private reduce151 =  \s\_ -> [s] 
;
private reduce152 =  liste  
;
private reduce153 =  \v        -> protoItem.{ name = v } 
;
private reduce154 =  \v\_\ms\_ -> protoItem.{ name = Simple v, members = Just ms} 
;
private reduce155 =  \v\_\_    -> protoItem.{ name = Simple v, members = Just []} 
;
private reduce156 =  \v        -> protoItem.{ name = v } 
;
private reduce157 =  \t        -> protoItem.{ name = opSname t } 
;
private reduce158 =  \v        -> protoItem.{ name = Simple v} 
;
private reduce159 =  \s      -> ImportItem.{alias = (enclosed . Token.value . SName.id . ImportItem.name) s} s
;
private reduce160 =  \s\a    -> ImportItem.{alias = enclosed (Token.value a)} s 
;
private reduce161 =  \_\s    -> ImportItem.export s 
;
private reduce162 =  \v     -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value v)} 
;
private reduce163 =  \v\a   -> protoItem.{ name  = Simple v,
                                                alias = enclosed (Token.value a)} 
;
private reduce164 =  \_\s   -> ImportItem.export s 
;
private reduce165 =  single 
;
private reduce166 =  \s\_ -> [s] 
;
private reduce167 =  liste  
;
private reduce170 =  \v -> do { op <- unqualified v; return op }
;
private reduce173 =  Token.{tokid = VARID} 
;
private reduce174 =  Token.{tokid = VARID} 
;
private reduce175 =  Token.{tokid = VARID} 
;
private reduce176 =  Token.{tokid = VARID} 
;
private reduce177 =  Token.{tokid = VARID} 
;
private reduce178 =  Token.{tokid = VARID} 
;
private reduce179 =  single 
;
private reduce180 =  liste  
;
private reduce181 =  \n\t\v     -> With2 n t v
;
private reduce182 =  \t\v       -> With1 t v
;
private reduce183 =  \v         -> Simple v 
;
private reduce184 =  \n\t\v     -> With2 n t v
;
private reduce185 =  \t\v       -> With1 t v
;
private reduce186 =  \v         -> Simple v 
;
private reduce189 =  \n\t\v     -> With2 n t v
;
private reduce190 =  \t\v       -> With1 t v
;
private reduce191 =  Simple  
;
private reduce192 =  opSname 
;
private reduce196 =  \f\i -> do
                                    t <- infixop (yyline i) NOP1 (Token.value i)
                                    YYM.return (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce197 =  \f\i -> do
                                    t <- infixop (yyline i) LOP1 (Token.value i)
                                    YYM.return (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce198 =  \f\i -> do
                                    t <- infixop (yyline i) ROP1 (Token.value i)
                                    YYM.return (FixDcl {pos=Pos f i, opid=t, ops=[]}) 
;
private reduce199 =  Token.value 
;
private reduce200 =  Token.value 
;
private reduce201 =  Token.value 
;
private reduce202 =  single  
;
private reduce203 =  (:) 
;
private reduce204 =  \(def::Def)\o -> def.{ops = o}
;
private reduce205 =  \as\_\s -> map (annotation s) as 
;
private reduce207 =  \_\a\_ -> do unqualified a 
;
private reduce208 =  \_\a\_ -> a 
;
private reduce209 =  \_\a\_ -> a 
;
private reduce210 =  single   
;
private reduce211 =  liste    
;
private reduce212 =  \_\(d::Def) -> d.{isPure = true} 
;
private reduce214 =  flip const 
;
private reduce215 =  \_\b  -> do unqualified b 
;
private reduce216 =  \_\b  -> b 
;
private reduce217 =  \_\b  -> b 
;
private reduce218 =  \a\_\c -> (a, c) 
;
private reduce219 =  \a -> (a, [])    
;
private reduce220 =  single 
;
private reduce221 =  liste 
;
private reduce222 =  \item\col\t -> NatDcl {pos=yyline item, vis=Public, name=item.value,
                                                meth=item.value, txs=t, isPure=false, 
                                                doc=Nothing}
;
private reduce223 =  \item\j\col\t -> NatDcl {pos=yyline item, vis=Public, name=item.value,
                                                meth=j, txs=t, isPure=false, 
                                                doc=Nothing}
;
private reduce224 =  \item\o\col\t -> do {
                            o <- unqualified o;
                            YYM.return (NatDcl {pos=yyline item, vis=Public, name=item.value,
                                                meth=o.value, txs=t, isPure=false, 
                                                doc=Nothing})}
;
private reduce225 =  \item\o\col\t -> NatDcl {pos=yyline item, vis=Public, name=item.value,
                                                meth=Token.value o, txs=t, isPure=false, 
                                                doc=Nothing}
;
private reduce226 =  single 
;
private reduce227 =  (:)    
;
private reduce228 =  Token.value 
;
private reduce230 =  ForAll [] 
;
private reduce231 =  \_\bs\_\r      -> ForAll  [ (b,KVar) | b <- bs ]  r 
;
private reduce233 =  \dot -> do
                                        when (Token.value dot != "â¢") do
                                            yyerror (yyline dot)
                                                ("'.' expected instead of " ++ show dot.value)
                                        YYM.return dot
                                    
;
private reduce234 =  \tau\t\rho -> do
                                        context <- tauToCtx tau
                                        YYM.return (Rho.{context} rho)
                                     
;
private reduce236 =  RhoTau [] 
;
private reduce237 =  \a\_\b     -> case a of
                                            TSig s -> RhoFun [] s b 
                                            _ -> RhoFun [] (ForAll [] (RhoTau [] a)) b 
;
private reduce239 =  TSig 
;
private reduce240 =  \a\f\b ->  case a of
                            TSig s -> TSig (ForAll [] (RhoFun [] s (RhoTau [] b))) 
                            _      -> TApp (TApp (TCon (yyline f) (With1 baseToken f.{tokid=CONID, value="->"})) a) b 
                         
;
private reduce241 =  single 
;
private reduce242 =  liste  
;
private reduce243 =  single 
;
private reduce244 =  liste  
;
private reduce245 =  \taus -> Tau.mkapp (head taus) (tail taus) 
;
private reduce247 =  \(tn::SName) -> TCon (yyline tn.id) tn
;
private reduce248 =  \_\t\_ -> t 
;
private reduce249 = \_\t\(c::Token)\ts\_ ->
                            let
                                tus = t:ts;
                                i = length tus;
                                tname = With1 baseToken c.{tokid=CONID, value=tuple i}
                            in  (TCon (yyline c) tname).mkapp tus
                        
;
private reduce250 =  \_\t\e\ts\_ -> mkEither (yyline e) t ts 
;
private reduce251 = \a\t\_ -> TApp (TCon (yyline a)
                                             (With1 baseToken a.{tokid=CONID, value="[]"}))
                                        t 
;
private reduce252 =  \n         -> TVar (yyline n) KVar (Token.value n)  
;
private reduce253 =  \_\n\_\k\_ -> TVar (yyline n) k    (Token.value n)  
;
private reduce255 =  \(a::Token)\_ -> With1 baseToken a.{tokid=CONID, value="[]"} 
;
private reduce256 =  \(a::Token)\_ -> With1 baseToken a.{tokid=CONID, value="()"} 
;
private reduce257 =  \(z::Token)\n\_ -> With1 baseToken z.{tokid=CONID, value=tuple (n+1)} 
;
private reduce258 =  \_\(a::Token)\_ -> With1 baseToken a.{tokid=CONID, value="->"} 
;
private reduce259 =  \a\_\c -> KApp a c 
;
private reduce261 =  \star -> do
                                let w = Token.value star
                                when  (w != "*") do
                                    yyerror (yyline star) 
                                            ("expected `*`, found `" ++ w ++ "`") 
                                return KType
                            
;
private reduce262 =  \v -> do
                                let w = Token.value v
                                if w == "generic" then return KGen
                                else do
                                    yyerror (yyline v) 
                                            ("expected `generic` instead of `" ++ w ++ "`")
                                    return KType
                            
;
private reduce263 =  \_\b\_ -> b 
;
private reduce264 = 
        \_\i\(tv::TauS)\defs -> ClaDcl {pos = yyline i, vis = Public, name = Token.value i,
                        clvar=tv, supers=[], defs = defs, doc = Nothing}
    
;
private reduce265 = 
        \_\i\tau\_\v\defs -> do
            ctxs <- tauToCtx tau
            sups <- classContext (Token.value i) ctxs (v.value)
            YYM.return (ClaDcl {pos = yyline i, vis = Public, name = Token.value i,
                             clvar = TVar (yyline v) KVar v.value,
                             supers = sups, defs = defs, doc = Nothing})
    
;
private reduce266 = 
        \ins\t\r\defs -> InsDcl {pos = yyline ins, vis = Public, clas=t, typ=r, defs=defs, doc=Nothing}
    
;
private reduce267 =  \d\t\r -> DrvDcl {pos = yyline d, vis = Public, clas=t, typ=r, doc=Nothing}
;
private reduce268 =  \def\defs -> (def::Def).{defs = defs} 
;
private reduce269 =  \_\_ -> (true, false)  
;
private reduce270 =  \_\_ -> (false, true)  
;
private reduce271 =  \_   -> (false, false) 
;
private reduce272 = 
        \dat\d\docu\pur\jt -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=[], defs=[], 
                                    isPure = fst pur, isMutable = snd pur, 
                                    doc=Nothing}
    
;
private reduce273 = 
        \dat\d\ds\docu\pur\jt -> JavDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    jclas=jt, vars=ds, defs=[], 
                                    isPure = fst pur, isMutable = snd pur,
                                    doc=Nothing}
    
;
private reduce274 = 
        \dat\d\ds\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                       vars=ds, ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce275 = 
        \dat\d\docu\alts -> DatDcl {pos=yyline d, vis=Public, name=Token.value d,
                                    vars=[], ctrs=alts, defs=[], doc=Nothing}
    
;
private reduce276 =  single 
;
private reduce277 =  (:) 
;
private reduce278 =  single 
;
private reduce279 =  liste  
;
private reduce281 =  \dc\doc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce282 =  \doc\dc -> (dc::DConS).{doc = Just (Token.value doc)} 
;
private reduce284 =  \_\dc -> (dc::DConS).{vis = Public}    
;
private reduce285 =  \_\dc -> (dc::DConS).{vis = Private}   
;
private reduce286 =  \_\dc -> (dc::DConS).{vis = Protected} 
;
private reduce287 =  \_\dcon ->  DCon.{ -- strict=true,
                                                    flds <-map ConField.{strict=true}}  dcon 
;
private reduce288 =  \_\dcon ->  DCon.{ -- strict=false,
                                                    flds <-map ConField.{strict=false}} dcon 
;
private reduce290 =  \c        -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=[], doc=Nothing } 
;
private reduce291 =  \c\_\fs\_ -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce292 =  \c\fs     -> DCon {pos=yyline c, vis=Public, -- strict=false,
                                                name=Token.value c, flds=fs, doc=Nothing } 
;
private reduce293 =  \taus -> do
                                    g <- getST
                                    let field  = Field Position.null Nothing Nothing Public false
                                                    â¢ toSig
                                        toSig (TSig s) = s
                                        toSig tau      = (ForAll [] . RhoTau []) tau
                                    return (map field taus)
                                
;
private reduce294 =  single 
;
private reduce295 =  (:) 
;
private reduce297 =  const 
;
private reduce298 =  \cs\(d::Token) -> map ConField.{doc <- addDoc d.value} cs 
;
private reduce299 =  \as\c\ls -> as ++ ls 
;
private reduce300 =  \as\(d::Token)\ls -> map ConField.{doc <- addDoc d.value} as ++ ls 
;
private reduce301 =  \vs\_\t -> [Field pos (Just name) Nothing vis strict t |
                                                (pos,name,vis,strict) <- vs ]
                                  
;
private reduce302 =  \(d::String)\vs\_\t ->
                                        map ConField.{doc=Just d}
                                            [Field pos (Just name) Nothing vis strict t |
                                                (pos,name,vis,strict) <- vs ]
                                  
;
private reduce303 =  single 
;
private reduce304 =  liste  
;
private reduce306 =  \_ \(pos,name,vis,strict) -> (pos,name,Public, strict) 
;
private reduce307 =  \_ \(pos,name,vis,strict) -> (pos,name,Private,strict) 
;
private reduce309 =  \_ \(pos,name,vis,strict) -> (pos,name,vis, true) 
;
private reduce310 =  \_ \(pos,name,vis,strict) -> (pos,name,vis, false) 
;
private reduce311 =  \v -> do
                                    g <- getST
                                    return (yyline v, v.value, Public, false)
                                
;
private reduce312 =  \t\i   \_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=[], 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce313 =  \t\i\vs\_\r -> TypDcl {pos=yyline i, 
                                                            vis=Public, 
                                                            name=Token.value i, 
                                                            vars=vs, 
                                                            typ = r, 
                                                            doc=Nothing}
;
private reduce314 =  [] 
;
private reduce315 =  \_\_\_ -> []
;
private reduce316 =  \_\_\defs\_ -> defs
;
private reduce317 =  \_\_\_ -> []
;
private reduce318 =  \_\_\defs\_ -> defs
;
private reduce319 =  \(ex,pats)\eq\expr -> fundef ex pats expr 
;
private reduce320 =  \(ex,pats)\gds -> fungds ex pats gds 
;
private reduce321 =  \fdefs\defs ->
        case fdefs of
            [fd@FunDcl {expr=x}] -> YYM.return [fd.{expr = nx}] where
                                nx = Let defs x
            _ -> do
                yyerror (head fdefs).pos ("illegal function definition, where { ... } after annotation?")
                YYM.return fdefs
    
;
private reduce322 =  \x -> do
                                            x <- funhead x
                                            YYM.return x
                                    
;
private reduce323 =  \x ->  Lit (yyline x) LBool "true" 
;
private reduce324 =  \x ->  Lit (yyline x) LBool "false"
;
private reduce325 =  \x ->  do litchar x 
;
private reduce326 =  \x ->  Lit (yyline x) LString (Token.value x) 
;
private reduce327 =  \x ->  Lit (yyline x) LInt    (Token.value x) 
;
private reduce328 =  \x ->  Lit (yyline x) LBig    (bignum x)      
;
private reduce329 =  \x ->  Lit (yyline x) LLong   (Token.value x) 
;
private reduce330 =  \x ->  Lit (yyline x) LFloat  (Token.value x) 
;
private reduce331 =  \x ->  Lit (yyline x) LDouble (Token.value x) 
;
private reduce332 =  \x ->  do litregexp x 
;
private reduce337 =  \e\t\x -> do { (ex,pat) <- funhead e; YYM.return (Right (fundef ex pat x)) }
;
private reduce338 =  \_\_\ds\_ -> Right ds 
;
private reduce339 =  single 
;
private reduce340 =  liste  
;
private reduce341 =  (const . single) 
;
private reduce342 =  single 
;
private reduce343 =  (const . single) 
;
private reduce344 =  liste 
;
private reduce345 =  \e     ->  Left (Nothing, e) 
;
private reduce346 =  \p\g\e ->  Left (Just p,  e) 
;
private reduce347 =  single 
;
private reduce348 =  liste  
;
private reduce349 =  (const . single) 
;
private reduce350 =  \a\qs\_\x  -> (yyline a, qs, x) 
;
private reduce351 =  single 
;
private reduce352 =  (:) 
;
private reduce353 =  \p\a\e ->
                                        CAlt {pat=p, ex=e}
;
private reduce354 =  \p\gs -> guardedalt p gs
;
private reduce355 = \(calt::CAltS)\defs ->
                                        let
                                            nx = Let defs calt.ex;
                                        in calt.{ ex = nx } 
;
private reduce356 =  single 
;
private reduce357 =  liste  
;
private reduce358 =  \a\_    ->  [a] 
;
private reduce359 =  \_\p\l   -> Lam p l false
;
private reduce360 =  \_\p\_\x -> Lam p x false
;
private reduce361 =  \x\_\t  -> Ann {ex = x, typ=t} 
;
private reduce363 =  flip const 
;
private reduce365 =  flip const 
;
private reduce367 =  mkapp 
;
private reduce368 =  mkapp 
;
private reduce369 =  \m\x -> nApp (Vbl (contextName m "negate")) x
;
private reduce371 =  \_\c\_\t\_\e  -> Ifte c t e
;
private reduce372 =  \_\e\_\_\as\_ -> Case CNormal e as
;
private reduce373 =  \_\_\ds\_\_\e -> Let ds e
;
private reduce375 =  underscore 
;
private reduce377 =  nApp 
;
private reduce379 =  \u\p -> nApp (Vbl {name=Simple u}) p
;
private reduce380 =  With1 
;
private reduce381 =  With2 
;
private reduce383 =  \d\_\defs\_   -> do mkMonad (yyline d) defs 
;
private reduce384 =  \p\_\(v::Token) -> umem p v id
;
private reduce385 =  \p\_\v -> do {v <- unqualified v;
                                                    YYM.return (umem p v id)}
;
private reduce386 =  \p\_\v -> umem p v id
;
private reduce387 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("has$" ++)}) 
;
private reduce388 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("upd$" ++)}) 
;
private reduce389 =  \q\_\(v::Token)\_\_ ->
                                            Vbl  (q v.{value <- ("chg$" ++)}) 
;
private reduce390 =  \q\(p::Token)\fs\_ -> let {
                        -- n   = Simple q;
                        flp = Vbl (wellKnown p "flip");
                        bul = Vbl (contextName p "â¢");
                        c []     = undefined;
                        c (f:fs) = fold cex (chup f) fs where {
                            cex x f = bul `nApp` x `nApp` chup f;
                            chup :: (Token, Bool, Exp) -> Exp;
                            chup (r, true, e)  = flp `nApp` Vbl  (q r.{value <- ("chg$"++)}) `nApp` e;
                            chup (r, false, e) = flp `nApp` Vbl  (q r.{value <- ("upd$"++)}) `nApp` e;
                                      }} in c fs 
;
private reduce391 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("has$"++)} id
;
private reduce392 =  \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("upd$"++)} id
;
private reduce393 = \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("chg$"++)} id
;
private reduce394 =  \x\(p::Token)\_\fs\_ ->
                                let {
                        u x [] = x;
                        u x ((r::Token, true , e):xs) = u (umem x r.{value <- ("chg$" ++)} (`nApp` e))  xs;
                        u x ((r::Token, false, e):xs) = u (umem x r.{value <- ("upd$" ++)} (`nApp` e))  xs;
                                } in u x fs
;
private reduce395 =  \p\t\_\v\_  ->
                                        let elem = t.{tokid = VARID, value = "elemAt"}
                                        in Vbl {name=Simple elem}
                                            `nApp` p
                                            `nApp` v
;
private reduce396 =  \x   -> Vbl {name=x} 
;
private reduce398 =  \t   -> Vbl {name = Simple t.{tokid=VARID, value="_"}} 
;
private reduce399 =  \qc  -> Con {name=qc} 
;
private reduce400 =  \qc\_\z    -> ConFS {name=qc, fields=[]}
;
private reduce401 =  \qc\_\fs\z -> ConFS {name=qc, fields=fs}
;
private reduce402 =  \z\_   -> Con (With1 baseToken z.{tokid=CONID, value="()"})
;
private reduce403 =  \z\n\_ -> Con (With1 baseToken z.{tokid=CONID, value=tuple (n+1)})
;
private reduce404 =  \_\x\_ -> Vbl {name=Simple x} 
;
private reduce405 =  \_\o\_ -> (varcon o) (opSname o)
;
private reduce406 =  \_\m\_ -> (Vbl (With1 baseToken m)) 
;
private reduce407 =  \z\o\x\_ ->  let -- (+1) --> flip (+) 1
                                        flp = Vbl (contextName z "flip") 
                                        op  = (varcon o) (opSname o)
                                        ex = nApp (nApp flp op) x
                                    in ex
;
private reduce408 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (opSname o)) x
;
private reduce409 =  \_\x\o\_ ->  -- (1+) --> (+) 1
                                        nApp ((varcon o) (Simple o)) x
;
private reduce410 =  \a\e\x\es\_ -> fold nApp (Con 
                                                                   (With1 baseToken x.{tokid=CONID, value=tuple (1+length es)})
                                                                   )
                                                              (e:es)
;
private reduce411 =  \a\e\(x::Token)\es\_ -> fold nApp (Vbl 
                                                                   (With1 baseToken x.{tokid=VARID, value="strictTuple" ++ show (1+length es)})
                                                                    )
                                                              (e:es)
;
private reduce412 =  \_\x\_ -> Term x 
;
private reduce413 =  \a\z ->  Con (With1 baseToken z.{tokid=CONID, value="[]"})
;
private reduce414 =  \b\es\z -> 
                                                foldr (\a\as -> nApp (nApp (Con (With1 baseToken b.{tokid=CONID, value=":"})) a) as)
                                                       (Con (With1 baseToken z.{tokid=CONID, value="[]"}))
                                                       es
;
private reduce415 =  \a\b\c\d   -> do mkEnumFrom   a b c d
;
private reduce416 =  \a\b\c\d\e -> do mkEnumFromTo a b c d e
;
private reduce417 =  \(a::Token)\e\b\qs\(z::Token) -> do {
                let {nil = z.{tokid=CONID, value="[]"}};
                listComprehension (yyline b) e qs
                                            (Con {name = With1 baseToken nil})
                                    }
;
private reduce418 =  const 1 
;
private reduce419 =  ((+) . const 1) 
;
private reduce420 =  single 
;
private reduce421 =  \a\c\ls ->
                                        if elemBy (using fst) a ls then do {
                                                E.warn (yyline c) (msgdoc ("field `" ++ fst a
                                                    ++ "` should appear only once."));
                                                YYM.return ls
                                            } else
                                                YYM.return (a:ls)
                                    
;
private reduce422 =  (const . single) 
;
private reduce423 =  single 
;
private reduce424 =  liste  
;
private reduce425 =  (const . single) 
;
private reduce426 =  \s\_\x ->  (s, true,  x) 
;
private reduce427 =  \s\_\x ->  (s, false, x) 
;
private reduce428 =  \s     ->  (s, false, Vbl (Simple s)) 
;
private reduce429 =  \s\_\x ->  (Token.value s, x) 
;
private reduce430 =  \s     ->  (s.value, Vbl (Simple s)) 
;
private reduce431 =  single 
;
private reduce432 =  liste  
;
private reduce433 =  (const . single) 
;
private reduce434 =  single 
;
private reduce435 =  liste 
;
private reduce436 =  (const . single) 
;
yyrule 1 = "package: packageclause ';' definitions";
yyrule 2 = "package: packageclause WHERE '{' definitions '}'";
yyrule 3 = "package: INTERPRET script";
yyrule 4 = "script: expr";
yyrule 5 = "nativename: VARID";
yyrule 6 = "nativename: CONID";
yyrule 7 = "nativename: VARID '.' nativename";
yyrule 8 = "nativename: QUALIFIER nativename";
yyrule 9 = "nativename: STRCONST";
yyrule 10 = "packagename1: CONID";
yyrule 11 = "packagename1: varidkw '.' packagename1";
yyrule 12 = "packagename1: QUALIFIER packagename1";
yyrule 13 = "packagename: packagename1";
yyrule 14 = "docs: DOCUMENTATION";
yyrule 15 = "docs: DOCUMENTATION docs";
yyrule 16 = "docs: DOCUMENTATION semicoli docs";
yyrule 17 = "packageclause: docs PACKAGE packagename";
yyrule 18 = "packageclause: PACKAGE packagename";
yyrule 19 = "packageclause: docs PROTECTED PACKAGE packagename";
yyrule 20 = "packageclause: PROTECTED PACKAGE packagename";
yyrule 21 = "packageclause: packageclause words '(' qvarids ')'";
yyrule 22 = "word: VARID";
yyrule 23 = "words: word";
yyrule 24 = "words: word words";
yyrule 25 = "semicoli: ';'";
yyrule 26 = "semicoli: ';' semicoli";
yyrule 27 = "definitions: definition";
yyrule 28 = "definitions: definition semicoli";
yyrule 29 = "definitions: definition semicoli definitions";
yyrule 30 = "definition: documentation";
yyrule 31 = "definition: documentation definition";
yyrule 32 = "definition: topdefinition";
yyrule 33 = "definition: visibledefinition";
yyrule 34 = "visibledefinition: PRIVATE publicdefinition";
yyrule 35 = "visibledefinition: PROTECTED publicdefinition";
yyrule 36 = "visibledefinition: PUBLIC publicdefinition";
yyrule 37 = "visibledefinition: ABSTRACT datadef";
yyrule 38 = "topdefinition: import";
yyrule 39 = "topdefinition: infix";
yyrule 40 = "topdefinition: moduledefinition";
yyrule 41 = "topdefinition: publicdefinition";
yyrule 42 = "moduledefinition: NATIVE PACKAGE typeclause interfaces wheretokens";
yyrule 43 = "typeclause: <empty>";
yyrule 44 = "typeclause: TYPE tau";
yyrule 45 = "interfaces: <empty>";
yyrule 46 = "interfaces: CLASS tauSC";
yyrule 47 = "wheretokens: WHERE '{' jtokens '}'";
yyrule 48 = "wheretokens: WHERE '{' '}'";
yyrule 49 = "jtoken: VARID";
yyrule 50 = "jtoken: CONID";
yyrule 51 = "jtoken: QVARID";
yyrule 52 = "jtoken: QCONID";
yyrule 53 = "jtoken: QUALIFIER";
yyrule 54 = "jtoken: DOCUMENTATION";
yyrule 55 = "jtoken: PACKAGE";
yyrule 56 = "jtoken: IMPORT";
yyrule 57 = "jtoken: INFIX";
yyrule 58 = "jtoken: INFIXR";
yyrule 59 = "jtoken: INFIXL";
yyrule 60 = "jtoken: NATIVE";
yyrule 61 = "jtoken: DATA";
yyrule 62 = "jtoken: WHERE";
yyrule 63 = "jtoken: CLASS";
yyrule 64 = "jtoken: INSTANCE";
yyrule 65 = "jtoken: ABSTRACT";
yyrule 66 = "jtoken: TYPE";
yyrule 67 = "jtoken: TRUE";
yyrule 68 = "jtoken: FALSE";
yyrule 69 = "jtoken: IF";
yyrule 70 = "jtoken: THEN";
yyrule 71 = "jtoken: ELSE";
yyrule 72 = "jtoken: CASE";
yyrule 73 = "jtoken: OF";
yyrule 74 = "jtoken: DERIVE";
yyrule 75 = "jtoken: LET";
yyrule 76 = "jtoken: IN";
yyrule 77 = "jtoken: DO";
yyrule 78 = "jtoken: FORALL";
yyrule 79 = "jtoken: PRIVATE";
yyrule 80 = "jtoken: PROTECTED";
yyrule 81 = "jtoken: PUBLIC";
yyrule 82 = "jtoken: PURE";
yyrule 83 = "jtoken: THROWS";
yyrule 84 = "jtoken: MUTABLE";
yyrule 85 = "jtoken: INTCONST";
yyrule 86 = "jtoken: STRCONST";
yyrule 87 = "jtoken: LONGCONST";
yyrule 88 = "jtoken: FLTCONST";
yyrule 89 = "jtoken: DBLCONST";
yyrule 90 = "jtoken: CHRCONST";
yyrule 91 = "jtoken: ARROW";
yyrule 92 = "jtoken: DCOLON";
yyrule 93 = "jtoken: GETS";
yyrule 94 = "jtoken: EARROW";
yyrule 95 = "jtoken: DOTDOT";
yyrule 96 = "jtoken: SOMEOP";
yyrule 97 = "jtoken: INTERPRET";
yyrule 98 = "jtoken: ','";
yyrule 99 = "jtoken: '|'";
yyrule 100 = "jtoken: '['";
yyrule 101 = "jtoken: ']'";
yyrule 102 = "jtoken: '('";
yyrule 103 = "jtoken: ')'";
yyrule 104 = "jtoken: '.'";
yyrule 105 = "jtoken: '?'";
yyrule 106 = "jtoken: '-'";
yyrule 107 = "jtoken: ';'";
yyrule 108 = "jtoken: '!'";
yyrule 109 = "jtoken: '='";
yyrule 110 = "jtoken: '\\'";
yyrule 111 = "jtokens: jtoken";
yyrule 112 = "jtokens: jtoken jtokens";
yyrule 113 = "jtokens: '{' jtokens '}'";
yyrule 114 = "jtokens: '{' jtokens '}' jtokens";
yyrule 115 = "jtokens: '{' '}'";
yyrule 116 = "jtokens: '{' '}' jtokens";
yyrule 117 = "documentation: DOCUMENTATION";
yyrule 118 = "publicdefinition: typedef";
yyrule 119 = "publicdefinition: datadef";
yyrule 120 = "publicdefinition: classdef";
yyrule 121 = "publicdefinition: instdef";
yyrule 122 = "publicdefinition: derivedef";
yyrule 123 = "publicdefinition: localdef";
yyrule 124 = "localdefs: dplocaldef";
yyrule 125 = "localdefs: dplocaldef semicoli";
yyrule 126 = "localdefs: dplocaldef semicoli localdefs";
yyrule 127 = "localdef: annotation";
yyrule 128 = "localdef: nativedef";
yyrule 129 = "localdef: fundef";
yyrule 130 = "plocaldef: localdef";
yyrule 131 = "plocaldef: PRIVATE localdef";
yyrule 132 = "plocaldef: PROTECTED localdef";
yyrule 133 = "plocaldef: PUBLIC localdef";
yyrule 134 = "dplocaldef: documentation";
yyrule 135 = "dplocaldef: documentation dplocaldef";
yyrule 136 = "dplocaldef: plocaldef";
yyrule 137 = "letdef: annotation";
yyrule 138 = "letdef: fundef";
yyrule 139 = "letdefs: letdef";
yyrule 140 = "letdefs: letdef semicoli";
yyrule 141 = "letdefs: letdef semicoli letdefs";
yyrule 142 = "import: IMPORT packagename importliste";
yyrule 143 = "import: IMPORT packagename VARID CONID importliste";
yyrule 144 = "import: IMPORT packagename CONID importliste";
yyrule 145 = "importliste: <empty>";
yyrule 146 = "importliste: varid '(' importspecs ')'";
yyrule 147 = "importliste: '(' ')'";
yyrule 148 = "importliste: '(' importspecs ')'";
yyrule 149 = "importliste: PUBLIC importliste";
yyrule 150 = "importspecs: importspec";
yyrule 151 = "importspecs: importspec ','";
yyrule 152 = "importspecs: importspec ',' importspecs";
yyrule 153 = "importitem: qvarid";
yyrule 154 = "importitem: CONID '(' memspecs ')'";
yyrule 155 = "importitem: CONID '(' ')'";
yyrule 156 = "importitem: qconid";
yyrule 157 = "importitem: operator";
yyrule 158 = "importitem: unop";
yyrule 159 = "importspec: importitem";
yyrule 160 = "importspec: importitem alias";
yyrule 161 = "importspec: PUBLIC importspec";
yyrule 162 = "memspec: alias";
yyrule 163 = "memspec: alias alias";
yyrule 164 = "memspec: PUBLIC memspec";
yyrule 165 = "memspecs: memspec";
yyrule 166 = "memspecs: memspec ','";
yyrule 167 = "memspecs: memspec ',' memspecs";
yyrule 168 = "alias: VARID";
yyrule 169 = "alias: CONID";
yyrule 170 = "alias: operator";
yyrule 171 = "varid: VARID";
yyrule 172 = "varidkw: VARID";
yyrule 173 = "varidkw: DATA";
yyrule 174 = "varidkw: TYPE";
yyrule 175 = "varidkw: NATIVE";
yyrule 176 = "varidkw: PURE";
yyrule 177 = "varidkw: PACKAGE";
yyrule 178 = "varidkw: IMPORT";
yyrule 179 = "qvarids: qvarop";
yyrule 180 = "qvarids: qvarop ',' qvarids";
yyrule 181 = "qvarid: QUALIFIER QUALIFIER varop";
yyrule 182 = "qvarid: QUALIFIER varop";
yyrule 183 = "qvarid: VARID";
yyrule 184 = "qconid: QUALIFIER QUALIFIER CONID";
yyrule 185 = "qconid: QUALIFIER CONID";
yyrule 186 = "qconid: CONID";
yyrule 187 = "varop: VARID";
yyrule 188 = "varop: unop";
yyrule 189 = "qvarop: QUALIFIER QUALIFIER varop";
yyrule 190 = "qvarop: QUALIFIER varop";
yyrule 191 = "qvarop: varop";
yyrule 192 = "qvarop: operator";
yyrule 193 = "operator: SOMEOP";
yyrule 194 = "unop: '!'";
yyrule 195 = "unop: '?'";
yyrule 196 = "fixity: INFIX INTCONST";
yyrule 197 = "fixity: INFIXL INTCONST";
yyrule 198 = "fixity: INFIXR INTCONST";
yyrule 199 = "opstring: operator";
yyrule 200 = "opstring: VARID";
yyrule 201 = "opstring: '-'";
yyrule 202 = "operators: opstring";
yyrule 203 = "operators: opstring operators";
yyrule 204 = "infix: fixity operators";
yyrule 205 = "annotation: annoitems DCOLON sigma";
yyrule 206 = "annoitem: varid";
yyrule 207 = "annoitem: '(' operator ')'";
yyrule 208 = "annoitem: '(' unop ')'";
yyrule 209 = "annoitem: '(' '-' ')'";
yyrule 210 = "annoitems: annoitem";
yyrule 211 = "annoitems: annoitem ',' annoitems";
yyrule 212 = "nativedef: PURE impurenativedef";
yyrule 213 = "nativedef: impurenativedef";
yyrule 214 = "nativestart: NATIVE annoitem";
yyrule 215 = "nativestart: NATIVE operator";
yyrule 216 = "nativestart: NATIVE unop";
yyrule 217 = "nativestart: NATIVE '-'";
yyrule 218 = "sigex: sigma THROWS tauSC";
yyrule 219 = "sigex: sigma";
yyrule 220 = "sigexs: sigex";
yyrule 221 = "sigexs: sigex '|' sigexs";
yyrule 222 = "impurenativedef: nativestart DCOLON sigexs";
yyrule 223 = "impurenativedef: nativestart nativename DCOLON sigexs";
yyrule 224 = "impurenativedef: nativestart operator DCOLON sigexs";
yyrule 225 = "impurenativedef: nativestart unop DCOLON sigexs";
yyrule 226 = "boundvars: boundvar";
yyrule 227 = "boundvars: boundvar boundvars";
yyrule 228 = "boundvar: VARID";
yyrule 229 = "sigma: forall";
yyrule 230 = "sigma: rho";
yyrule 231 = "forall: FORALL boundvars mbdot rho";
yyrule 232 = "mbdot: '.'";
yyrule 233 = "mbdot: SOMEOP";
yyrule 234 = "rho: tapp EARROW rhofun";
yyrule 235 = "rho: rhofun";
yyrule 236 = "rhofun: tapp";
yyrule 237 = "rhofun: tapp ARROW rhofun";
yyrule 238 = "tau: tapp";
yyrule 239 = "tau: forall";
yyrule 240 = "tau: tapp ARROW tau";
yyrule 241 = "tauSC: tau";
yyrule 242 = "tauSC: tau ',' tauSC";
yyrule 243 = "tauSB: tau";
yyrule 244 = "tauSB: tau '|' tauSB";
yyrule 245 = "tapp: simpletypes";
yyrule 246 = "simpletype: tyvar";
yyrule 247 = "simpletype: tyname";
yyrule 248 = "simpletype: '(' tau ')'";
yyrule 249 = "simpletype: '(' tau ',' tauSC ')'";
yyrule 250 = "simpletype: '(' tau '|' tauSB ')'";
yyrule 251 = "simpletype: '[' tau ']'";
yyrule 252 = "tyvar: VARID";
yyrule 253 = "tyvar: '(' VARID DCOLON kind ')'";
yyrule 254 = "tyname: qconid";
yyrule 255 = "tyname: '[' ']'";
yyrule 256 = "tyname: '(' ')'";
yyrule 257 = "tyname: '(' commata ')'";
yyrule 258 = "tyname: '(' ARROW ')'";
yyrule 259 = "kind: simplekind ARROW kind";
yyrule 260 = "kind: simplekind";
yyrule 261 = "simplekind: SOMEOP";
yyrule 262 = "simplekind: VARID";
yyrule 263 = "simplekind: '(' kind ')'";
yyrule 264 = "classdef: CLASS CONID tyvar wheredef";
yyrule 265 = "classdef: CLASS CONID tau EARROW varid wheredef";
yyrule 266 = "instdef: INSTANCE tyname sigma wheredef";
yyrule 267 = "derivedef: DERIVE tyname sigma";
yyrule 268 = "datadef: datainit wheredef";
yyrule 269 = "nativepur: PURE NATIVE";
yyrule 270 = "nativepur: MUTABLE NATIVE";
yyrule 271 = "nativepur: NATIVE";
yyrule 272 = "datainit: DATA CONID '=' nativepur nativename";
yyrule 273 = "datainit: DATA CONID dvars '=' nativepur nativename";
yyrule 274 = "datainit: DATA CONID dvars '=' dalts";
yyrule 275 = "datainit: DATA CONID '=' dalts";
yyrule 276 = "dvars: tyvar";
yyrule 277 = "dvars: tyvar dvars";
yyrule 278 = "dalts: dalt";
yyrule 279 = "dalts: dalt '|' dalts";
yyrule 280 = "dalt: visdalt";
yyrule 281 = "dalt: visdalt DOCUMENTATION";
yyrule 282 = "dalt: DOCUMENTATION visdalt";
yyrule 283 = "visdalt: strictdalt";
yyrule 284 = "visdalt: PUBLIC strictdalt";
yyrule 285 = "visdalt: PRIVATE strictdalt";
yyrule 286 = "visdalt: PROTECTED strictdalt";
yyrule 287 = "strictdalt: '!' simpledalt";
yyrule 288 = "strictdalt: '?' simpledalt";
yyrule 289 = "strictdalt: simpledalt";
yyrule 290 = "simpledalt: CONID";
yyrule 291 = "simpledalt: CONID '{' conflds '}'";
yyrule 292 = "simpledalt: CONID contypes";
yyrule 293 = "contypes: simpletypes";
yyrule 294 = "simpletypes: simpletype";
yyrule 295 = "simpletypes: simpletype simpletypes";
yyrule 296 = "conflds: confld";
yyrule 297 = "conflds: confld ','";
yyrule 298 = "conflds: confld DOCUMENTATION";
yyrule 299 = "conflds: confld ',' conflds";
yyrule 300 = "conflds: confld DOCUMENTATION conflds";
yyrule 301 = "confld: fldids DCOLON sigma";
yyrule 302 = "confld: docs fldids DCOLON sigma";
yyrule 303 = "fldids: fldid";
yyrule 304 = "fldids: fldid ',' fldids";
yyrule 305 = "fldid: strictfldid";
yyrule 306 = "fldid: PUBLIC strictfldid";
yyrule 307 = "fldid: PRIVATE strictfldid";
yyrule 308 = "strictfldid: plainfldid";
yyrule 309 = "strictfldid: '!' plainfldid";
yyrule 310 = "strictfldid: '?' plainfldid";
yyrule 311 = "plainfldid: varid";
yyrule 312 = "typedef: TYPE CONID '=' sigma";
yyrule 313 = "typedef: TYPE CONID dvars '=' sigma";
yyrule 314 = "wheredef: <empty>";
yyrule 315 = "wheredef: WHERE '{' '}'";
yyrule 316 = "wheredef: WHERE '{' localdefs '}'";
yyrule 317 = "wherelet: WHERE '{' '}'";
yyrule 318 = "wherelet: WHERE '{' letdefs '}'";
yyrule 319 = "fundef: funhead '=' expr";
yyrule 320 = "fundef: funhead guards";
yyrule 321 = "fundef: fundef wherelet";
yyrule 322 = "funhead: binex";
yyrule 323 = "literal: TRUE";
yyrule 324 = "literal: FALSE";
yyrule 325 = "literal: CHRCONST";
yyrule 326 = "literal: STRCONST";
yyrule 327 = "literal: INTCONST";
yyrule 328 = "literal: BIGCONST";
yyrule 329 = "literal: LONGCONST";
yyrule 330 = "literal: FLTCONST";
yyrule 331 = "literal: DBLCONST";
yyrule 332 = "literal: REGEXP";
yyrule 333 = "pattern: expr";
yyrule 334 = "aeq: ARROW";
yyrule 335 = "aeq: '='";
yyrule 336 = "lcqual: gqual";
yyrule 337 = "lcqual: expr '=' expr";
yyrule 338 = "lcqual: LET '{' letdefs '}'";
yyrule 339 = "lcquals: lcqual";
yyrule 340 = "lcquals: lcqual ',' lcquals";
yyrule 341 = "lcquals: lcqual ','";
yyrule 342 = "dodefs: lcqual";
yyrule 343 = "dodefs: lcqual semicoli";
yyrule 344 = "dodefs: lcqual semicoli dodefs";
yyrule 345 = "gqual: expr";
yyrule 346 = "gqual: expr GETS expr";
yyrule 347 = "gquals: gqual";
yyrule 348 = "gquals: gqual ',' gquals";
yyrule 349 = "gquals: gqual ','";
yyrule 350 = "guard: '|' gquals aeq expr";
yyrule 351 = "guards: guard";
yyrule 352 = "guards: guard guards";
yyrule 353 = "calt: pattern aeq expr";
yyrule 354 = "calt: pattern guards";
yyrule 355 = "calt: calt wherelet";
yyrule 356 = "calts: calt";
yyrule 357 = "calts: calt ';' calts";
yyrule 358 = "calts: calt ';'";
yyrule 359 = "lambda: '\\' pattern lambda";
yyrule 360 = "lambda: '\\' pattern ARROW expr";
yyrule 361 = "expr: binex DCOLON sigma";
yyrule 362 = "expr: binex";
yyrule 363 = "thenx: ';' THEN";
yyrule 364 = "thenx: THEN";
yyrule 365 = "elsex: ';' ELSE";
yyrule 366 = "elsex: ELSE";
yyrule 367 = "binex: binex SOMEOP binex";
yyrule 368 = "binex: binex '-' binex";
yyrule 369 = "binex: '-' topex";
yyrule 370 = "binex: topex";
yyrule 371 = "topex: IF expr thenx expr elsex expr";
yyrule 372 = "topex: CASE expr OF '{' calts '}'";
yyrule 373 = "topex: LET '{' letdefs '}' IN expr";
yyrule 374 = "topex: lambda";
yyrule 375 = "topex: appex";
yyrule 376 = "appex: unex";
yyrule 377 = "appex: appex unex";
yyrule 378 = "unex: primary";
yyrule 379 = "unex: unop unex";
yyrule 380 = "qualifiers: QUALIFIER";
yyrule 381 = "qualifiers: QUALIFIER QUALIFIER";
yyrule 382 = "primary: term";
yyrule 383 = "primary: DO '{' dodefs '}'";
yyrule 384 = "primary: primary '.' VARID";
yyrule 385 = "primary: primary '.' operator";
yyrule 386 = "primary: primary '.' unop";
yyrule 387 = "primary: qualifiers '{' VARID '?' '}'";
yyrule 388 = "primary: qualifiers '{' VARID '=' '}'";
yyrule 389 = "primary: qualifiers '{' VARID GETS '}'";
yyrule 390 = "primary: qualifiers '{' getfields '}'";
yyrule 391 = "primary: primary '.' '{' VARID '?' '}'";
yyrule 392 = "primary: primary '.' '{' VARID '=' '}'";
yyrule 393 = "primary: primary '.' '{' VARID GETS '}'";
yyrule 394 = "primary: primary '.' '{' getfields '}'";
yyrule 395 = "primary: primary '.' '[' expr ']'";
yyrule 396 = "term: qvarid";
yyrule 397 = "term: literal";
yyrule 398 = "term: '_'";
yyrule 399 = "term: qconid";
yyrule 400 = "term: qconid '{' '}'";
yyrule 401 = "term: qconid '{' fields '}'";
yyrule 402 = "term: '(' ')'";
yyrule 403 = "term: '(' commata ')'";
yyrule 404 = "term: '(' unop ')'";
yyrule 405 = "term: '(' operator ')'";
yyrule 406 = "term: '(' '-' ')'";
yyrule 407 = "term: '(' operator expr ')'";
yyrule 408 = "term: '(' binex operator ')'";
yyrule 409 = "term: '(' binex '-' ')'";
yyrule 410 = "term: '(' expr ',' exprSC ')'";
yyrule 411 = "term: '(' expr ';' exprSS ')'";
yyrule 412 = "term: '(' expr ')'";
yyrule 413 = "term: '[' ']'";
yyrule 414 = "term: '[' exprSC ']'";
yyrule 415 = "term: '[' exprSC DOTDOT ']'";
yyrule 416 = "term: '[' exprSC DOTDOT expr ']'";
yyrule 417 = "term: '[' expr '|' lcquals ']'";
yyrule 418 = "commata: ','";
yyrule 419 = "commata: ',' commata";
yyrule 420 = "fields: field";
yyrule 421 = "fields: field ',' fields";
yyrule 422 = "fields: field ','";
yyrule 423 = "getfields: getfield";
yyrule 424 = "getfields: getfield ',' getfields";
yyrule 425 = "getfields: getfield ','";
yyrule 426 = "getfield: VARID GETS expr";
yyrule 427 = "getfield: VARID '=' expr";
yyrule 428 = "getfield: VARID";
yyrule 429 = "field: varid '=' expr";
yyrule 430 = "field: varid";
yyrule 431 = "exprSC: expr";
yyrule 432 = "exprSC: expr ',' exprSC";
yyrule 433 = "exprSC: expr ','";
yyrule 434 = "exprSS: expr";
yyrule 435 = "exprSS: expr ';' exprSS";
yyrule 436 = "exprSS: expr ';'";
yyrule _ = "<unknown rule>";

private yyprod1 ((_, (YYNTdefinitions yy3)):(_, (YYTok yy2)):(_, (YYNTpackageclause yy1)):yyvs) =  do { yyr <- reduce1 yy1 yy2 yy3 ;YYM.return (YYNTpackage yyr, yyvs)};
private yyprod1 yyvals = yybadprod 1 yyvals;
private yyprod2 ((_, (YYTok yy5)):(_, (YYNTdefinitions yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTpackageclause yy1)):yyvs) =  do { yyr <- reduce2 yy1 yy2 yy3 yy4 yy5 ;YYM.return (YYNTpackage yyr, yyvs)};
private yyprod2 yyvals = yybadprod 2 yyvals;
private yyprod3 ((_, (YYNTscript yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce3 yy1 yy2}; YYM.return (YYNTpackage yyr, yyvs)};
private yyprod3 yyvals = yybadprod 3 yyvals;
private yyprod4 ((_, (YYNTexpr yy1)):yyvs) =  do { yyr <- reduce4 yy1 ;YYM.return (YYNTscript yyr, yyvs)};
private yyprod4 yyvals = yybadprod 4 yyvals;
private yyprod5 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce5 yy1}; YYM.return (YYNTnativename yyr, yyvs)};
private yyprod5 yyvals = yybadprod 5 yyvals;
private yyprod6 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce6 yy1}; YYM.return (YYNTnativename yyr, yyvs)};
private yyprod6 yyvals = yybadprod 6 yyvals;
private yyprod7 ((_, (YYNTnativename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce7 yy1 yy2 yy3}; YYM.return (YYNTnativename yyr, yyvs)};
private yyprod7 yyvals = yybadprod 7 yyvals;
private yyprod8 ((_, (YYNTnativename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce8 yy1 yy2}; YYM.return (YYNTnativename yyr, yyvs)};
private yyprod8 yyvals = yybadprod 8 yyvals;
private yyprod9 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce9 yy1}; YYM.return (YYNTnativename yyr, yyvs)};
private yyprod9 yyvals = yybadprod 9 yyvals;
private yyprod10 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce10 yy1 ;YYM.return (YYNTpackagename1 yyr, yyvs)};
private yyprod10 yyvals = yybadprod 10 yyvals;
private yyprod11 ((_, (YYNTpackagename1 yy3)):(_, (YYTok yy2)):(_, (YYNTvaridkw yy1)):yyvs) =  do { let {!yyr = reduce11 yy1 yy2 yy3}; YYM.return (YYNTpackagename1 yyr, yyvs)};
private yyprod11 yyvals = yybadprod 11 yyvals;
private yyprod12 ((_, (YYNTpackagename1 yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce12 yy1 yy2}; YYM.return (YYNTpackagename1 yyr, yyvs)};
private yyprod12 yyvals = yybadprod 12 yyvals;
private yyprod13 ((_, (YYNTpackagename1 yy1)):yyvs) =  do { let {!yyr = reduce13 yy1}; YYM.return (YYNTpackagename yyr, yyvs)};
private yyprod13 yyvals = yybadprod 13 yyvals;
private yyprod14 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce14 yy1}; YYM.return (YYNTdocs yyr, yyvs)};
private yyprod14 yyvals = yybadprod 14 yyvals;
private yyprod15 ((_, (YYNTdocs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce15 yy1 yy2}; YYM.return (YYNTdocs yyr, yyvs)};
private yyprod15 yyvals = yybadprod 15 yyvals;
private yyprod16 ((_, (YYNTdocs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce16 yy1 yy2 yy3}; YYM.return (YYNTdocs yyr, yyvs)};
private yyprod16 yyvals = yybadprod 16 yyvals;
private yyprod17 ((_, (YYNTpackagename yy3)):(_, (YYTok yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { let {!yyr = reduce17 yy1 yy2 yy3}; YYM.return (YYNTpackageclause yyr, yyvs)};
private yyprod17 yyvals = yybadprod 17 yyvals;
private yyprod18 ((_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce18 yy1 yy2}; YYM.return (YYNTpackageclause yyr, yyvs)};
private yyprod18 yyvals = yybadprod 18 yyvals;
private yyprod19 ((_, (YYNTpackagename yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { yyr <- reduce19 yy1 yy2 yy3 yy4 ;YYM.return (YYNTpackageclause yyr, yyvs)};
private yyprod19 yyvals = yybadprod 19 yyvals;
private yyprod20 ((_, (YYNTpackagename yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce20 yy1 yy2 yy3 ;YYM.return (YYNTpackageclause yyr, yyvs)};
private yyprod20 yyvals = yybadprod 20 yyvals;
private yyprod21 ((_, (YYTok yy5)):(_, (YYNTqvarids yy4)):(_, (YYTok yy3)):(_, (YYNTwords yy2)):(_, (YYNTpackageclause yy1)):yyvs) =  do { yyr <- reduce21 yy1 yy2 yy3 yy4 yy5 ;YYM.return (YYNTpackageclause yyr, yyvs)};
private yyprod21 yyvals = yybadprod 21 yyvals;
private yyprod22 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce22 yy1}; YYM.return (YYNTword yyr, yyvs)};
private yyprod22 yyvals = yybadprod 22 yyvals;
private yyprod23 ((_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce23 yy1}; YYM.return (YYNTwords yyr, yyvs)};
private yyprod23 yyvals = yybadprod 23 yyvals;
private yyprod24 ((_, (YYNTwords yy2)):(_, (YYNTword yy1)):yyvs) =  do { let {!yyr = reduce24 yy1 yy2}; YYM.return (YYNTwords yyr, yyvs)};
private yyprod24 yyvals = yybadprod 24 yyvals;
private yyprod25 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce25 yy1}; YYM.return (YYNTsemicoli yyr, yyvs)};
private yyprod25 yyvals = yybadprod 25 yyvals;
private yyprod26 ((_, (YYNTsemicoli yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce26 yy1 yy2}; YYM.return (YYNTsemicoli yyr, yyvs)};
private yyprod26 yyvals = yybadprod 26 yyvals;
private yyprod27 ((_, (YYNTdefinition yy1)):yyvs) = YYM.return (YYNTdefinitions (yy1), yyvs);
private yyprod27 yyvals = yybadprod 27 yyvals;
private yyprod28 ((_, (YYNTsemicoli yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce28 yy1 yy2}; YYM.return (YYNTdefinitions yyr, yyvs)};
private yyprod28 yyvals = yybadprod 28 yyvals;
private yyprod29 ((_, (YYNTdefinitions yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTdefinition yy1)):yyvs) =  do { let {!yyr = reduce29 yy1 yy2 yy3}; YYM.return (YYNTdefinitions yyr, yyvs)};
private yyprod29 yyvals = yybadprod 29 yyvals;
private yyprod30 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce30 yy1}; YYM.return (YYNTdefinition yyr, yyvs)};
private yyprod30 yyvals = yybadprod 30 yyvals;
private yyprod31 ((_, (YYNTdefinition yy2)):(_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce31 yy1 yy2}; YYM.return (YYNTdefinition yyr, yyvs)};
private yyprod31 yyvals = yybadprod 31 yyvals;
private yyprod32 ((_, (YYNTtopdefinition yy1)):yyvs) = YYM.return (YYNTdefinition (yy1), yyvs);
private yyprod32 yyvals = yybadprod 32 yyvals;
private yyprod33 ((_, (YYNTvisibledefinition yy1)):yyvs) = YYM.return (YYNTdefinition (yy1), yyvs);
private yyprod33 yyvals = yybadprod 33 yyvals;
private yyprod34 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce34 yy1 yy2}; YYM.return (YYNTvisibledefinition yyr, yyvs)};
private yyprod34 yyvals = yybadprod 34 yyvals;
private yyprod35 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce35 yy1 yy2}; YYM.return (YYNTvisibledefinition yyr, yyvs)};
private yyprod35 yyvals = yybadprod 35 yyvals;
private yyprod36 ((_, (YYNTpublicdefinition yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce36 yy1 yy2}; YYM.return (YYNTvisibledefinition yyr, yyvs)};
private yyprod36 yyvals = yybadprod 36 yyvals;
private yyprod37 ((_, (YYNTdatadef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce37 yy1 yy2}; YYM.return (YYNTvisibledefinition yyr, yyvs)};
private yyprod37 yyvals = yybadprod 37 yyvals;
private yyprod38 ((_, (YYNTimport yy1)):yyvs) =  do { let {!yyr = reduce38 yy1}; YYM.return (YYNTtopdefinition yyr, yyvs)};
private yyprod38 yyvals = yybadprod 38 yyvals;
private yyprod39 ((_, (YYNTinfix yy1)):yyvs) =  do { let {!yyr = reduce39 yy1}; YYM.return (YYNTtopdefinition yyr, yyvs)};
private yyprod39 yyvals = yybadprod 39 yyvals;
private yyprod40 ((_, (YYNTmoduledefinition yy1)):yyvs) =  do { let {!yyr = reduce40 yy1}; YYM.return (YYNTtopdefinition yyr, yyvs)};
private yyprod40 yyvals = yybadprod 40 yyvals;
private yyprod41 ((_, (YYNTpublicdefinition yy1)):yyvs) = YYM.return (YYNTtopdefinition (yy1), yyvs);
private yyprod41 yyvals = yybadprod 41 yyvals;
private yyprod42 ((_, (YYNTwheretokens yy5)):(_, (YYNTinterfaces yy4)):(_, (YYNTtypeclause yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce42 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTmoduledefinition yyr, yyvs)};
private yyprod42 yyvals = yybadprod 42 yyvals;
private yyprod43 yyvs =  do { let {!yyr = reduce43 }; YYM.return (YYNTtypeclause yyr, yyvs)};
private yyprod44 ((_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce44 yy1 yy2}; YYM.return (YYNTtypeclause yyr, yyvs)};
private yyprod44 yyvals = yybadprod 44 yyvals;
private yyprod45 yyvs =  do { let {!yyr = reduce45 }; YYM.return (YYNTinterfaces yyr, yyvs)};
private yyprod46 ((_, (YYNTtauSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce46 yy1 yy2}; YYM.return (YYNTinterfaces yyr, yyvs)};
private yyprod46 yyvals = yybadprod 46 yyvals;
private yyprod47 ((_, (YYTok yy4)):(_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce47 yy1 yy2 yy3 yy4}; YYM.return (YYNTwheretokens yyr, yyvs)};
private yyprod47 yyvals = yybadprod 47 yyvals;
private yyprod48 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce48 yy1 yy2 yy3}; YYM.return (YYNTwheretokens yyr, yyvs)};
private yyprod48 yyvals = yybadprod 48 yyvals;
private yyprod49 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod49 yyvals = yybadprod 49 yyvals;
private yyprod50 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod50 yyvals = yybadprod 50 yyvals;
private yyprod51 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod51 yyvals = yybadprod 51 yyvals;
private yyprod52 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod52 yyvals = yybadprod 52 yyvals;
private yyprod53 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod53 yyvals = yybadprod 53 yyvals;
private yyprod54 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod54 yyvals = yybadprod 54 yyvals;
private yyprod55 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod55 yyvals = yybadprod 55 yyvals;
private yyprod56 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod56 yyvals = yybadprod 56 yyvals;
private yyprod57 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod57 yyvals = yybadprod 57 yyvals;
private yyprod58 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod58 yyvals = yybadprod 58 yyvals;
private yyprod59 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod59 yyvals = yybadprod 59 yyvals;
private yyprod60 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod60 yyvals = yybadprod 60 yyvals;
private yyprod61 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod61 yyvals = yybadprod 61 yyvals;
private yyprod62 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod62 yyvals = yybadprod 62 yyvals;
private yyprod63 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod63 yyvals = yybadprod 63 yyvals;
private yyprod64 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod64 yyvals = yybadprod 64 yyvals;
private yyprod65 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod65 yyvals = yybadprod 65 yyvals;
private yyprod66 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod66 yyvals = yybadprod 66 yyvals;
private yyprod67 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod67 yyvals = yybadprod 67 yyvals;
private yyprod68 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod68 yyvals = yybadprod 68 yyvals;
private yyprod69 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod69 yyvals = yybadprod 69 yyvals;
private yyprod70 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod70 yyvals = yybadprod 70 yyvals;
private yyprod71 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod71 yyvals = yybadprod 71 yyvals;
private yyprod72 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod72 yyvals = yybadprod 72 yyvals;
private yyprod73 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod73 yyvals = yybadprod 73 yyvals;
private yyprod74 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod74 yyvals = yybadprod 74 yyvals;
private yyprod75 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod75 yyvals = yybadprod 75 yyvals;
private yyprod76 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod76 yyvals = yybadprod 76 yyvals;
private yyprod77 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod77 yyvals = yybadprod 77 yyvals;
private yyprod78 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod78 yyvals = yybadprod 78 yyvals;
private yyprod79 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod79 yyvals = yybadprod 79 yyvals;
private yyprod80 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod80 yyvals = yybadprod 80 yyvals;
private yyprod81 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod81 yyvals = yybadprod 81 yyvals;
private yyprod82 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod82 yyvals = yybadprod 82 yyvals;
private yyprod83 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod83 yyvals = yybadprod 83 yyvals;
private yyprod84 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod84 yyvals = yybadprod 84 yyvals;
private yyprod85 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod85 yyvals = yybadprod 85 yyvals;
private yyprod86 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod86 yyvals = yybadprod 86 yyvals;
private yyprod87 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod87 yyvals = yybadprod 87 yyvals;
private yyprod88 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod88 yyvals = yybadprod 88 yyvals;
private yyprod89 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod89 yyvals = yybadprod 89 yyvals;
private yyprod90 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod90 yyvals = yybadprod 90 yyvals;
private yyprod91 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod91 yyvals = yybadprod 91 yyvals;
private yyprod92 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod92 yyvals = yybadprod 92 yyvals;
private yyprod93 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod93 yyvals = yybadprod 93 yyvals;
private yyprod94 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod94 yyvals = yybadprod 94 yyvals;
private yyprod95 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod95 yyvals = yybadprod 95 yyvals;
private yyprod96 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod96 yyvals = yybadprod 96 yyvals;
private yyprod97 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod97 yyvals = yybadprod 97 yyvals;
private yyprod98 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod98 yyvals = yybadprod 98 yyvals;
private yyprod99 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod99 yyvals = yybadprod 99 yyvals;
private yyprod100 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod100 yyvals = yybadprod 100 yyvals;
private yyprod101 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod101 yyvals = yybadprod 101 yyvals;
private yyprod102 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod102 yyvals = yybadprod 102 yyvals;
private yyprod103 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod103 yyvals = yybadprod 103 yyvals;
private yyprod104 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod104 yyvals = yybadprod 104 yyvals;
private yyprod105 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod105 yyvals = yybadprod 105 yyvals;
private yyprod106 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod106 yyvals = yybadprod 106 yyvals;
private yyprod107 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod107 yyvals = yybadprod 107 yyvals;
private yyprod108 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod108 yyvals = yybadprod 108 yyvals;
private yyprod109 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod109 yyvals = yybadprod 109 yyvals;
private yyprod110 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTjtoken (yy1), yyvs);
private yyprod110 yyvals = yybadprod 110 yyvals;
private yyprod111 ((_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce111 yy1}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod111 yyvals = yybadprod 111 yyvals;
private yyprod112 ((_, (YYNTjtokens yy2)):(_, (YYNTjtoken yy1)):yyvs) =  do { let {!yyr = reduce112 yy1 yy2}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod112 yyvals = yybadprod 112 yyvals;
private yyprod113 ((_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce113 yy1 yy2 yy3}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod113 yyvals = yybadprod 113 yyvals;
private yyprod114 ((_, (YYNTjtokens yy4)):(_, (YYTok yy3)):(_, (YYNTjtokens yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce114 yy1 yy2 yy3 yy4}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod114 yyvals = yybadprod 114 yyvals;
private yyprod115 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce115 yy1 yy2}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod115 yyvals = yybadprod 115 yyvals;
private yyprod116 ((_, (YYNTjtokens yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce116 yy1 yy2 yy3}; YYM.return (YYNTjtokens yyr, yyvs)};
private yyprod116 yyvals = yybadprod 116 yyvals;
private yyprod117 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce117 yy1}; YYM.return (YYNTdocumentation yyr, yyvs)};
private yyprod117 yyvals = yybadprod 117 yyvals;
private yyprod118 ((_, (YYNTtypedef yy1)):yyvs) =  do { let {!yyr = reduce118 yy1}; YYM.return (YYNTpublicdefinition yyr, yyvs)};
private yyprod118 yyvals = yybadprod 118 yyvals;
private yyprod119 ((_, (YYNTdatadef yy1)):yyvs) =  do { let {!yyr = reduce119 yy1}; YYM.return (YYNTpublicdefinition yyr, yyvs)};
private yyprod119 yyvals = yybadprod 119 yyvals;
private yyprod120 ((_, (YYNTclassdef yy1)):yyvs) =  do { let {!yyr = reduce120 yy1}; YYM.return (YYNTpublicdefinition yyr, yyvs)};
private yyprod120 yyvals = yybadprod 120 yyvals;
private yyprod121 ((_, (YYNTinstdef yy1)):yyvs) =  do { let {!yyr = reduce121 yy1}; YYM.return (YYNTpublicdefinition yyr, yyvs)};
private yyprod121 yyvals = yybadprod 121 yyvals;
private yyprod122 ((_, (YYNTderivedef yy1)):yyvs) =  do { let {!yyr = reduce122 yy1}; YYM.return (YYNTpublicdefinition yyr, yyvs)};
private yyprod122 yyvals = yybadprod 122 yyvals;
private yyprod123 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.return (YYNTpublicdefinition (yy1), yyvs);
private yyprod123 yyvals = yybadprod 123 yyvals;
private yyprod124 ((_, (YYNTdplocaldef yy1)):yyvs) = YYM.return (YYNTlocaldefs (yy1), yyvs);
private yyprod124 yyvals = yybadprod 124 yyvals;
private yyprod125 ((_, (YYNTsemicoli yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce125 yy1 yy2}; YYM.return (YYNTlocaldefs yyr, yyvs)};
private yyprod125 yyvals = yybadprod 125 yyvals;
private yyprod126 ((_, (YYNTlocaldefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTdplocaldef yy1)):yyvs) =  do { let {!yyr = reduce126 yy1 yy2 yy3}; YYM.return (YYNTlocaldefs yyr, yyvs)};
private yyprod126 yyvals = yybadprod 126 yyvals;
private yyprod127 ((_, (YYNTannotation yy1)):yyvs) = YYM.return (YYNTlocaldef (yy1), yyvs);
private yyprod127 yyvals = yybadprod 127 yyvals;
private yyprod128 ((_, (YYNTnativedef yy1)):yyvs) =  do { let {!yyr = reduce128 yy1}; YYM.return (YYNTlocaldef yyr, yyvs)};
private yyprod128 yyvals = yybadprod 128 yyvals;
private yyprod129 ((_, (YYNTfundef yy1)):yyvs) = YYM.return (YYNTlocaldef (yy1), yyvs);
private yyprod129 yyvals = yybadprod 129 yyvals;
private yyprod130 ((_, (YYNTlocaldef yy1)):yyvs) = YYM.return (YYNTplocaldef (yy1), yyvs);
private yyprod130 yyvals = yybadprod 130 yyvals;
private yyprod131 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce131 yy1 yy2}; YYM.return (YYNTplocaldef yyr, yyvs)};
private yyprod131 yyvals = yybadprod 131 yyvals;
private yyprod132 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce132 yy1 yy2}; YYM.return (YYNTplocaldef yyr, yyvs)};
private yyprod132 yyvals = yybadprod 132 yyvals;
private yyprod133 ((_, (YYNTlocaldef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce133 yy1 yy2}; YYM.return (YYNTplocaldef yyr, yyvs)};
private yyprod133 yyvals = yybadprod 133 yyvals;
private yyprod134 ((_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce134 yy1}; YYM.return (YYNTdplocaldef yyr, yyvs)};
private yyprod134 yyvals = yybadprod 134 yyvals;
private yyprod135 ((_, (YYNTdplocaldef yy2)):(_, (YYNTdocumentation yy1)):yyvs) =  do { let {!yyr = reduce135 yy1 yy2}; YYM.return (YYNTdplocaldef yyr, yyvs)};
private yyprod135 yyvals = yybadprod 135 yyvals;
private yyprod136 ((_, (YYNTplocaldef yy1)):yyvs) = YYM.return (YYNTdplocaldef (yy1), yyvs);
private yyprod136 yyvals = yybadprod 136 yyvals;
private yyprod137 ((_, (YYNTannotation yy1)):yyvs) = YYM.return (YYNTletdef (yy1), yyvs);
private yyprod137 yyvals = yybadprod 137 yyvals;
private yyprod138 ((_, (YYNTfundef yy1)):yyvs) = YYM.return (YYNTletdef (yy1), yyvs);
private yyprod138 yyvals = yybadprod 138 yyvals;
private yyprod139 ((_, (YYNTletdef yy1)):yyvs) = YYM.return (YYNTletdefs (yy1), yyvs);
private yyprod139 yyvals = yybadprod 139 yyvals;
private yyprod140 ((_, (YYNTsemicoli yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce140 yy1 yy2}; YYM.return (YYNTletdefs yyr, yyvs)};
private yyprod140 yyvals = yybadprod 140 yyvals;
private yyprod141 ((_, (YYNTletdefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTletdef yy1)):yyvs) =  do { let {!yyr = reduce141 yy1 yy2 yy3}; YYM.return (YYNTletdefs yyr, yyvs)};
private yyprod141 yyvals = yybadprod 141 yyvals;
private yyprod142 ((_, (YYNTimportliste yy3)):(_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce142 yy1 yy2 yy3}; YYM.return (YYNTimport yyr, yyvs)};
private yyprod142 yyvals = yybadprod 142 yyvals;
private yyprod143 ((_, (YYNTimportliste yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce143 yy1 yy2 yy3 yy4 yy5 ;YYM.return (YYNTimport yyr, yyvs)};
private yyprod143 yyvals = yybadprod 143 yyvals;
private yyprod144 ((_, (YYNTimportliste yy4)):(_, (YYTok yy3)):(_, (YYNTpackagename yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce144 yy1 yy2 yy3 yy4 ;YYM.return (YYNTimport yyr, yyvs)};
private yyprod144 yyvals = yybadprod 144 yyvals;
private yyprod145 yyvs =  do { let {!yyr = reduce145 }; YYM.return (YYNTimportliste yyr, yyvs)};
private yyprod146 ((_, (YYTok yy4)):(_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { yyr <- reduce146 yy1 yy2 yy3 yy4 ;YYM.return (YYNTimportliste yyr, yyvs)};
private yyprod146 yyvals = yybadprod 146 yyvals;
private yyprod147 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce147 yy1 yy2}; YYM.return (YYNTimportliste yyr, yyvs)};
private yyprod147 yyvals = yybadprod 147 yyvals;
private yyprod148 ((_, (YYTok yy3)):(_, (YYNTimportspecs yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce148 yy1 yy2 yy3}; YYM.return (YYNTimportliste yyr, yyvs)};
private yyprod148 yyvals = yybadprod 148 yyvals;
private yyprod149 ((_, (YYNTimportliste yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce149 yy1 yy2}; YYM.return (YYNTimportliste yyr, yyvs)};
private yyprod149 yyvals = yybadprod 149 yyvals;
private yyprod150 ((_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce150 yy1}; YYM.return (YYNTimportspecs yyr, yyvs)};
private yyprod150 yyvals = yybadprod 150 yyvals;
private yyprod151 ((_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce151 yy1 yy2}; YYM.return (YYNTimportspecs yyr, yyvs)};
private yyprod151 yyvals = yybadprod 151 yyvals;
private yyprod152 ((_, (YYNTimportspecs yy3)):(_, (YYTok yy2)):(_, (YYNTimportspec yy1)):yyvs) =  do { let {!yyr = reduce152 yy1 yy2 yy3}; YYM.return (YYNTimportspecs yyr, yyvs)};
private yyprod152 yyvals = yybadprod 152 yyvals;
private yyprod153 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce153 yy1}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod153 yyvals = yybadprod 153 yyvals;
private yyprod154 ((_, (YYTok yy4)):(_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce154 yy1 yy2 yy3 yy4}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod154 yyvals = yybadprod 154 yyvals;
private yyprod155 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce155 yy1 yy2 yy3}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod155 yyvals = yybadprod 155 yyvals;
private yyprod156 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce156 yy1}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod156 yyvals = yybadprod 156 yyvals;
private yyprod157 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce157 yy1}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod157 yyvals = yybadprod 157 yyvals;
private yyprod158 ((_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce158 yy1}; YYM.return (YYNTimportitem yyr, yyvs)};
private yyprod158 yyvals = yybadprod 158 yyvals;
private yyprod159 ((_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce159 yy1}; YYM.return (YYNTimportspec yyr, yyvs)};
private yyprod159 yyvals = yybadprod 159 yyvals;
private yyprod160 ((_, (YYNTalias yy2)):(_, (YYNTimportitem yy1)):yyvs) =  do { let {!yyr = reduce160 yy1 yy2}; YYM.return (YYNTimportspec yyr, yyvs)};
private yyprod160 yyvals = yybadprod 160 yyvals;
private yyprod161 ((_, (YYNTimportspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce161 yy1 yy2}; YYM.return (YYNTimportspec yyr, yyvs)};
private yyprod161 yyvals = yybadprod 161 yyvals;
private yyprod162 ((_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce162 yy1}; YYM.return (YYNTmemspec yyr, yyvs)};
private yyprod162 yyvals = yybadprod 162 yyvals;
private yyprod163 ((_, (YYNTalias yy2)):(_, (YYNTalias yy1)):yyvs) =  do { let {!yyr = reduce163 yy1 yy2}; YYM.return (YYNTmemspec yyr, yyvs)};
private yyprod163 yyvals = yybadprod 163 yyvals;
private yyprod164 ((_, (YYNTmemspec yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce164 yy1 yy2}; YYM.return (YYNTmemspec yyr, yyvs)};
private yyprod164 yyvals = yybadprod 164 yyvals;
private yyprod165 ((_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce165 yy1}; YYM.return (YYNTmemspecs yyr, yyvs)};
private yyprod165 yyvals = yybadprod 165 yyvals;
private yyprod166 ((_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce166 yy1 yy2}; YYM.return (YYNTmemspecs yyr, yyvs)};
private yyprod166 yyvals = yybadprod 166 yyvals;
private yyprod167 ((_, (YYNTmemspecs yy3)):(_, (YYTok yy2)):(_, (YYNTmemspec yy1)):yyvs) =  do { let {!yyr = reduce167 yy1 yy2 yy3}; YYM.return (YYNTmemspecs yyr, yyvs)};
private yyprod167 yyvals = yybadprod 167 yyvals;
private yyprod168 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTalias (yy1), yyvs);
private yyprod168 yyvals = yybadprod 168 yyvals;
private yyprod169 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTalias (yy1), yyvs);
private yyprod169 yyvals = yybadprod 169 yyvals;
private yyprod170 ((_, (YYNToperator yy1)):yyvs) =  do { yyr <- reduce170 yy1 ;YYM.return (YYNTalias yyr, yyvs)};
private yyprod170 yyvals = yybadprod 170 yyvals;
private yyprod171 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTvarid (yy1), yyvs);
private yyprod171 yyvals = yybadprod 171 yyvals;
private yyprod172 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTvaridkw (yy1), yyvs);
private yyprod172 yyvals = yybadprod 172 yyvals;
private yyprod173 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce173 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod173 yyvals = yybadprod 173 yyvals;
private yyprod174 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce174 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod174 yyvals = yybadprod 174 yyvals;
private yyprod175 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce175 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod175 yyvals = yybadprod 175 yyvals;
private yyprod176 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce176 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod176 yyvals = yybadprod 176 yyvals;
private yyprod177 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce177 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod177 yyvals = yybadprod 177 yyvals;
private yyprod178 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce178 yy1}; YYM.return (YYNTvaridkw yyr, yyvs)};
private yyprod178 yyvals = yybadprod 178 yyvals;
private yyprod179 ((_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce179 yy1}; YYM.return (YYNTqvarids yyr, yyvs)};
private yyprod179 yyvals = yybadprod 179 yyvals;
private yyprod180 ((_, (YYNTqvarids yy3)):(_, (YYTok yy2)):(_, (YYNTqvarop yy1)):yyvs) =  do { let {!yyr = reduce180 yy1 yy2 yy3}; YYM.return (YYNTqvarids yyr, yyvs)};
private yyprod180 yyvals = yybadprod 180 yyvals;
private yyprod181 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce181 yy1 yy2 yy3}; YYM.return (YYNTqvarid yyr, yyvs)};
private yyprod181 yyvals = yybadprod 181 yyvals;
private yyprod182 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce182 yy1 yy2}; YYM.return (YYNTqvarid yyr, yyvs)};
private yyprod182 yyvals = yybadprod 182 yyvals;
private yyprod183 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce183 yy1}; YYM.return (YYNTqvarid yyr, yyvs)};
private yyprod183 yyvals = yybadprod 183 yyvals;
private yyprod184 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce184 yy1 yy2 yy3}; YYM.return (YYNTqconid yyr, yyvs)};
private yyprod184 yyvals = yybadprod 184 yyvals;
private yyprod185 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce185 yy1 yy2}; YYM.return (YYNTqconid yyr, yyvs)};
private yyprod185 yyvals = yybadprod 185 yyvals;
private yyprod186 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce186 yy1}; YYM.return (YYNTqconid yyr, yyvs)};
private yyprod186 yyvals = yybadprod 186 yyvals;
private yyprod187 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTvarop (yy1), yyvs);
private yyprod187 yyvals = yybadprod 187 yyvals;
private yyprod188 ((_, (YYNTunop yy1)):yyvs) = YYM.return (YYNTvarop (yy1), yyvs);
private yyprod188 yyvals = yybadprod 188 yyvals;
private yyprod189 ((_, (YYNTvarop yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce189 yy1 yy2 yy3}; YYM.return (YYNTqvarop yyr, yyvs)};
private yyprod189 yyvals = yybadprod 189 yyvals;
private yyprod190 ((_, (YYNTvarop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce190 yy1 yy2}; YYM.return (YYNTqvarop yyr, yyvs)};
private yyprod190 yyvals = yybadprod 190 yyvals;
private yyprod191 ((_, (YYNTvarop yy1)):yyvs) =  do { let {!yyr = reduce191 yy1}; YYM.return (YYNTqvarop yyr, yyvs)};
private yyprod191 yyvals = yybadprod 191 yyvals;
private yyprod192 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce192 yy1}; YYM.return (YYNTqvarop yyr, yyvs)};
private yyprod192 yyvals = yybadprod 192 yyvals;
private yyprod193 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNToperator (yy1), yyvs);
private yyprod193 yyvals = yybadprod 193 yyvals;
private yyprod194 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTunop (yy1), yyvs);
private yyprod194 yyvals = yybadprod 194 yyvals;
private yyprod195 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTunop (yy1), yyvs);
private yyprod195 yyvals = yybadprod 195 yyvals;
private yyprod196 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce196 yy1 yy2 ;YYM.return (YYNTfixity yyr, yyvs)};
private yyprod196 yyvals = yybadprod 196 yyvals;
private yyprod197 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce197 yy1 yy2 ;YYM.return (YYNTfixity yyr, yyvs)};
private yyprod197 yyvals = yybadprod 197 yyvals;
private yyprod198 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce198 yy1 yy2 ;YYM.return (YYNTfixity yyr, yyvs)};
private yyprod198 yyvals = yybadprod 198 yyvals;
private yyprod199 ((_, (YYNToperator yy1)):yyvs) =  do { let {!yyr = reduce199 yy1}; YYM.return (YYNTopstring yyr, yyvs)};
private yyprod199 yyvals = yybadprod 199 yyvals;
private yyprod200 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce200 yy1}; YYM.return (YYNTopstring yyr, yyvs)};
private yyprod200 yyvals = yybadprod 200 yyvals;
private yyprod201 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce201 yy1}; YYM.return (YYNTopstring yyr, yyvs)};
private yyprod201 yyvals = yybadprod 201 yyvals;
private yyprod202 ((_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce202 yy1}; YYM.return (YYNToperators yyr, yyvs)};
private yyprod202 yyvals = yybadprod 202 yyvals;
private yyprod203 ((_, (YYNToperators yy2)):(_, (YYNTopstring yy1)):yyvs) =  do { let {!yyr = reduce203 yy1 yy2}; YYM.return (YYNToperators yyr, yyvs)};
private yyprod203 yyvals = yybadprod 203 yyvals;
private yyprod204 ((_, (YYNToperators yy2)):(_, (YYNTfixity yy1)):yyvs) =  do { let {!yyr = reduce204 yy1 yy2}; YYM.return (YYNTinfix yyr, yyvs)};
private yyprod204 yyvals = yybadprod 204 yyvals;
private yyprod205 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTannoitems yy1)):yyvs) =  do { let {!yyr = reduce205 yy1 yy2 yy3}; YYM.return (YYNTannotation yyr, yyvs)};
private yyprod205 yyvals = yybadprod 205 yyvals;
private yyprod206 ((_, (YYNTvarid yy1)):yyvs) = YYM.return (YYNTannoitem (yy1), yyvs);
private yyprod206 yyvals = yybadprod 206 yyvals;
private yyprod207 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce207 yy1 yy2 yy3 ;YYM.return (YYNTannoitem yyr, yyvs)};
private yyprod207 yyvals = yybadprod 207 yyvals;
private yyprod208 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce208 yy1 yy2 yy3}; YYM.return (YYNTannoitem yyr, yyvs)};
private yyprod208 yyvals = yybadprod 208 yyvals;
private yyprod209 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce209 yy1 yy2 yy3}; YYM.return (YYNTannoitem yyr, yyvs)};
private yyprod209 yyvals = yybadprod 209 yyvals;
private yyprod210 ((_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce210 yy1}; YYM.return (YYNTannoitems yyr, yyvs)};
private yyprod210 yyvals = yybadprod 210 yyvals;
private yyprod211 ((_, (YYNTannoitems yy3)):(_, (YYTok yy2)):(_, (YYNTannoitem yy1)):yyvs) =  do { let {!yyr = reduce211 yy1 yy2 yy3}; YYM.return (YYNTannoitems yyr, yyvs)};
private yyprod211 yyvals = yybadprod 211 yyvals;
private yyprod212 ((_, (YYNTimpurenativedef yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce212 yy1 yy2}; YYM.return (YYNTnativedef yyr, yyvs)};
private yyprod212 yyvals = yybadprod 212 yyvals;
private yyprod213 ((_, (YYNTimpurenativedef yy1)):yyvs) = YYM.return (YYNTnativedef (yy1), yyvs);
private yyprod213 yyvals = yybadprod 213 yyvals;
private yyprod214 ((_, (YYNTannoitem yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce214 yy1 yy2}; YYM.return (YYNTnativestart yyr, yyvs)};
private yyprod214 yyvals = yybadprod 214 yyvals;
private yyprod215 ((_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce215 yy1 yy2 ;YYM.return (YYNTnativestart yyr, yyvs)};
private yyprod215 yyvals = yybadprod 215 yyvals;
private yyprod216 ((_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce216 yy1 yy2}; YYM.return (YYNTnativestart yyr, yyvs)};
private yyprod216 yyvals = yybadprod 216 yyvals;
private yyprod217 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce217 yy1 yy2}; YYM.return (YYNTnativestart yyr, yyvs)};
private yyprod217 yyvals = yybadprod 217 yyvals;
private yyprod218 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce218 yy1 yy2 yy3}; YYM.return (YYNTsigex yyr, yyvs)};
private yyprod218 yyvals = yybadprod 218 yyvals;
private yyprod219 ((_, (YYNTsigma yy1)):yyvs) =  do { let {!yyr = reduce219 yy1}; YYM.return (YYNTsigex yyr, yyvs)};
private yyprod219 yyvals = yybadprod 219 yyvals;
private yyprod220 ((_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce220 yy1}; YYM.return (YYNTsigexs yyr, yyvs)};
private yyprod220 yyvals = yybadprod 220 yyvals;
private yyprod221 ((_, (YYNTsigexs yy3)):(_, (YYTok yy2)):(_, (YYNTsigex yy1)):yyvs) =  do { let {!yyr = reduce221 yy1 yy2 yy3}; YYM.return (YYNTsigexs yyr, yyvs)};
private yyprod221 yyvals = yybadprod 221 yyvals;
private yyprod222 ((_, (YYNTsigexs yy3)):(_, (YYTok yy2)):(_, (YYNTnativestart yy1)):yyvs) =  do { let {!yyr = reduce222 yy1 yy2 yy3}; YYM.return (YYNTimpurenativedef yyr, yyvs)};
private yyprod222 yyvals = yybadprod 222 yyvals;
private yyprod223 ((_, (YYNTsigexs yy4)):(_, (YYTok yy3)):(_, (YYNTnativename yy2)):(_, (YYNTnativestart yy1)):yyvs) =  do { let {!yyr = reduce223 yy1 yy2 yy3 yy4}; YYM.return (YYNTimpurenativedef yyr, yyvs)};
private yyprod223 yyvals = yybadprod 223 yyvals;
private yyprod224 ((_, (YYNTsigexs yy4)):(_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYNTnativestart yy1)):yyvs) =  do { yyr <- reduce224 yy1 yy2 yy3 yy4 ;YYM.return (YYNTimpurenativedef yyr, yyvs)};
private yyprod224 yyvals = yybadprod 224 yyvals;
private yyprod225 ((_, (YYNTsigexs yy4)):(_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYNTnativestart yy1)):yyvs) =  do { let {!yyr = reduce225 yy1 yy2 yy3 yy4}; YYM.return (YYNTimpurenativedef yyr, yyvs)};
private yyprod225 yyvals = yybadprod 225 yyvals;
private yyprod226 ((_, (YYNTboundvar yy1)):yyvs) =  do { let {!yyr = reduce226 yy1}; YYM.return (YYNTboundvars yyr, yyvs)};
private yyprod226 yyvals = yybadprod 226 yyvals;
private yyprod227 ((_, (YYNTboundvars yy2)):(_, (YYNTboundvar yy1)):yyvs) =  do { let {!yyr = reduce227 yy1 yy2}; YYM.return (YYNTboundvars yyr, yyvs)};
private yyprod227 yyvals = yybadprod 227 yyvals;
private yyprod228 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce228 yy1}; YYM.return (YYNTboundvar yyr, yyvs)};
private yyprod228 yyvals = yybadprod 228 yyvals;
private yyprod229 ((_, (YYNTforall yy1)):yyvs) = YYM.return (YYNTsigma (yy1), yyvs);
private yyprod229 yyvals = yybadprod 229 yyvals;
private yyprod230 ((_, (YYNTrho yy1)):yyvs) =  do { let {!yyr = reduce230 yy1}; YYM.return (YYNTsigma yyr, yyvs)};
private yyprod230 yyvals = yybadprod 230 yyvals;
private yyprod231 ((_, (YYNTrho yy4)):(_, (YYNTmbdot yy3)):(_, (YYNTboundvars yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce231 yy1 yy2 yy3 yy4}; YYM.return (YYNTforall yyr, yyvs)};
private yyprod231 yyvals = yybadprod 231 yyvals;
private yyprod232 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTmbdot (yy1), yyvs);
private yyprod232 yyvals = yybadprod 232 yyvals;
private yyprod233 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce233 yy1 ;YYM.return (YYNTmbdot yyr, yyvs)};
private yyprod233 yyvals = yybadprod 233 yyvals;
private yyprod234 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { yyr <- reduce234 yy1 yy2 yy3 ;YYM.return (YYNTrho yyr, yyvs)};
private yyprod234 yyvals = yybadprod 234 yyvals;
private yyprod235 ((_, (YYNTrhofun yy1)):yyvs) = YYM.return (YYNTrho (yy1), yyvs);
private yyprod235 yyvals = yybadprod 235 yyvals;
private yyprod236 ((_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce236 yy1}; YYM.return (YYNTrhofun yyr, yyvs)};
private yyprod236 yyvals = yybadprod 236 yyvals;
private yyprod237 ((_, (YYNTrhofun yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce237 yy1 yy2 yy3}; YYM.return (YYNTrhofun yyr, yyvs)};
private yyprod237 yyvals = yybadprod 237 yyvals;
private yyprod238 ((_, (YYNTtapp yy1)):yyvs) = YYM.return (YYNTtau (yy1), yyvs);
private yyprod238 yyvals = yybadprod 238 yyvals;
private yyprod239 ((_, (YYNTforall yy1)):yyvs) =  do { let {!yyr = reduce239 yy1}; YYM.return (YYNTtau yyr, yyvs)};
private yyprod239 yyvals = yybadprod 239 yyvals;
private yyprod240 ((_, (YYNTtau yy3)):(_, (YYTok yy2)):(_, (YYNTtapp yy1)):yyvs) =  do { let {!yyr = reduce240 yy1 yy2 yy3}; YYM.return (YYNTtau yyr, yyvs)};
private yyprod240 yyvals = yybadprod 240 yyvals;
private yyprod241 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce241 yy1}; YYM.return (YYNTtauSC yyr, yyvs)};
private yyprod241 yyvals = yybadprod 241 yyvals;
private yyprod242 ((_, (YYNTtauSC yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce242 yy1 yy2 yy3}; YYM.return (YYNTtauSC yyr, yyvs)};
private yyprod242 yyvals = yybadprod 242 yyvals;
private yyprod243 ((_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce243 yy1}; YYM.return (YYNTtauSB yyr, yyvs)};
private yyprod243 yyvals = yybadprod 243 yyvals;
private yyprod244 ((_, (YYNTtauSB yy3)):(_, (YYTok yy2)):(_, (YYNTtau yy1)):yyvs) =  do { let {!yyr = reduce244 yy1 yy2 yy3}; YYM.return (YYNTtauSB yyr, yyvs)};
private yyprod244 yyvals = yybadprod 244 yyvals;
private yyprod245 ((_, (YYNTsimpletypes yy1)):yyvs) =  do { let {!yyr = reduce245 yy1}; YYM.return (YYNTtapp yyr, yyvs)};
private yyprod245 yyvals = yybadprod 245 yyvals;
private yyprod246 ((_, (YYNTtyvar yy1)):yyvs) = YYM.return (YYNTsimpletype (yy1), yyvs);
private yyprod246 yyvals = yybadprod 246 yyvals;
private yyprod247 ((_, (YYNTtyname yy1)):yyvs) =  do { let {!yyr = reduce247 yy1}; YYM.return (YYNTsimpletype yyr, yyvs)};
private yyprod247 yyvals = yybadprod 247 yyvals;
private yyprod248 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce248 yy1 yy2 yy3}; YYM.return (YYNTsimpletype yyr, yyvs)};
private yyprod248 yyvals = yybadprod 248 yyvals;
private yyprod249 ((_, (YYTok yy5)):(_, (YYNTtauSC yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce249 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTsimpletype yyr, yyvs)};
private yyprod249 yyvals = yybadprod 249 yyvals;
private yyprod250 ((_, (YYTok yy5)):(_, (YYNTtauSB yy4)):(_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce250 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTsimpletype yyr, yyvs)};
private yyprod250 yyvals = yybadprod 250 yyvals;
private yyprod251 ((_, (YYTok yy3)):(_, (YYNTtau yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce251 yy1 yy2 yy3}; YYM.return (YYNTsimpletype yyr, yyvs)};
private yyprod251 yyvals = yybadprod 251 yyvals;
private yyprod252 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce252 yy1}; YYM.return (YYNTtyvar yyr, yyvs)};
private yyprod252 yyvals = yybadprod 252 yyvals;
private yyprod253 ((_, (YYTok yy5)):(_, (YYNTkind yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce253 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTtyvar yyr, yyvs)};
private yyprod253 yyvals = yybadprod 253 yyvals;
private yyprod254 ((_, (YYNTqconid yy1)):yyvs) = YYM.return (YYNTtyname (yy1), yyvs);
private yyprod254 yyvals = yybadprod 254 yyvals;
private yyprod255 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce255 yy1 yy2}; YYM.return (YYNTtyname yyr, yyvs)};
private yyprod255 yyvals = yybadprod 255 yyvals;
private yyprod256 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce256 yy1 yy2}; YYM.return (YYNTtyname yyr, yyvs)};
private yyprod256 yyvals = yybadprod 256 yyvals;
private yyprod257 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce257 yy1 yy2 yy3}; YYM.return (YYNTtyname yyr, yyvs)};
private yyprod257 yyvals = yybadprod 257 yyvals;
private yyprod258 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce258 yy1 yy2 yy3}; YYM.return (YYNTtyname yyr, yyvs)};
private yyprod258 yyvals = yybadprod 258 yyvals;
private yyprod259 ((_, (YYNTkind yy3)):(_, (YYTok yy2)):(_, (YYNTsimplekind yy1)):yyvs) =  do { let {!yyr = reduce259 yy1 yy2 yy3}; YYM.return (YYNTkind yyr, yyvs)};
private yyprod259 yyvals = yybadprod 259 yyvals;
private yyprod260 ((_, (YYNTsimplekind yy1)):yyvs) = YYM.return (YYNTkind (yy1), yyvs);
private yyprod260 yyvals = yybadprod 260 yyvals;
private yyprod261 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce261 yy1 ;YYM.return (YYNTsimplekind yyr, yyvs)};
private yyprod261 yyvals = yybadprod 261 yyvals;
private yyprod262 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce262 yy1 ;YYM.return (YYNTsimplekind yyr, yyvs)};
private yyprod262 yyvals = yybadprod 262 yyvals;
private yyprod263 ((_, (YYTok yy3)):(_, (YYNTkind yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce263 yy1 yy2 yy3}; YYM.return (YYNTsimplekind yyr, yyvs)};
private yyprod263 yyvals = yybadprod 263 yyvals;
private yyprod264 ((_, (YYNTwheredef yy4)):(_, (YYNTtyvar yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce264 yy1 yy2 yy3 yy4}; YYM.return (YYNTclassdef yyr, yyvs)};
private yyprod264 yyvals = yybadprod 264 yyvals;
private yyprod265 ((_, (YYNTwheredef yy6)):(_, (YYNTvarid yy5)):(_, (YYTok yy4)):(_, (YYNTtau yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce265 yy1 yy2 yy3 yy4 yy5 yy6 ;YYM.return (YYNTclassdef yyr, yyvs)};
private yyprod265 yyvals = yybadprod 265 yyvals;
private yyprod266 ((_, (YYNTwheredef yy4)):(_, (YYNTsigma yy3)):(_, (YYNTtyname yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce266 yy1 yy2 yy3 yy4}; YYM.return (YYNTinstdef yyr, yyvs)};
private yyprod266 yyvals = yybadprod 266 yyvals;
private yyprod267 ((_, (YYNTsigma yy3)):(_, (YYNTtyname yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce267 yy1 yy2 yy3}; YYM.return (YYNTderivedef yyr, yyvs)};
private yyprod267 yyvals = yybadprod 267 yyvals;
private yyprod268 ((_, (YYNTwheredef yy2)):(_, (YYNTdatainit yy1)):yyvs) =  do { let {!yyr = reduce268 yy1 yy2}; YYM.return (YYNTdatadef yyr, yyvs)};
private yyprod268 yyvals = yybadprod 268 yyvals;
private yyprod269 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce269 yy1 yy2}; YYM.return (YYNTnativepur yyr, yyvs)};
private yyprod269 yyvals = yybadprod 269 yyvals;
private yyprod270 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce270 yy1 yy2}; YYM.return (YYNTnativepur yyr, yyvs)};
private yyprod270 yyvals = yybadprod 270 yyvals;
private yyprod271 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce271 yy1}; YYM.return (YYNTnativepur yyr, yyvs)};
private yyprod271 yyvals = yybadprod 271 yyvals;
private yyprod272 ((_, (YYNTnativename yy5)):(_, (YYNTnativepur yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce272 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTdatainit yyr, yyvs)};
private yyprod272 yyvals = yybadprod 272 yyvals;
private yyprod273 ((_, (YYNTnativename yy6)):(_, (YYNTnativepur yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce273 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTdatainit yyr, yyvs)};
private yyprod273 yyvals = yybadprod 273 yyvals;
private yyprod274 ((_, (YYNTdalts yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce274 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTdatainit yyr, yyvs)};
private yyprod274 yyvals = yybadprod 274 yyvals;
private yyprod275 ((_, (YYNTdalts yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce275 yy1 yy2 yy3 yy4}; YYM.return (YYNTdatainit yyr, yyvs)};
private yyprod275 yyvals = yybadprod 275 yyvals;
private yyprod276 ((_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce276 yy1}; YYM.return (YYNTdvars yyr, yyvs)};
private yyprod276 yyvals = yybadprod 276 yyvals;
private yyprod277 ((_, (YYNTdvars yy2)):(_, (YYNTtyvar yy1)):yyvs) =  do { let {!yyr = reduce277 yy1 yy2}; YYM.return (YYNTdvars yyr, yyvs)};
private yyprod277 yyvals = yybadprod 277 yyvals;
private yyprod278 ((_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce278 yy1}; YYM.return (YYNTdalts yyr, yyvs)};
private yyprod278 yyvals = yybadprod 278 yyvals;
private yyprod279 ((_, (YYNTdalts yy3)):(_, (YYTok yy2)):(_, (YYNTdalt yy1)):yyvs) =  do { let {!yyr = reduce279 yy1 yy2 yy3}; YYM.return (YYNTdalts yyr, yyvs)};
private yyprod279 yyvals = yybadprod 279 yyvals;
private yyprod280 ((_, (YYNTvisdalt yy1)):yyvs) = YYM.return (YYNTdalt (yy1), yyvs);
private yyprod280 yyvals = yybadprod 280 yyvals;
private yyprod281 ((_, (YYTok yy2)):(_, (YYNTvisdalt yy1)):yyvs) =  do { let {!yyr = reduce281 yy1 yy2}; YYM.return (YYNTdalt yyr, yyvs)};
private yyprod281 yyvals = yybadprod 281 yyvals;
private yyprod282 ((_, (YYNTvisdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce282 yy1 yy2}; YYM.return (YYNTdalt yyr, yyvs)};
private yyprod282 yyvals = yybadprod 282 yyvals;
private yyprod283 ((_, (YYNTstrictdalt yy1)):yyvs) = YYM.return (YYNTvisdalt (yy1), yyvs);
private yyprod283 yyvals = yybadprod 283 yyvals;
private yyprod284 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce284 yy1 yy2}; YYM.return (YYNTvisdalt yyr, yyvs)};
private yyprod284 yyvals = yybadprod 284 yyvals;
private yyprod285 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce285 yy1 yy2}; YYM.return (YYNTvisdalt yyr, yyvs)};
private yyprod285 yyvals = yybadprod 285 yyvals;
private yyprod286 ((_, (YYNTstrictdalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce286 yy1 yy2}; YYM.return (YYNTvisdalt yyr, yyvs)};
private yyprod286 yyvals = yybadprod 286 yyvals;
private yyprod287 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce287 yy1 yy2}; YYM.return (YYNTstrictdalt yyr, yyvs)};
private yyprod287 yyvals = yybadprod 287 yyvals;
private yyprod288 ((_, (YYNTsimpledalt yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce288 yy1 yy2}; YYM.return (YYNTstrictdalt yyr, yyvs)};
private yyprod288 yyvals = yybadprod 288 yyvals;
private yyprod289 ((_, (YYNTsimpledalt yy1)):yyvs) = YYM.return (YYNTstrictdalt (yy1), yyvs);
private yyprod289 yyvals = yybadprod 289 yyvals;
private yyprod290 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce290 yy1}; YYM.return (YYNTsimpledalt yyr, yyvs)};
private yyprod290 yyvals = yybadprod 290 yyvals;
private yyprod291 ((_, (YYTok yy4)):(_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce291 yy1 yy2 yy3 yy4}; YYM.return (YYNTsimpledalt yyr, yyvs)};
private yyprod291 yyvals = yybadprod 291 yyvals;
private yyprod292 ((_, (YYNTcontypes yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce292 yy1 yy2}; YYM.return (YYNTsimpledalt yyr, yyvs)};
private yyprod292 yyvals = yybadprod 292 yyvals;
private yyprod293 ((_, (YYNTsimpletypes yy1)):yyvs) =  do { yyr <- reduce293 yy1 ;YYM.return (YYNTcontypes yyr, yyvs)};
private yyprod293 yyvals = yybadprod 293 yyvals;
private yyprod294 ((_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce294 yy1}; YYM.return (YYNTsimpletypes yyr, yyvs)};
private yyprod294 yyvals = yybadprod 294 yyvals;
private yyprod295 ((_, (YYNTsimpletypes yy2)):(_, (YYNTsimpletype yy1)):yyvs) =  do { let {!yyr = reduce295 yy1 yy2}; YYM.return (YYNTsimpletypes yyr, yyvs)};
private yyprod295 yyvals = yybadprod 295 yyvals;
private yyprod296 ((_, (YYNTconfld yy1)):yyvs) = YYM.return (YYNTconflds (yy1), yyvs);
private yyprod296 yyvals = yybadprod 296 yyvals;
private yyprod297 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce297 yy1 yy2}; YYM.return (YYNTconflds yyr, yyvs)};
private yyprod297 yyvals = yybadprod 297 yyvals;
private yyprod298 ((_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce298 yy1 yy2}; YYM.return (YYNTconflds yyr, yyvs)};
private yyprod298 yyvals = yybadprod 298 yyvals;
private yyprod299 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce299 yy1 yy2 yy3}; YYM.return (YYNTconflds yyr, yyvs)};
private yyprod299 yyvals = yybadprod 299 yyvals;
private yyprod300 ((_, (YYNTconflds yy3)):(_, (YYTok yy2)):(_, (YYNTconfld yy1)):yyvs) =  do { let {!yyr = reduce300 yy1 yy2 yy3}; YYM.return (YYNTconflds yyr, yyvs)};
private yyprod300 yyvals = yybadprod 300 yyvals;
private yyprod301 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTfldids yy1)):yyvs) =  do { let {!yyr = reduce301 yy1 yy2 yy3}; YYM.return (YYNTconfld yyr, yyvs)};
private yyprod301 yyvals = yybadprod 301 yyvals;
private yyprod302 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYNTfldids yy2)):(_, (YYNTdocs yy1)):yyvs) =  do { let {!yyr = reduce302 yy1 yy2 yy3 yy4}; YYM.return (YYNTconfld yyr, yyvs)};
private yyprod302 yyvals = yybadprod 302 yyvals;
private yyprod303 ((_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce303 yy1}; YYM.return (YYNTfldids yyr, yyvs)};
private yyprod303 yyvals = yybadprod 303 yyvals;
private yyprod304 ((_, (YYNTfldids yy3)):(_, (YYTok yy2)):(_, (YYNTfldid yy1)):yyvs) =  do { let {!yyr = reduce304 yy1 yy2 yy3}; YYM.return (YYNTfldids yyr, yyvs)};
private yyprod304 yyvals = yybadprod 304 yyvals;
private yyprod305 ((_, (YYNTstrictfldid yy1)):yyvs) = YYM.return (YYNTfldid (yy1), yyvs);
private yyprod305 yyvals = yybadprod 305 yyvals;
private yyprod306 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce306 yy1 yy2}; YYM.return (YYNTfldid yyr, yyvs)};
private yyprod306 yyvals = yybadprod 306 yyvals;
private yyprod307 ((_, (YYNTstrictfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce307 yy1 yy2}; YYM.return (YYNTfldid yyr, yyvs)};
private yyprod307 yyvals = yybadprod 307 yyvals;
private yyprod308 ((_, (YYNTplainfldid yy1)):yyvs) = YYM.return (YYNTstrictfldid (yy1), yyvs);
private yyprod308 yyvals = yybadprod 308 yyvals;
private yyprod309 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce309 yy1 yy2}; YYM.return (YYNTstrictfldid yyr, yyvs)};
private yyprod309 yyvals = yybadprod 309 yyvals;
private yyprod310 ((_, (YYNTplainfldid yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce310 yy1 yy2}; YYM.return (YYNTstrictfldid yyr, yyvs)};
private yyprod310 yyvals = yybadprod 310 yyvals;
private yyprod311 ((_, (YYNTvarid yy1)):yyvs) =  do { yyr <- reduce311 yy1 ;YYM.return (YYNTplainfldid yyr, yyvs)};
private yyprod311 yyvals = yybadprod 311 yyvals;
private yyprod312 ((_, (YYNTsigma yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce312 yy1 yy2 yy3 yy4}; YYM.return (YYNTtypedef yyr, yyvs)};
private yyprod312 yyvals = yybadprod 312 yyvals;
private yyprod313 ((_, (YYNTsigma yy5)):(_, (YYTok yy4)):(_, (YYNTdvars yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce313 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTtypedef yyr, yyvs)};
private yyprod313 yyvals = yybadprod 313 yyvals;
private yyprod314 yyvs =  do { let {!yyr = reduce314 }; YYM.return (YYNTwheredef yyr, yyvs)};
private yyprod315 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce315 yy1 yy2 yy3}; YYM.return (YYNTwheredef yyr, yyvs)};
private yyprod315 yyvals = yybadprod 315 yyvals;
private yyprod316 ((_, (YYTok yy4)):(_, (YYNTlocaldefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce316 yy1 yy2 yy3 yy4}; YYM.return (YYNTwheredef yyr, yyvs)};
private yyprod316 yyvals = yybadprod 316 yyvals;
private yyprod317 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce317 yy1 yy2 yy3}; YYM.return (YYNTwherelet yyr, yyvs)};
private yyprod317 yyvals = yybadprod 317 yyvals;
private yyprod318 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce318 yy1 yy2 yy3 yy4}; YYM.return (YYNTwherelet yyr, yyvs)};
private yyprod318 yyvals = yybadprod 318 yyvals;
private yyprod319 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce319 yy1 yy2 yy3}; YYM.return (YYNTfundef yyr, yyvs)};
private yyprod319 yyvals = yybadprod 319 yyvals;
private yyprod320 ((_, (YYNTguards yy2)):(_, (YYNTfunhead yy1)):yyvs) =  do { let {!yyr = reduce320 yy1 yy2}; YYM.return (YYNTfundef yyr, yyvs)};
private yyprod320 yyvals = yybadprod 320 yyvals;
private yyprod321 ((_, (YYNTwherelet yy2)):(_, (YYNTfundef yy1)):yyvs) =  do { yyr <- reduce321 yy1 yy2 ;YYM.return (YYNTfundef yyr, yyvs)};
private yyprod321 yyvals = yybadprod 321 yyvals;
private yyprod322 ((_, (YYNTbinex yy1)):yyvs) =  do { yyr <- reduce322 yy1 ;YYM.return (YYNTfunhead yyr, yyvs)};
private yyprod322 yyvals = yybadprod 322 yyvals;
private yyprod323 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce323 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod323 yyvals = yybadprod 323 yyvals;
private yyprod324 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce324 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod324 yyvals = yybadprod 324 yyvals;
private yyprod325 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce325 yy1 ;YYM.return (YYNTliteral yyr, yyvs)};
private yyprod325 yyvals = yybadprod 325 yyvals;
private yyprod326 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce326 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod326 yyvals = yybadprod 326 yyvals;
private yyprod327 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce327 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod327 yyvals = yybadprod 327 yyvals;
private yyprod328 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce328 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod328 yyvals = yybadprod 328 yyvals;
private yyprod329 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce329 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod329 yyvals = yybadprod 329 yyvals;
private yyprod330 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce330 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod330 yyvals = yybadprod 330 yyvals;
private yyprod331 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce331 yy1}; YYM.return (YYNTliteral yyr, yyvs)};
private yyprod331 yyvals = yybadprod 331 yyvals;
private yyprod332 ((_, (YYTok yy1)):yyvs) =  do { yyr <- reduce332 yy1 ;YYM.return (YYNTliteral yyr, yyvs)};
private yyprod332 yyvals = yybadprod 332 yyvals;
private yyprod333 ((_, (YYNTexpr yy1)):yyvs) = YYM.return (YYNTpattern (yy1), yyvs);
private yyprod333 yyvals = yybadprod 333 yyvals;
private yyprod334 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTaeq (yy1), yyvs);
private yyprod334 yyvals = yybadprod 334 yyvals;
private yyprod335 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTaeq (yy1), yyvs);
private yyprod335 yyvals = yybadprod 335 yyvals;
private yyprod336 ((_, (YYNTgqual yy1)):yyvs) = YYM.return (YYNTlcqual (yy1), yyvs);
private yyprod336 yyvals = yybadprod 336 yyvals;
private yyprod337 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { yyr <- reduce337 yy1 yy2 yy3 ;YYM.return (YYNTlcqual yyr, yyvs)};
private yyprod337 yyvals = yybadprod 337 yyvals;
private yyprod338 ((_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce338 yy1 yy2 yy3 yy4}; YYM.return (YYNTlcqual yyr, yyvs)};
private yyprod338 yyvals = yybadprod 338 yyvals;
private yyprod339 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce339 yy1}; YYM.return (YYNTlcquals yyr, yyvs)};
private yyprod339 yyvals = yybadprod 339 yyvals;
private yyprod340 ((_, (YYNTlcquals yy3)):(_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce340 yy1 yy2 yy3}; YYM.return (YYNTlcquals yyr, yyvs)};
private yyprod340 yyvals = yybadprod 340 yyvals;
private yyprod341 ((_, (YYTok yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce341 yy1 yy2}; YYM.return (YYNTlcquals yyr, yyvs)};
private yyprod341 yyvals = yybadprod 341 yyvals;
private yyprod342 ((_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce342 yy1}; YYM.return (YYNTdodefs yyr, yyvs)};
private yyprod342 yyvals = yybadprod 342 yyvals;
private yyprod343 ((_, (YYNTsemicoli yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce343 yy1 yy2}; YYM.return (YYNTdodefs yyr, yyvs)};
private yyprod343 yyvals = yybadprod 343 yyvals;
private yyprod344 ((_, (YYNTdodefs yy3)):(_, (YYNTsemicoli yy2)):(_, (YYNTlcqual yy1)):yyvs) =  do { let {!yyr = reduce344 yy1 yy2 yy3}; YYM.return (YYNTdodefs yyr, yyvs)};
private yyprod344 yyvals = yybadprod 344 yyvals;
private yyprod345 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce345 yy1}; YYM.return (YYNTgqual yyr, yyvs)};
private yyprod345 yyvals = yybadprod 345 yyvals;
private yyprod346 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce346 yy1 yy2 yy3}; YYM.return (YYNTgqual yyr, yyvs)};
private yyprod346 yyvals = yybadprod 346 yyvals;
private yyprod347 ((_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce347 yy1}; YYM.return (YYNTgquals yyr, yyvs)};
private yyprod347 yyvals = yybadprod 347 yyvals;
private yyprod348 ((_, (YYNTgquals yy3)):(_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce348 yy1 yy2 yy3}; YYM.return (YYNTgquals yyr, yyvs)};
private yyprod348 yyvals = yybadprod 348 yyvals;
private yyprod349 ((_, (YYTok yy2)):(_, (YYNTgqual yy1)):yyvs) =  do { let {!yyr = reduce349 yy1 yy2}; YYM.return (YYNTgquals yyr, yyvs)};
private yyprod349 yyvals = yybadprod 349 yyvals;
private yyprod350 ((_, (YYNTexpr yy4)):(_, (YYNTaeq yy3)):(_, (YYNTgquals yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce350 yy1 yy2 yy3 yy4}; YYM.return (YYNTguard yyr, yyvs)};
private yyprod350 yyvals = yybadprod 350 yyvals;
private yyprod351 ((_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce351 yy1}; YYM.return (YYNTguards yyr, yyvs)};
private yyprod351 yyvals = yybadprod 351 yyvals;
private yyprod352 ((_, (YYNTguards yy2)):(_, (YYNTguard yy1)):yyvs) =  do { let {!yyr = reduce352 yy1 yy2}; YYM.return (YYNTguards yyr, yyvs)};
private yyprod352 yyvals = yybadprod 352 yyvals;
private yyprod353 ((_, (YYNTexpr yy3)):(_, (YYNTaeq yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce353 yy1 yy2 yy3}; YYM.return (YYNTcalt yyr, yyvs)};
private yyprod353 yyvals = yybadprod 353 yyvals;
private yyprod354 ((_, (YYNTguards yy2)):(_, (YYNTpattern yy1)):yyvs) =  do { let {!yyr = reduce354 yy1 yy2}; YYM.return (YYNTcalt yyr, yyvs)};
private yyprod354 yyvals = yybadprod 354 yyvals;
private yyprod355 ((_, (YYNTwherelet yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce355 yy1 yy2}; YYM.return (YYNTcalt yyr, yyvs)};
private yyprod355 yyvals = yybadprod 355 yyvals;
private yyprod356 ((_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce356 yy1}; YYM.return (YYNTcalts yyr, yyvs)};
private yyprod356 yyvals = yybadprod 356 yyvals;
private yyprod357 ((_, (YYNTcalts yy3)):(_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce357 yy1 yy2 yy3}; YYM.return (YYNTcalts yyr, yyvs)};
private yyprod357 yyvals = yybadprod 357 yyvals;
private yyprod358 ((_, (YYTok yy2)):(_, (YYNTcalt yy1)):yyvs) =  do { let {!yyr = reduce358 yy1 yy2}; YYM.return (YYNTcalts yyr, yyvs)};
private yyprod358 yyvals = yybadprod 358 yyvals;
private yyprod359 ((_, (YYNTlambda yy3)):(_, (YYNTpattern yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce359 yy1 yy2 yy3}; YYM.return (YYNTlambda yyr, yyvs)};
private yyprod359 yyvals = yybadprod 359 yyvals;
private yyprod360 ((_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYNTpattern yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce360 yy1 yy2 yy3 yy4}; YYM.return (YYNTlambda yyr, yyvs)};
private yyprod360 yyvals = yybadprod 360 yyvals;
private yyprod361 ((_, (YYNTsigma yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce361 yy1 yy2 yy3}; YYM.return (YYNTexpr yyr, yyvs)};
private yyprod361 yyvals = yybadprod 361 yyvals;
private yyprod362 ((_, (YYNTbinex yy1)):yyvs) = YYM.return (YYNTexpr (yy1), yyvs);
private yyprod362 yyvals = yybadprod 362 yyvals;
private yyprod363 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce363 yy1 yy2}; YYM.return (YYNTthenx yyr, yyvs)};
private yyprod363 yyvals = yybadprod 363 yyvals;
private yyprod364 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTthenx (yy1), yyvs);
private yyprod364 yyvals = yybadprod 364 yyvals;
private yyprod365 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce365 yy1 yy2}; YYM.return (YYNTelsex yyr, yyvs)};
private yyprod365 yyvals = yybadprod 365 yyvals;
private yyprod366 ((_, (YYTok yy1)):yyvs) = YYM.return (YYNTelsex (yy1), yyvs);
private yyprod366 yyvals = yybadprod 366 yyvals;
private yyprod367 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce367 yy1 yy2 yy3}; YYM.return (YYNTbinex yyr, yyvs)};
private yyprod367 ((_, (YYNTbinex yy1)):yyvs) = YYM.return (YYNTbinex (yy1), yyvs);
private yyprod367 yyvals = yybadprod 367 yyvals;
private yyprod368 ((_, (YYNTbinex yy3)):(_, (YYTok yy2)):(_, (YYNTbinex yy1)):yyvs) =  do { let {!yyr = reduce368 yy1 yy2 yy3}; YYM.return (YYNTbinex yyr, yyvs)};
private yyprod368 ((_, (YYNTbinex yy1)):yyvs) = YYM.return (YYNTbinex (yy1), yyvs);
private yyprod368 yyvals = yybadprod 368 yyvals;
private yyprod369 ((_, (YYNTtopex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce369 yy1 yy2}; YYM.return (YYNTbinex yyr, yyvs)};
private yyprod369 yyvals = yybadprod 369 yyvals;
private yyprod370 ((_, (YYNTtopex yy1)):yyvs) = YYM.return (YYNTbinex (yy1), yyvs);
private yyprod370 yyvals = yybadprod 370 yyvals;
private yyprod371 ((_, (YYNTexpr yy6)):(_, (YYNTelsex yy5)):(_, (YYNTexpr yy4)):(_, (YYNTthenx yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce371 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTtopex yyr, yyvs)};
private yyprod371 yyvals = yybadprod 371 yyvals;
private yyprod372 ((_, (YYTok yy6)):(_, (YYNTcalts yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce372 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTtopex yyr, yyvs)};
private yyprod372 yyvals = yybadprod 372 yyvals;
private yyprod373 ((_, (YYNTexpr yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYNTletdefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce373 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTtopex yyr, yyvs)};
private yyprod373 yyvals = yybadprod 373 yyvals;
private yyprod374 ((_, (YYNTlambda yy1)):yyvs) = YYM.return (YYNTtopex (yy1), yyvs);
private yyprod374 yyvals = yybadprod 374 yyvals;
private yyprod375 ((_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce375 yy1}; YYM.return (YYNTtopex yyr, yyvs)};
private yyprod375 yyvals = yybadprod 375 yyvals;
private yyprod376 ((_, (YYNTunex yy1)):yyvs) = YYM.return (YYNTappex (yy1), yyvs);
private yyprod376 yyvals = yybadprod 376 yyvals;
private yyprod377 ((_, (YYNTunex yy2)):(_, (YYNTappex yy1)):yyvs) =  do { let {!yyr = reduce377 yy1 yy2}; YYM.return (YYNTappex yyr, yyvs)};
private yyprod377 yyvals = yybadprod 377 yyvals;
private yyprod378 ((_, (YYNTprimary yy1)):yyvs) = YYM.return (YYNTunex (yy1), yyvs);
private yyprod378 yyvals = yybadprod 378 yyvals;
private yyprod379 ((_, (YYNTunex yy2)):(_, (YYNTunop yy1)):yyvs) =  do { let {!yyr = reduce379 yy1 yy2}; YYM.return (YYNTunex yyr, yyvs)};
private yyprod379 yyvals = yybadprod 379 yyvals;
private yyprod380 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce380 yy1}; YYM.return (YYNTqualifiers yyr, yyvs)};
private yyprod380 yyvals = yybadprod 380 yyvals;
private yyprod381 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce381 yy1 yy2}; YYM.return (YYNTqualifiers yyr, yyvs)};
private yyprod381 yyvals = yybadprod 381 yyvals;
private yyprod382 ((_, (YYNTterm yy1)):yyvs) = YYM.return (YYNTprimary (yy1), yyvs);
private yyprod382 yyvals = yybadprod 382 yyvals;
private yyprod383 ((_, (YYTok yy4)):(_, (YYNTdodefs yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce383 yy1 yy2 yy3 yy4 ;YYM.return (YYNTprimary yyr, yyvs)};
private yyprod383 yyvals = yybadprod 383 yyvals;
private yyprod384 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce384 yy1 yy2 yy3}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod384 yyvals = yybadprod 384 yyvals;
private yyprod385 ((_, (YYNToperator yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { yyr <- reduce385 yy1 yy2 yy3 ;YYM.return (YYNTprimary yyr, yyvs)};
private yyprod385 yyvals = yybadprod 385 yyvals;
private yyprod386 ((_, (YYNTunop yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce386 yy1 yy2 yy3}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod386 yyvals = yybadprod 386 yyvals;
private yyprod387 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce387 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod387 yyvals = yybadprod 387 yyvals;
private yyprod388 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce388 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod388 yyvals = yybadprod 388 yyvals;
private yyprod389 ((_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce389 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod389 yyvals = yybadprod 389 yyvals;
private yyprod390 ((_, (YYTok yy4)):(_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTqualifiers yy1)):yyvs) =  do { let {!yyr = reduce390 yy1 yy2 yy3 yy4}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod390 yyvals = yybadprod 390 yyvals;
private yyprod391 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce391 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod391 yyvals = yybadprod 391 yyvals;
private yyprod392 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce392 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod392 yyvals = yybadprod 392 yyvals;
private yyprod393 ((_, (YYTok yy6)):(_, (YYTok yy5)):(_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce393 yy1 yy2 yy3 yy4 yy5 yy6}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod393 yyvals = yybadprod 393 yyvals;
private yyprod394 ((_, (YYTok yy5)):(_, (YYNTgetfields yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce394 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod394 yyvals = yybadprod 394 yyvals;
private yyprod395 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTprimary yy1)):yyvs) =  do { let {!yyr = reduce395 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTprimary yyr, yyvs)};
private yyprod395 yyvals = yybadprod 395 yyvals;
private yyprod396 ((_, (YYNTqvarid yy1)):yyvs) =  do { let {!yyr = reduce396 yy1}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod396 yyvals = yybadprod 396 yyvals;
private yyprod397 ((_, (YYNTliteral yy1)):yyvs) = YYM.return (YYNTterm (yy1), yyvs);
private yyprod397 yyvals = yybadprod 397 yyvals;
private yyprod398 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce398 yy1}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod398 yyvals = yybadprod 398 yyvals;
private yyprod399 ((_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce399 yy1}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod399 yyvals = yybadprod 399 yyvals;
private yyprod400 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce400 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod400 yyvals = yybadprod 400 yyvals;
private yyprod401 ((_, (YYTok yy4)):(_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTqconid yy1)):yyvs) =  do { let {!yyr = reduce401 yy1 yy2 yy3 yy4}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod401 yyvals = yybadprod 401 yyvals;
private yyprod402 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce402 yy1 yy2}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod402 yyvals = yybadprod 402 yyvals;
private yyprod403 ((_, (YYTok yy3)):(_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce403 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod403 yyvals = yybadprod 403 yyvals;
private yyprod404 ((_, (YYTok yy3)):(_, (YYNTunop yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce404 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod404 yyvals = yybadprod 404 yyvals;
private yyprod405 ((_, (YYTok yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce405 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod405 yyvals = yybadprod 405 yyvals;
private yyprod406 ((_, (YYTok yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce406 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod406 yyvals = yybadprod 406 yyvals;
private yyprod407 ((_, (YYTok yy4)):(_, (YYNTexpr yy3)):(_, (YYNToperator yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce407 yy1 yy2 yy3 yy4}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod407 yyvals = yybadprod 407 yyvals;
private yyprod408 ((_, (YYTok yy4)):(_, (YYNToperator yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce408 yy1 yy2 yy3 yy4}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod408 yyvals = yybadprod 408 yyvals;
private yyprod409 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTbinex yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce409 yy1 yy2 yy3 yy4}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod409 yyvals = yybadprod 409 yyvals;
private yyprod410 ((_, (YYTok yy5)):(_, (YYNTexprSC yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce410 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod410 yyvals = yybadprod 410 yyvals;
private yyprod411 ((_, (YYTok yy5)):(_, (YYNTexprSS yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce411 yy1 yy2 yy3 yy4 yy5}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod411 yyvals = yybadprod 411 yyvals;
private yyprod412 ((_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce412 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod412 yyvals = yybadprod 412 yyvals;
private yyprod413 ((_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce413 yy1 yy2}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod413 yyvals = yybadprod 413 yyvals;
private yyprod414 ((_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce414 yy1 yy2 yy3}; YYM.return (YYNTterm yyr, yyvs)};
private yyprod414 yyvals = yybadprod 414 yyvals;
private yyprod415 ((_, (YYTok yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce415 yy1 yy2 yy3 yy4 ;YYM.return (YYNTterm yyr, yyvs)};
private yyprod415 yyvals = yybadprod 415 yyvals;
private yyprod416 ((_, (YYTok yy5)):(_, (YYNTexpr yy4)):(_, (YYTok yy3)):(_, (YYNTexprSC yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce416 yy1 yy2 yy3 yy4 yy5 ;YYM.return (YYNTterm yyr, yyvs)};
private yyprod416 yyvals = yybadprod 416 yyvals;
private yyprod417 ((_, (YYTok yy5)):(_, (YYNTlcquals yy4)):(_, (YYTok yy3)):(_, (YYNTexpr yy2)):(_, (YYTok yy1)):yyvs) =  do { yyr <- reduce417 yy1 yy2 yy3 yy4 yy5 ;YYM.return (YYNTterm yyr, yyvs)};
private yyprod417 yyvals = yybadprod 417 yyvals;
private yyprod418 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce418 yy1}; YYM.return (YYNTcommata yyr, yyvs)};
private yyprod418 yyvals = yybadprod 418 yyvals;
private yyprod419 ((_, (YYNTcommata yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce419 yy1 yy2}; YYM.return (YYNTcommata yyr, yyvs)};
private yyprod419 yyvals = yybadprod 419 yyvals;
private yyprod420 ((_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce420 yy1}; YYM.return (YYNTfields yyr, yyvs)};
private yyprod420 yyvals = yybadprod 420 yyvals;
private yyprod421 ((_, (YYNTfields yy3)):(_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { yyr <- reduce421 yy1 yy2 yy3 ;YYM.return (YYNTfields yyr, yyvs)};
private yyprod421 yyvals = yybadprod 421 yyvals;
private yyprod422 ((_, (YYTok yy2)):(_, (YYNTfield yy1)):yyvs) =  do { let {!yyr = reduce422 yy1 yy2}; YYM.return (YYNTfields yyr, yyvs)};
private yyprod422 yyvals = yybadprod 422 yyvals;
private yyprod423 ((_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce423 yy1}; YYM.return (YYNTgetfields yyr, yyvs)};
private yyprod423 yyvals = yybadprod 423 yyvals;
private yyprod424 ((_, (YYNTgetfields yy3)):(_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce424 yy1 yy2 yy3}; YYM.return (YYNTgetfields yyr, yyvs)};
private yyprod424 yyvals = yybadprod 424 yyvals;
private yyprod425 ((_, (YYTok yy2)):(_, (YYNTgetfield yy1)):yyvs) =  do { let {!yyr = reduce425 yy1 yy2}; YYM.return (YYNTgetfields yyr, yyvs)};
private yyprod425 yyvals = yybadprod 425 yyvals;
private yyprod426 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce426 yy1 yy2 yy3}; YYM.return (YYNTgetfield yyr, yyvs)};
private yyprod426 yyvals = yybadprod 426 yyvals;
private yyprod427 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce427 yy1 yy2 yy3}; YYM.return (YYNTgetfield yyr, yyvs)};
private yyprod427 yyvals = yybadprod 427 yyvals;
private yyprod428 ((_, (YYTok yy1)):yyvs) =  do { let {!yyr = reduce428 yy1}; YYM.return (YYNTgetfield yyr, yyvs)};
private yyprod428 yyvals = yybadprod 428 yyvals;
private yyprod429 ((_, (YYNTexpr yy3)):(_, (YYTok yy2)):(_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce429 yy1 yy2 yy3}; YYM.return (YYNTfield yyr, yyvs)};
private yyprod429 yyvals = yybadprod 429 yyvals;
private yyprod430 ((_, (YYNTvarid yy1)):yyvs) =  do { let {!yyr = reduce430 yy1}; YYM.return (YYNTfield yyr, yyvs)};
private yyprod430 yyvals = yybadprod 430 yyvals;
private yyprod431 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce431 yy1}; YYM.return (YYNTexprSC yyr, yyvs)};
private yyprod431 yyvals = yybadprod 431 yyvals;
private yyprod432 ((_, (YYNTexprSC yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce432 yy1 yy2 yy3}; YYM.return (YYNTexprSC yyr, yyvs)};
private yyprod432 yyvals = yybadprod 432 yyvals;
private yyprod433 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce433 yy1 yy2}; YYM.return (YYNTexprSC yyr, yyvs)};
private yyprod433 yyvals = yybadprod 433 yyvals;
private yyprod434 ((_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce434 yy1}; YYM.return (YYNTexprSS yyr, yyvs)};
private yyprod434 yyvals = yybadprod 434 yyvals;
private yyprod435 ((_, (YYNTexprSS yy3)):(_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce435 yy1 yy2 yy3}; YYM.return (YYNTexprSS yyr, yyvs)};
private yyprod435 yyvals = yybadprod 435 yyvals;
private yyprod436 ((_, (YYTok yy2)):(_, (YYNTexpr yy1)):yyvs) =  do { let {!yyr = reduce436 yy1 yy2}; YYM.return (YYNTexprSS yyr, yyvs)};
private yyprod436 yyvals = yybadprod 436 yyvals;
;

private yyprods = let 
    sub1 = [      (1, yyprod1),
      (2, yyprod2),
      (3, yyprod3),
      (4, yyprod4),
      (5, yyprod5),
      (6, yyprod6),
      (7, yyprod7),
      (8, yyprod8),
      (9, yyprod9),
      (10, yyprod10),
      (11, yyprod11),
      (12, yyprod12),
      (13, yyprod13),
      (14, yyprod14),
      (15, yyprod15),
      (16, yyprod16),
      (17, yyprod17),
      (18, yyprod18),
      (19, yyprod19),
      (20, yyprod20),
      (21, yyprod21),
      (22, yyprod22),
      (23, yyprod23),
      (24, yyprod24),
      (25, yyprod25),
      (26, yyprod26),
      (27, yyprod27),
      (28, yyprod28),
      (29, yyprod29),
      (30, yyprod30),
      (31, yyprod31),
      (32, yyprod32),
      (33, yyprod33),
      (34, yyprod34),
      (35, yyprod35),
      (36, yyprod36),
      (37, yyprod37),
      (38, yyprod38),
      (39, yyprod39),
      (40, yyprod40),
      (41, yyprod41),
      (42, yyprod42),
      (43, yyprod43),
      (44, yyprod44),
      (45, yyprod45),
      (46, yyprod46),
      (47, yyprod47),
      (48, yyprod48),
      (49, yyprod49),
      (50, yyprod50),
      (51, yyprod51),
      (52, yyprod52),
      (53, yyprod53),
      (54, yyprod54),
      (55, yyprod55),
      (56, yyprod56),
      (57, yyprod57),
      (58, yyprod58),
      (59, yyprod59),
      (60, yyprod60),
      (61, yyprod61),
      (62, yyprod62),
      (63, yyprod63),
      (64, yyprod64)];
    sub2 = [      (65, yyprod65),
      (66, yyprod66),
      (67, yyprod67),
      (68, yyprod68),
      (69, yyprod69),
      (70, yyprod70),
      (71, yyprod71),
      (72, yyprod72),
      (73, yyprod73),
      (74, yyprod74),
      (75, yyprod75),
      (76, yyprod76),
      (77, yyprod77),
      (78, yyprod78),
      (79, yyprod79),
      (80, yyprod80),
      (81, yyprod81),
      (82, yyprod82),
      (83, yyprod83),
      (84, yyprod84),
      (85, yyprod85),
      (86, yyprod86),
      (87, yyprod87),
      (88, yyprod88),
      (89, yyprod89),
      (90, yyprod90),
      (91, yyprod91),
      (92, yyprod92),
      (93, yyprod93),
      (94, yyprod94),
      (95, yyprod95),
      (96, yyprod96),
      (97, yyprod97),
      (98, yyprod98),
      (99, yyprod99),
      (100, yyprod100),
      (101, yyprod101),
      (102, yyprod102),
      (103, yyprod103),
      (104, yyprod104),
      (105, yyprod105),
      (106, yyprod106),
      (107, yyprod107),
      (108, yyprod108),
      (109, yyprod109),
      (110, yyprod110),
      (111, yyprod111),
      (112, yyprod112),
      (113, yyprod113),
      (114, yyprod114),
      (115, yyprod115),
      (116, yyprod116),
      (117, yyprod117),
      (118, yyprod118),
      (119, yyprod119),
      (120, yyprod120),
      (121, yyprod121),
      (122, yyprod122),
      (123, yyprod123),
      (124, yyprod124),
      (125, yyprod125),
      (126, yyprod126),
      (127, yyprod127),
      (128, yyprod128)];
    sub3 = [      (129, yyprod129),
      (130, yyprod130),
      (131, yyprod131),
      (132, yyprod132),
      (133, yyprod133),
      (134, yyprod134),
      (135, yyprod135),
      (136, yyprod136),
      (137, yyprod137),
      (138, yyprod138),
      (139, yyprod139),
      (140, yyprod140),
      (141, yyprod141),
      (142, yyprod142),
      (143, yyprod143),
      (144, yyprod144),
      (145, yyprod145),
      (146, yyprod146),
      (147, yyprod147),
      (148, yyprod148),
      (149, yyprod149),
      (150, yyprod150),
      (151, yyprod151),
      (152, yyprod152),
      (153, yyprod153),
      (154, yyprod154),
      (155, yyprod155),
      (156, yyprod156),
      (157, yyprod157),
      (158, yyprod158),
      (159, yyprod159),
      (160, yyprod160),
      (161, yyprod161),
      (162, yyprod162),
      (163, yyprod163),
      (164, yyprod164),
      (165, yyprod165),
      (166, yyprod166),
      (167, yyprod167),
      (168, yyprod168),
      (169, yyprod169),
      (170, yyprod170),
      (171, yyprod171),
      (172, yyprod172),
      (173, yyprod173),
      (174, yyprod174),
      (175, yyprod175),
      (176, yyprod176),
      (177, yyprod177),
      (178, yyprod178),
      (179, yyprod179),
      (180, yyprod180),
      (181, yyprod181),
      (182, yyprod182),
      (183, yyprod183),
      (184, yyprod184),
      (185, yyprod185),
      (186, yyprod186),
      (187, yyprod187),
      (188, yyprod188),
      (189, yyprod189),
      (190, yyprod190),
      (191, yyprod191),
      (192, yyprod192)];
    sub4 = [      (193, yyprod193),
      (194, yyprod194),
      (195, yyprod195),
      (196, yyprod196),
      (197, yyprod197),
      (198, yyprod198),
      (199, yyprod199),
      (200, yyprod200),
      (201, yyprod201),
      (202, yyprod202),
      (203, yyprod203),
      (204, yyprod204),
      (205, yyprod205),
      (206, yyprod206),
      (207, yyprod207),
      (208, yyprod208),
      (209, yyprod209),
      (210, yyprod210),
      (211, yyprod211),
      (212, yyprod212),
      (213, yyprod213),
      (214, yyprod214),
      (215, yyprod215),
      (216, yyprod216),
      (217, yyprod217),
      (218, yyprod218),
      (219, yyprod219),
      (220, yyprod220),
      (221, yyprod221),
      (222, yyprod222),
      (223, yyprod223),
      (224, yyprod224),
      (225, yyprod225),
      (226, yyprod226),
      (227, yyprod227),
      (228, yyprod228),
      (229, yyprod229),
      (230, yyprod230),
      (231, yyprod231),
      (232, yyprod232),
      (233, yyprod233),
      (234, yyprod234),
      (235, yyprod235),
      (236, yyprod236),
      (237, yyprod237),
      (238, yyprod238),
      (239, yyprod239),
      (240, yyprod240),
      (241, yyprod241),
      (242, yyprod242),
      (243, yyprod243),
      (244, yyprod244),
      (245, yyprod245),
      (246, yyprod246),
      (247, yyprod247),
      (248, yyprod248),
      (249, yyprod249),
      (250, yyprod250),
      (251, yyprod251),
      (252, yyprod252),
      (253, yyprod253),
      (254, yyprod254),
      (255, yyprod255),
      (256, yyprod256)];
    sub5 = [      (257, yyprod257),
      (258, yyprod258),
      (259, yyprod259),
      (260, yyprod260),
      (261, yyprod261),
      (262, yyprod262),
      (263, yyprod263),
      (264, yyprod264),
      (265, yyprod265),
      (266, yyprod266),
      (267, yyprod267),
      (268, yyprod268),
      (269, yyprod269),
      (270, yyprod270),
      (271, yyprod271),
      (272, yyprod272),
      (273, yyprod273),
      (274, yyprod274),
      (275, yyprod275),
      (276, yyprod276),
      (277, yyprod277),
      (278, yyprod278),
      (279, yyprod279),
      (280, yyprod280),
      (281, yyprod281),
      (282, yyprod282),
      (283, yyprod283),
      (284, yyprod284),
      (285, yyprod285),
      (286, yyprod286),
      (287, yyprod287),
      (288, yyprod288),
      (289, yyprod289),
      (290, yyprod290),
      (291, yyprod291),
      (292, yyprod292),
      (293, yyprod293),
      (294, yyprod294),
      (295, yyprod295),
      (296, yyprod296),
      (297, yyprod297),
      (298, yyprod298),
      (299, yyprod299),
      (300, yyprod300),
      (301, yyprod301),
      (302, yyprod302),
      (303, yyprod303),
      (304, yyprod304),
      (305, yyprod305),
      (306, yyprod306),
      (307, yyprod307),
      (308, yyprod308),
      (309, yyprod309),
      (310, yyprod310),
      (311, yyprod311),
      (312, yyprod312),
      (313, yyprod313),
      (314, yyprod314),
      (315, yyprod315),
      (316, yyprod316),
      (317, yyprod317),
      (318, yyprod318),
      (319, yyprod319),
      (320, yyprod320)];
    sub6 = [      (321, yyprod321),
      (322, yyprod322),
      (323, yyprod323),
      (324, yyprod324),
      (325, yyprod325),
      (326, yyprod326),
      (327, yyprod327),
      (328, yyprod328),
      (329, yyprod329),
      (330, yyprod330),
      (331, yyprod331),
      (332, yyprod332),
      (333, yyprod333),
      (334, yyprod334),
      (335, yyprod335),
      (336, yyprod336),
      (337, yyprod337),
      (338, yyprod338),
      (339, yyprod339),
      (340, yyprod340),
      (341, yyprod341),
      (342, yyprod342),
      (343, yyprod343),
      (344, yyprod344),
      (345, yyprod345),
      (346, yyprod346),
      (347, yyprod347),
      (348, yyprod348),
      (349, yyprod349),
      (350, yyprod350),
      (351, yyprod351),
      (352, yyprod352),
      (353, yyprod353),
      (354, yyprod354),
      (355, yyprod355),
      (356, yyprod356),
      (357, yyprod357),
      (358, yyprod358),
      (359, yyprod359),
      (360, yyprod360),
      (361, yyprod361),
      (362, yyprod362),
      (363, yyprod363),
      (364, yyprod364),
      (365, yyprod365),
      (366, yyprod366),
      (367, yyprod367),
      (368, yyprod368),
      (369, yyprod369),
      (370, yyprod370),
      (371, yyprod371),
      (372, yyprod372),
      (373, yyprod373),
      (374, yyprod374),
      (375, yyprod375),
      (376, yyprod376),
      (377, yyprod377),
      (378, yyprod378),
      (379, yyprod379),
      (380, yyprod380),
      (381, yyprod381),
      (382, yyprod382),
      (383, yyprod383),
      (384, yyprod384)];
    sub7 = [      (385, yyprod385),
      (386, yyprod386),
      (387, yyprod387),
      (388, yyprod388),
      (389, yyprod389),
      (390, yyprod390),
      (391, yyprod391),
      (392, yyprod392),
      (393, yyprod393),
      (394, yyprod394),
      (395, yyprod395),
      (396, yyprod396),
      (397, yyprod397),
      (398, yyprod398),
      (399, yyprod399),
      (400, yyprod400),
      (401, yyprod401),
      (402, yyprod402),
      (403, yyprod403),
      (404, yyprod404),
      (405, yyprod405),
      (406, yyprod406),
      (407, yyprod407),
      (408, yyprod408),
      (409, yyprod409),
      (410, yyprod410),
      (411, yyprod411),
      (412, yyprod412),
      (413, yyprod413),
      (414, yyprod414),
      (415, yyprod415),
      (416, yyprod416),
      (417, yyprod417),
      (418, yyprod418),
      (419, yyprod419),
      (420, yyprod420),
      (421, yyprod421),
      (422, yyprod422),
      (423, yyprod423),
      (424, yyprod424),
      (425, yyprod425),
      (426, yyprod426),
      (427, yyprod427),
      (428, yyprod428),
      (429, yyprod429),
      (430, yyprod430),
      (431, yyprod431),
      (432, yyprod432),
      (433, yyprod433),
      (434, yyprod434),
      (435, yyprod435),
      (436, yyprod436)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7);
private yyacts  = let 
    sub1 = [      (0, yyaction0),
      (1, yyaction1),
      (2, yyaction2),
      (3, yyaction3),
      (4, yyaction4),
      (5, yyaction5),
      (6, yyaction6),
      (7, yyaction7),
      (8, yyaction8),
      (9, yyaction9),
      (10, yyaction10),
      (11, yyaction11),
      (12, yyaction12),
      (13, yyaction13),
      (14, yyaction14),
      (15, yyaction15),
      (16, yyaction16),
      (17, yyaction17),
      (18, yyaction18),
      (19, yyaction19),
      (20, yyaction20),
      (21, yyaction21),
      (22, yyaction22),
      (23, yyaction23),
      (24, yyaction24),
      (25, yyaction25),
      (26, yyaction26),
      (27, yyaction27),
      (28, yyaction28),
      (29, yyaction29),
      (30, yyaction30),
      (31, yyaction31),
      (32, yyaction32),
      (33, yyaction33),
      (34, yyaction34),
      (35, yyaction35),
      (36, yyaction36),
      (37, yyaction37),
      (38, yyaction38),
      (39, yyaction39),
      (40, yyaction40),
      (41, yyaction41),
      (42, yyaction42),
      (43, yyaction43),
      (44, yyaction44),
      (45, yyaction45),
      (46, yyaction46),
      (47, yyaction47),
      (48, yyaction48),
      (49, yyaction49),
      (50, yyaction50),
      (51, yyaction51),
      (52, yyaction52),
      (53, yyaction53),
      (54, yyaction54),
      (55, yyaction55),
      (56, yyaction56),
      (57, yyaction57),
      (58, yyaction58),
      (59, yyaction59),
      (60, yyaction60),
      (61, yyaction61),
      (62, yyaction62),
      (63, yyaction63)];
    sub2 = [      (64, yyaction64),
      (65, yyaction65),
      (66, yyaction66),
      (67, yyaction67),
      (68, yyaction68),
      (69, yyaction69),
      (70, yyaction70),
      (71, yyaction71),
      (72, yyaction72),
      (73, yyaction73),
      (74, yyaction74),
      (75, yyaction75),
      (76, yyaction76),
      (77, yyaction77),
      (78, yyaction78),
      (79, yyaction79),
      (80, yyaction80),
      (81, yyaction81),
      (82, yyaction82),
      (83, yyaction83),
      (84, yyaction84),
      (85, yyaction85),
      (86, yyaction86),
      (87, yyaction87),
      (88, yyaction88),
      (89, yyaction89),
      (90, yyaction90),
      (91, yyaction91),
      (92, yyaction92),
      (93, yyaction93),
      (94, yyaction94),
      (95, yyaction95),
      (96, yyaction96),
      (97, yyaction97),
      (98, yyaction98),
      (99, yyaction99),
      (100, yyaction100),
      (101, yyaction101),
      (102, yyaction102),
      (103, yyaction103),
      (104, yyaction104),
      (105, yyaction105),
      (106, yyaction106),
      (107, yyaction107),
      (108, yyaction108),
      (109, yyaction109),
      (110, yyaction110),
      (111, yyaction111),
      (112, yyaction112),
      (113, yyaction113),
      (114, yyaction114),
      (115, yyaction115),
      (116, yyaction116),
      (117, yyaction117),
      (118, yyaction118),
      (119, yyaction119),
      (120, yyaction120),
      (121, yyaction121),
      (122, yyaction122),
      (123, yyaction123),
      (124, yyaction124),
      (125, yyaction125),
      (126, yyaction126),
      (127, yyaction127)];
    sub3 = [      (128, yyaction128),
      (129, yyaction129),
      (130, yyaction130),
      (131, yyaction131),
      (132, yyaction132),
      (133, yyaction133),
      (134, yyaction134),
      (135, yyaction135),
      (136, yyaction136),
      (137, yyaction137),
      (138, yyaction138),
      (139, yyaction139),
      (140, yyaction140),
      (141, yyaction141),
      (142, yyaction142),
      (143, yyaction143),
      (144, yyaction144),
      (145, yyaction145),
      (146, yyaction146),
      (147, yyaction147),
      (148, yyaction148),
      (149, yyaction149),
      (150, yyaction150),
      (151, yyaction151),
      (152, yyaction152),
      (153, yyaction153),
      (154, yyaction154),
      (155, yyaction155),
      (156, yyaction156),
      (157, yyaction157),
      (158, yyaction158),
      (159, yyaction159),
      (160, yyaction160),
      (161, yyaction161),
      (162, yyaction162),
      (163, yyaction163),
      (164, yyaction164),
      (165, yyaction165),
      (166, yyaction166),
      (167, yyaction167),
      (168, yyaction168),
      (169, yyaction169),
      (170, yyaction170),
      (171, yyaction171),
      (172, yyaction172),
      (173, yyaction173),
      (174, yyaction174),
      (175, yyaction175),
      (176, yyaction176),
      (177, yyaction177),
      (178, yyaction178),
      (179, yyaction179),
      (180, yyaction180),
      (181, yyaction181),
      (182, yyaction182),
      (183, yyaction183),
      (184, yyaction184),
      (185, yyaction185),
      (186, yyaction186),
      (187, yyaction187),
      (188, yyaction188),
      (189, yyaction189),
      (190, yyaction190),
      (191, yyaction191)];
    sub4 = [      (192, yyaction192),
      (193, yyaction193),
      (194, yyaction194),
      (195, yyaction195),
      (196, yyaction196),
      (197, yyaction197),
      (198, yyaction198),
      (199, yyaction199),
      (200, yyaction200),
      (201, yyaction201),
      (202, yyaction202),
      (203, yyaction203),
      (204, yyaction204),
      (205, yyaction205),
      (206, yyaction206),
      (207, yyaction207),
      (208, yyaction208),
      (209, yyaction209),
      (210, yyaction210),
      (211, yyaction211),
      (212, yyaction212),
      (213, yyaction213),
      (214, yyaction214),
      (215, yyaction215),
      (216, yyaction216),
      (217, yyaction217),
      (218, yyaction218),
      (219, yyaction219),
      (220, yyaction220),
      (221, yyaction221),
      (222, yyaction222),
      (223, yyaction223),
      (224, yyaction224),
      (225, yyaction225),
      (226, yyaction226),
      (227, yyaction227),
      (228, yyaction228),
      (229, yyaction229),
      (230, yyaction230),
      (231, yyaction231),
      (232, yyaction232),
      (233, yyaction233),
      (234, yyaction234),
      (235, yyaction235),
      (236, yyaction236),
      (237, yyaction237),
      (238, yyaction238),
      (239, yyaction239),
      (240, yyaction240),
      (241, yyaction241),
      (242, yyaction242),
      (243, yyaction243),
      (244, yyaction244),
      (245, yyaction245),
      (246, yyaction246),
      (247, yyaction247),
      (248, yyaction248),
      (249, yyaction249),
      (250, yyaction250),
      (251, yyaction251),
      (252, yyaction252),
      (253, yyaction253),
      (254, yyaction254),
      (255, yyaction255)];
    sub5 = [      (256, yyaction256),
      (257, yyaction257),
      (258, yyaction258),
      (259, yyaction259),
      (260, yyaction260),
      (261, yyaction261),
      (262, yyaction262),
      (263, yyaction263),
      (264, yyaction264),
      (265, yyaction265),
      (266, yyaction266),
      (267, yyaction267),
      (268, yyaction268),
      (269, yyaction269),
      (270, yyaction270),
      (271, yyaction271),
      (272, yyaction272),
      (273, yyaction273),
      (274, yyaction274),
      (275, yyaction275),
      (276, yyaction276),
      (277, yyaction277),
      (278, yyaction278),
      (279, yyaction279),
      (280, yyaction280),
      (281, yyaction281),
      (282, yyaction282),
      (283, yyaction283),
      (284, yyaction284),
      (285, yyaction285),
      (286, yyaction286),
      (287, yyaction287),
      (288, yyaction288),
      (289, yyaction289),
      (290, yyaction290),
      (291, yyaction291),
      (292, yyaction292),
      (293, yyaction293),
      (294, yyaction294),
      (295, yyaction295),
      (296, yyaction296),
      (297, yyaction297),
      (298, yyaction298),
      (299, yyaction299),
      (300, yyaction300),
      (301, yyaction301),
      (302, yyaction302),
      (303, yyaction303),
      (304, yyaction304),
      (305, yyaction305),
      (306, yyaction306),
      (307, yyaction307),
      (308, yyaction308),
      (309, yyaction309),
      (310, yyaction310),
      (311, yyaction311),
      (312, yyaction312),
      (313, yyaction313),
      (314, yyaction314),
      (315, yyaction315),
      (316, yyaction316),
      (317, yyaction317),
      (318, yyaction318),
      (319, yyaction319)];
    sub6 = [      (320, yyaction320),
      (321, yyaction321),
      (322, yyaction322),
      (323, yyaction323),
      (324, yyaction324),
      (325, yyaction325),
      (326, yyaction326),
      (327, yyaction327),
      (328, yyaction328),
      (329, yyaction329),
      (330, yyaction330),
      (331, yyaction331),
      (332, yyaction332),
      (333, yyaction333),
      (334, yyaction334),
      (335, yyaction335),
      (336, yyaction336),
      (337, yyaction337),
      (338, yyaction338),
      (339, yyaction339),
      (340, yyaction340),
      (341, yyaction341),
      (342, yyaction342),
      (343, yyaction343),
      (344, yyaction344),
      (345, yyaction345),
      (346, yyaction346),
      (347, yyaction347),
      (348, yyaction348),
      (349, yyaction349),
      (350, yyaction350),
      (351, yyaction351),
      (352, yyaction352),
      (353, yyaction353),
      (354, yyaction354),
      (355, yyaction355),
      (356, yyaction356),
      (357, yyaction357),
      (358, yyaction358),
      (359, yyaction359),
      (360, yyaction360),
      (361, yyaction361),
      (362, yyaction362),
      (363, yyaction363),
      (364, yyaction364),
      (365, yyaction365),
      (366, yyaction366),
      (367, yyaction367),
      (368, yyaction368),
      (369, yyaction369),
      (370, yyaction370),
      (371, yyaction371),
      (372, yyaction372),
      (373, yyaction373),
      (374, yyaction374),
      (375, yyaction375),
      (376, yyaction376),
      (377, yyaction377),
      (378, yyaction378),
      (379, yyaction379),
      (380, yyaction380),
      (381, yyaction381),
      (382, yyaction382),
      (383, yyaction383)];
    sub7 = [      (384, yyaction384),
      (385, yyaction385),
      (386, yyaction386),
      (387, yyaction387),
      (388, yyaction388),
      (389, yyaction389),
      (390, yyaction390),
      (391, yyaction391),
      (392, yyaction392),
      (393, yyaction393),
      (394, yyaction394),
      (395, yyaction395),
      (396, yyaction396),
      (397, yyaction397),
      (398, yyaction398),
      (399, yyaction399),
      (400, yyaction400),
      (401, yyaction401),
      (402, yyaction402),
      (403, yyaction403),
      (404, yyaction404),
      (405, yyaction405),
      (406, yyaction406),
      (407, yyaction407),
      (408, yyaction408),
      (409, yyaction409),
      (410, yyaction410),
      (411, yyaction411),
      (412, yyaction412),
      (413, yyaction413),
      (414, yyaction414),
      (415, yyaction415),
      (416, yyaction416),
      (417, yyaction417),
      (418, yyaction418),
      (419, yyaction419),
      (420, yyaction420),
      (421, yyaction421),
      (422, yyaction422),
      (423, yyaction423),
      (424, yyaction424),
      (425, yyaction425),
      (426, yyaction426),
      (427, yyaction427),
      (428, yyaction428),
      (429, yyaction429),
      (430, yyaction430),
      (431, yyaction431),
      (432, yyaction432),
      (433, yyaction433),
      (434, yyaction434),
      (435, yyaction435),
      (436, yyaction436),
      (437, yyaction437),
      (438, yyaction438),
      (439, yyaction439),
      (440, yyaction440),
      (441, yyaction441),
      (442, yyaction442),
      (443, yyaction443),
      (444, yyaction444),
      (445, yyaction445),
      (446, yyaction446),
      (447, yyaction447)];
    sub8 = [      (448, yyaction448),
      (449, yyaction449),
      (450, yyaction450),
      (451, yyaction451),
      (452, yyaction452),
      (453, yyaction453),
      (454, yyaction454),
      (455, yyaction455),
      (456, yyaction456),
      (457, yyaction457),
      (458, yyaction458),
      (459, yyaction459),
      (460, yyaction460),
      (461, yyaction461),
      (462, yyaction462),
      (463, yyaction463),
      (464, yyaction464),
      (465, yyaction465),
      (466, yyaction466),
      (467, yyaction467),
      (468, yyaction468),
      (469, yyaction469),
      (470, yyaction470),
      (471, yyaction471),
      (472, yyaction472),
      (473, yyaction473),
      (474, yyaction474),
      (475, yyaction475),
      (476, yyaction476),
      (477, yyaction477),
      (478, yyaction478),
      (479, yyaction479),
      (480, yyaction480),
      (481, yyaction481),
      (482, yyaction482),
      (483, yyaction483),
      (484, yyaction484),
      (485, yyaction485),
      (486, yyaction486),
      (487, yyaction487),
      (488, yyaction488),
      (489, yyaction489),
      (490, yyaction490),
      (491, yyaction491),
      (492, yyaction492),
      (493, yyaction493),
      (494, yyaction494),
      (495, yyaction495),
      (496, yyaction496),
      (497, yyaction497),
      (498, yyaction498),
      (499, yyaction499),
      (500, yyaction500),
      (501, yyaction501),
      (502, yyaction502),
      (503, yyaction503),
      (504, yyaction504),
      (505, yyaction505),
      (506, yyaction506),
      (507, yyaction507),
      (508, yyaction508),
      (509, yyaction509),
      (510, yyaction510),
      (511, yyaction511)];
    sub9 = [      (512, yyaction512),
      (513, yyaction513),
      (514, yyaction514),
      (515, yyaction515),
      (516, yyaction516),
      (517, yyaction517),
      (518, yyaction518),
      (519, yyaction519),
      (520, yyaction520),
      (521, yyaction521),
      (522, yyaction522),
      (523, yyaction523),
      (524, yyaction524),
      (525, yyaction525),
      (526, yyaction526),
      (527, yyaction527),
      (528, yyaction528),
      (529, yyaction529),
      (530, yyaction530),
      (531, yyaction531),
      (532, yyaction532),
      (533, yyaction533),
      (534, yyaction534),
      (535, yyaction535),
      (536, yyaction536),
      (537, yyaction537),
      (538, yyaction538),
      (539, yyaction539),
      (540, yyaction540),
      (541, yyaction541),
      (542, yyaction542),
      (543, yyaction543),
      (544, yyaction544),
      (545, yyaction545),
      (546, yyaction546),
      (547, yyaction547),
      (548, yyaction548),
      (549, yyaction549),
      (550, yyaction550),
      (551, yyaction551),
      (552, yyaction552),
      (553, yyaction553),
      (554, yyaction554),
      (555, yyaction555),
      (556, yyaction556),
      (557, yyaction557),
      (558, yyaction558),
      (559, yyaction559),
      (560, yyaction560),
      (561, yyaction561),
      (562, yyaction562),
      (563, yyaction563),
      (564, yyaction564),
      (565, yyaction565),
      (566, yyaction566),
      (567, yyaction567),
      (568, yyaction568),
      (569, yyaction569),
      (570, yyaction570),
      (571, yyaction571),
      (572, yyaction572),
      (573, yyaction573),
      (574, yyaction574),
      (575, yyaction575)];
    sub10 = [      (576, yyaction576),
      (577, yyaction577),
      (578, yyaction578),
      (579, yyaction579),
      (580, yyaction580),
      (581, yyaction581),
      (582, yyaction582),
      (583, yyaction583),
      (584, yyaction584),
      (585, yyaction585),
      (586, yyaction586),
      (587, yyaction587),
      (588, yyaction588),
      (589, yyaction589),
      (590, yyaction590),
      (591, yyaction591),
      (592, yyaction592),
      (593, yyaction593),
      (594, yyaction594),
      (595, yyaction595),
      (596, yyaction596),
      (597, yyaction597),
      (598, yyaction598),
      (599, yyaction599),
      (600, yyaction600),
      (601, yyaction601),
      (602, yyaction602),
      (603, yyaction603),
      (604, yyaction604),
      (605, yyaction605),
      (606, yyaction606),
      (607, yyaction607),
      (608, yyaction608),
      (609, yyaction609),
      (610, yyaction610),
      (611, yyaction611),
      (612, yyaction612),
      (613, yyaction613),
      (614, yyaction614),
      (615, yyaction615),
      (616, yyaction616),
      (617, yyaction617),
      (618, yyaction618),
      (619, yyaction619),
      (620, yyaction620),
      (621, yyaction621),
      (622, yyaction622),
      (623, yyaction623),
      (624, yyaction624),
      (625, yyaction625),
      (626, yyaction626),
      (627, yyaction627),
      (628, yyaction628),
      (629, yyaction629),
      (630, yyaction630),
      (631, yyaction631),
      (632, yyaction632),
      (633, yyaction633),
      (634, yyaction634),
      (635, yyaction635),
      (636, yyaction636),
      (637, yyaction637),
      (638, yyaction638),
      (639, yyaction639)];
    sub11 = [      (640, yyaction640),
      (641, yyaction641),
      (642, yyaction642),
      (643, yyaction643),
      (644, yyaction644),
      (645, yyaction645),
      (646, yyaction646),
      (647, yyaction647),
      (648, yyaction648),
      (649, yyaction649),
      (650, yyaction650),
      (651, yyaction651),
      (652, yyaction652),
      (653, yyaction653),
      (654, yyaction654),
      (655, yyaction655),
      (656, yyaction656),
      (657, yyaction657),
      (658, yyaction658),
      (659, yyaction659),
      (660, yyaction660),
      (661, yyaction661),
      (662, yyaction662),
      (663, yyaction663),
      (664, yyaction664),
      (665, yyaction665),
      (666, yyaction666),
      (667, yyaction667),
      (668, yyaction668),
      (669, yyaction669),
      (670, yyaction670),
      (671, yyaction671),
      (672, yyaction672),
      (673, yyaction673),
      (674, yyaction674),
      (675, yyaction675),
      (676, yyaction676),
      (677, yyaction677),
      (678, yyaction678),
      (679, yyaction679),
      (680, yyaction680),
      (681, yyaction681),
      (682, yyaction682),
      (683, yyaction683),
      (684, yyaction684),
      (685, yyaction685),
      (686, yyaction686),
      (687, yyaction687),
      (688, yyaction688),
      (689, yyaction689),
      (690, yyaction690),
      (691, yyaction691)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11);
private yyrecs  = let 
    sub1 = [      (0, yybadstart 0 "a module"),
      (1, yyparsing  1 "a sequence of doc comments"),
      (2, yyparsing  2 "a module clause"),
      (3, yyexpect 3(yyfromId PACKAGE)),
      (4, yyparsing  4 "a module"),
      (5, yyrecover 5),
      (6, yyparsing  6 "a module"),
      (7, yyparsing  7 "a module clause"),
      (8, yybadstart 8 "the next definition"),
      (9, yyparsing  9 "a sequence of doc comments"),
      (10, yyexpect 10(yyfromId DOCUMENTATION)),
      (11, yyparsing  11 "a variable name"),
      (12, yyparsing  12 "a module name"),
      (13, yyparsing  13 "a module name"),
      (14, yyparsing  14 "a variable name"),
      (15, yyparsing  15 "a variable name"),
      (16, yyparsing  16 "a variable name"),
      (17, yyparsing  17 "a variable name"),
      (18, yyparsing  18 "a variable name"),
      (19, yyparsing  19 "a variable name"),
      (20, yyparsing  20 "a module name"),
      (21, yyexpect 21(yyfromCh '.')),
      (22, yyparsing  22 "a module clause"),
      (23, yyparsing  23 "a module clause"),
      (24, yyparsing  24 "a qualified variable name"),
      (25, yyparsing  25 "a qualified constructor or type name"),
      (26, yyparsing  26 "a qualified variable name"),
      (27, yyparsing  27 "a literal"),
      (28, yyparsing  28 "a literal"),
      (29, yyparsing  29 "a top level expression"),
      (30, yyparsing  30 "a top level expression"),
      (31, yyexpect 31(yyfromCh '{')),
      (32, yyexpect 32(yyfromCh '{')),
      (33, yyparsing  33 "a literal"),
      (34, yyparsing  34 "a literal"),
      (35, yyparsing  35 "a literal"),
      (36, yyparsing  36 "a literal"),
      (37, yyparsing  37 "a literal"),
      (38, yyparsing  38 "a literal"),
      (39, yyparsing  39 "a literal"),
      (40, yyparsing  40 "a literal"),
      (41, yyparsing  41 "binary expression"),
      (42, yyparsing  42 "a term"),
      (43, yyparsing  43 "a term"),
      (44, yyparsing  44 "an unary operator"),
      (45, yyparsing  45 "an unary operator"),
      (46, yyparsing  46 "a lambda abstraction"),
      (47, yyparsing  47 "a term"),
      (48, yyparsing  48 "a module"),
      (49, yyparsing  49 "a frege script"),
      (50, yyparsing  50 "a term"),
      (51, yyparsing  51 "a term"),
      (52, yyparsing  52 "unary expression"),
      (53, yyparsing  53 "an expression"),
      (54, yyparsing  54 "a term"),
      (55, yyparsing  55 "a top level expression"),
      (56, yyparsing  56 "binary expression"),
      (57, yyparsing  57 "a top level expression"),
      (58, yyparsing  58 "function application"),
      (59, yyparsing  59 "unary expression"),
      (60, yyexpect 60(yyfromCh '{')),
      (61, yyparsing  61 "a primary expression"),
      (62, yyparsing  62 "a word"),
      (63, yyexpect 63(yyfromCh '{'))];
    sub2 = [      (64, yyparsing  64 "a module"),
      (65, yyexpect 65(yyfromCh '(')),
      (66, yyparsing  66 "words"),
      (67, yyparsing  67 "a module clause"),
      (68, yyexpect 68(yyfromId PACKAGE)),
      (69, yyparsing  69 "the next definition"),
      (70, yyparsing  70 "a sequence of doc comments"),
      (71, yyparsing  71 "a module name"),
      (72, yyparsing  72 "a module name"),
      (73, yyparsing  73 "a module clause"),
      (74, yyparsing  74 "a variable or an operator"),
      (75, yyparsing  75 "a qualified constructor or type name"),
      (76, yyparsing  76 "a qualified variable name"),
      (77, yyparsing  77 "a variable or an operator"),
      (78, yyparsing  78 "a qualified variable name"),
      (79, yybadstart 79 "then branch"),
      (80, yyexpect 80(yyfromId OF)),
      (81, yyparsing  81 "a top level expression"),
      (82, yyparsing  82 "a primary expression"),
      (83, yyparsing  83 "binary expression"),
      (84, yyparsing  84 "an operator"),
      (85, yyparsing  85 "binary expression"),
      (86, yyparsing  86 "a term"),
      (87, yybadstart 87 "a sequence of one or more ','"),
      (88, yyparsing  88 "a term"),
      (89, yyparsing  89 "a term"),
      (90, yyparsing  90 "unary expression"),
      (91, yyexpect 91(yyfromCh ')')),
      (92, yybadstart 92 "an operator"),
      (93, yyparsing  93 "a term"),
      (94, yyparsing  94 "a term"),
      (95, yyparsing  95 "a term"),
      (96, yyparsing  96 "a pattern"),
      (97, yybadstart 97 "a lambda abstraction"),
      (98, yyparsing  98 "a term"),
      (99, yyparsing  99 "unary expression"),
      (100, yyparsing  100 "an expression"),
      (101, yyparsing  101 "binary expression"),
      (102, yyparsing  102 "binary expression"),
      (103, yyparsing  103 "function application"),
      (104, yyparsing  104 "a primary expression"),
      (105, yyexpect 105(yyfromId VARID)),
      (106, yyparsing  106 "a module"),
      (107, yyparsing  107 "a variable name"),
      (108, yyparsing  108 "documentation"),
      (109, yyparsing  109 "a module import"),
      (110, yyexpect 110(yyfromId INTCONST)),
      (111, yyexpect 111(yyfromId INTCONST)),
      (112, yyexpect 112(yyfromId INTCONST)),
      (113, yyparsing  113 "specification for module class "),
      (114, yyexpect 114(yyfromId CONID)),
      (115, yyexpect 115(yyfromId CONID)),
      (116, yyparsing  116 "an instance declaration"),
      (117, yyexpect 117(yyfromId DATA)),
      (118, yyexpect 118(yyfromId CONID)),
      (119, yyparsing  119 "an instance derivation"),
      (120, yyparsing  120 "a protected or private declaration"),
      (121, yyparsing  121 "a protected or private declaration"),
      (122, yyparsing  122 "a protected or private declaration"),
      (123, yyexpect 123(yyfromId NATIVE)),
      (124, yyparsing  124 "an annotated item"),
      (125, yyparsing  125 "a module"),
      (126, yybadstart 126 "the next definition"),
      (127, yyparsing  127 "a declaration")];
    sub3 = [      (128, yyparsing  128 "a declaration"),
      (129, yyparsing  129 "a declaration"),
      (130, yyparsing  130 "a top level declaration"),
      (131, yyparsing  131 "a declaration"),
      (132, yyparsing  132 "a top level declaration"),
      (133, yyparsing  133 "a top level declaration"),
      (134, yyparsing  134 "a top level declaration"),
      (135, yyparsing  135 "a declaration"),
      (136, yyparsing  136 "a declaration"),
      (137, yyparsing  137 "a declaration"),
      (138, yyparsing  138 "a declaration"),
      (139, yyparsing  139 "a declaration"),
      (140, yyparsing  140 "a local declaration"),
      (141, yyparsing  141 "a local declaration"),
      (142, yybadstart 142 "a where clause"),
      (143, yyparsing  143 "an annotated item"),
      (144, yyparsing  144 "a fixity declaration"),
      (145, yyexpect 145(yyfromId DCOLON)),
      (146, yyparsing  146 "a list of items to annotate"),
      (147, yyparsing  147 "a declaration of a native item"),
      (148, yyparsing  148 "a declaration of a native item"),
      (149, yybadstart 149 "declarations local to a class, instance or type"),
      (150, yyparsing  150 "a function or pattern binding"),
      (151, yyparsing  151 "left hand side of a function or pattern binding"),
      (152, yyparsing  152 "a module clause"),
      (153, yyparsing  153 "words"),
      (154, yyparsing  154 "a module clause"),
      (155, yyparsing  155 "a module clause"),
      (156, yyparsing  156 "a module name"),
      (157, yyparsing  157 "a qualified constructor or type name"),
      (158, yyparsing  158 "a qualified variable name"),
      (159, yyparsing  159 "then branch"),
      (160, yyexpect 160(yyfromId THEN)),
      (161, yyparsing  161 "a top level expression"),
      (162, yyexpect 162(yyfromCh '{')),
      (163, yyparsing  163 "a function or pattern binding"),
      (164, yybadstart 164 "a where clause"),
      (165, yybadstart 165 "the next definition"),
      (166, yyexpect 166(yyfromCh '}')),
      (167, yyexpect 167(yyfromCh '{')),
      (168, yyparsing  168 "a list comprehension qualifier"),
      (169, yybadstart 169 "the next definition"),
      (170, yyparsing  170 "a list comprehension qualifier"),
      (171, yyexpect 171(yyfromCh '}')),
      (172, yyparsing  172 "a term"),
      (173, yyparsing  173 "a sequence of one or more ','"),
      (174, yyparsing  174 "a term"),
      (175, yyparsing  175 "a term"),
      (176, yyparsing  176 "a term"),
      (177, yyparsing  177 "a term"),
      (178, yyexpect 178(yyfromCh ')')),
      (179, yyparsing  179 "a term"),
      (180, yyparsing  180 "a term"),
      (181, yyparsing  181 "an operator"),
      (182, yyparsing  182 "binary expression"),
      (183, yyexpect 183(yyfromCh ')')),
      (184, yyparsing  184 "list of expressions separated by ','"),
      (185, yyparsing  185 "a term"),
      (186, yyparsing  186 "a term"),
      (187, yyparsing  187 "a term"),
      (188, yyparsing  188 "a lambda abstraction"),
      (189, yyparsing  189 "a lambda abstraction"),
      (190, yyparsing  190 "a variable name"),
      (191, yyparsing  191 "a term")];
    sub4 = [      (192, yyparsing  192 "field"),
      (193, yyexpect 193(yyfromCh '}')),
      (194, yyparsing  194 "field list"),
      (195, yyparsing  195 "a type variable"),
      (196, yyparsing  196 "a qualified constructor or type name"),
      (197, yyexpect 197(yyfromId VARID)),
      (198, yyparsing  198 "a non function type"),
      (199, yyparsing  199 "a non function type"),
      (200, yyparsing  200 "a type constructor"),
      (201, yyparsing  201 "an expression"),
      (202, yyparsing  202 "a qualified type"),
      (203, yyparsing  203 "a qualified type"),
      (204, yyparsing  204 "a constrained type"),
      (205, yyparsing  205 "a constrained type"),
      (206, yyparsing  206 "a type application"),
      (207, yyparsing  207 "non function types"),
      (208, yyparsing  208 "a non function type"),
      (209, yyparsing  209 "a non function type"),
      (210, yyparsing  210 "binary expression"),
      (211, yyparsing  211 "binary expression"),
      (212, yyparsing  212 "a primary expression"),
      (213, yyexpect 213(yyfromId VARID)),
      (214, yyparsing  214 "a primary expression"),
      (215, yyparsing  215 "a primary expression"),
      (216, yyparsing  216 "a primary expression"),
      (217, yyparsing  217 "a primary expression"),
      (218, yyexpect 218(yyfromCh '}')),
      (219, yyparsing  219 "field list"),
      (220, yyexpect 220(yyfromCh '}')),
      (221, yyparsing  221 "a module import"),
      (222, yyparsing  222 "the start of a fixity declaration"),
      (223, yyparsing  223 "the start of a fixity declaration"),
      (224, yyparsing  224 "the start of a fixity declaration"),
      (225, yybadstart 225 "the type this module derives from"),
      (226, yyparsing  226 "a native item"),
      (227, yyparsing  227 "an annotated item"),
      (228, yyparsing  228 "a native item"),
      (229, yyparsing  229 "a native item"),
      (230, yyparsing  230 "a native item"),
      (231, yyparsing  231 "a data definition"),
      (232, yyparsing  232 "a type class declaration"),
      (233, yybadstart 233 "a sequence of one or more ','"),
      (234, yyexpect 234(yyfromCh ']')),
      (235, yyparsing  235 "an instance declaration"),
      (236, yyparsing  236 "a protected or private declaration"),
      (237, yyparsing  237 "a type declaration"),
      (238, yyparsing  238 "an instance derivation"),
      (239, yyparsing  239 "a native item"),
      (240, yyparsing  240 "a protected or private declaration"),
      (241, yyparsing  241 "a protected or private declaration"),
      (242, yyparsing  242 "a protected or private declaration"),
      (243, yyparsing  243 "a declaration of a native item"),
      (244, yyparsing  244 "an annotated item"),
      (245, yyparsing  245 "an annotated item"),
      (246, yyparsing  246 "an annotated item"),
      (247, yyparsing  247 "declarations"),
      (248, yyparsing  248 "a declaration"),
      (249, yyexpect 249(yyfromCh '{')),
      (250, yyparsing  250 "a function or pattern binding"),
      (251, yyparsing  251 "an operator"),
      (252, yyparsing  252 "an operator"),
      (253, yyparsing  253 "an operator"),
      (254, yyparsing  254 "some operators"),
      (255, yyparsing  255 "a fixity declaration")];
    sub5 = [      (256, yyparsing  256 "an annotation"),
      (257, yyparsing  257 "a list of items to annotate"),
      (258, yyparsing  258 "a valid java identifier"),
      (259, yyparsing  259 "a valid java identifier"),
      (260, yybadstart 260 "a valid java identifier"),
      (261, yyparsing  261 "a valid java identifier"),
      (262, yyparsing  262 "a declaration of a native item"),
      (263, yyexpect 263(yyfromId DCOLON)),
      (264, yyexpect 264(yyfromId DCOLON)),
      (265, yyexpect 265(yyfromId DCOLON)),
      (266, yyexpect 266(yyfromCh '{')),
      (267, yyparsing  267 "a data definition"),
      (268, yyparsing  268 "a guarded expression"),
      (269, yyparsing  269 "a function or pattern binding"),
      (270, yyparsing  270 "a function or pattern binding"),
      (271, yyparsing  271 "guarded expressions"),
      (272, yyparsing  272 "a qualified variable name"),
      (273, yyexpect 273(yyfromCh ')')),
      (274, yyparsing  274 "a qualified variable name"),
      (275, yyparsing  275 "a list of qualified variable names"),
      (276, yyparsing  276 "a qualified variable name"),
      (277, yyparsing  277 "a module clause"),
      (278, yyparsing  278 "then branch"),
      (279, yybadstart 279 "else branch"),
      (280, yyparsing  280 "a top level expression"),
      (281, yyparsing  281 "declarations in a let expression or where clause"),
      (282, yyexpect 282(yyfromId IN)),
      (283, yyparsing  283 "a list comprehension qualifier"),
      (284, yyparsing  284 "a guard qualifier"),
      (285, yyparsing  285 "a list comprehension qualifier"),
      (286, yyparsing  286 "do expression qualifiers"),
      (287, yyparsing  287 "a primary expression"),
      (288, yyparsing  288 "list of expressions separated by ';'"),
      (289, yyexpect 289(yyfromCh ')')),
      (290, yyparsing  290 "list of expressions separated by ','"),
      (291, yyexpect 291(yyfromCh ')')),
      (292, yyparsing  292 "a term"),
      (293, yyparsing  293 "a term"),
      (294, yyparsing  294 "a term"),
      (295, yyparsing  295 "list of expressions separated by ','"),
      (296, yyparsing  296 "list comprehension qualifiers"),
      (297, yyexpect 297(yyfromCh ']')),
      (298, yyparsing  298 "a term"),
      (299, yyexpect 299(yyfromCh ']')),
      (300, yyparsing  300 "a lambda abstraction"),
      (301, yyparsing  301 "field"),
      (302, yyparsing  302 "a term"),
      (303, yyparsing  303 "field list"),
      (304, yyexpect 304(yyfromId CONID)),
      (305, yyparsing  305 "a type variable bound in a forall"),
      (306, yybadstart 306 "'.' or 'â¢'"),
      (307, yyparsing  307 "type variables bound in a forall"),
      (308, yyparsing  308 "a type variable"),
      (309, yyexpect 309(yyfromCh ')')),
      (310, yyparsing  310 "a type constructor"),
      (311, yyparsing  311 "a non function type"),
      (312, yyparsing  312 "a non function type"),
      (313, yyparsing  313 "a non function type"),
      (314, yyexpect 314(yyfromCh ')')),
      (315, yyparsing  315 "a type constructor"),
      (316, yyexpect 316(yyfromCh ']')),
      (317, yyparsing  317 "a type"),
      (318, yyparsing  318 "a constrained type"),
      (319, yyparsing  319 "non function types")];
    sub6 = [      (320, yyparsing  320 "a primary expression"),
      (321, yyexpect 321(yyfromCh '}')),
      (322, yyexpect 322(yyfromCh ']')),
      (323, yyparsing  323 "a primary expression"),
      (324, yyexpect 324(yyfromCh '}')),
      (325, yyparsing  325 "a primary expression"),
      (326, yyparsing  326 "a primary expression"),
      (327, yyparsing  327 "field list"),
      (328, yyparsing  328 "a module"),
      (329, yyparsing  329 "a module import"),
      (330, yyparsing  330 "a module import"),
      (331, yyparsing  331 "an import list"),
      (332, yyparsing  332 "an import list"),
      (333, yyparsing  333 "a module import"),
      (334, yyexpect 334(yyfromCh '(')),
      (335, yyparsing  335 "the type this module derives from"),
      (336, yybadstart 336 "the interfaces this module implements"),
      (337, yyexpect 337(yyfromCh ')')),
      (338, yyexpect 338(yyfromCh ')')),
      (339, yyexpect 339(yyfromCh ')')),
      (340, yyexpect 340(yyfromId VARID)),
      (341, yyparsing  341 "a data definition"),
      (342, yyparsing  342 "a sequence of type variables"),
      (343, yyexpect 343(yyfromCh '=')),
      (344, yyexpect 344(yyfromId EARROW)),
      (345, yybadstart 345 "declarations local to a class, instance or type"),
      (346, yybadstart 346 "declarations local to a class, instance or type"),
      (347, yyparsing  347 "a type declaration"),
      (348, yyexpect 348(yyfromCh '=')),
      (349, yyparsing  349 "an instance derivation"),
      (350, yyparsing  350 "an annotated item"),
      (351, yyparsing  351 "an annotated item"),
      (352, yyparsing  352 "an annotated item"),
      (353, yyparsing  353 "declarations"),
      (354, yyparsing  354 "a where clause"),
      (355, yyparsing  355 "some operators"),
      (356, yyparsing  356 "an annotation"),
      (357, yyparsing  357 "a list of items to annotate"),
      (358, yybadstart 358 "a valid java identifier"),
      (359, yyparsing  359 "a valid java identifier"),
      (360, yyparsing  360 "a method type with optional throws clause"),
      (361, yyparsing  361 "method types with optional throws clauses"),
      (362, yyparsing  362 "a declaration of a native item"),
      (363, yyparsing  363 "a declaration of a native item"),
      (364, yyparsing  364 "a declaration of a native item"),
      (365, yyparsing  365 "a declaration of a native item"),
      (366, yyparsing  366 "declarations local to a class, instance or type"),
      (367, yyparsing  367 "a guard qualifier"),
      (368, yyparsing  368 "guard qualifiers"),
      (369, yybadstart 369 "'='"),
      (370, yyparsing  370 "a function or pattern binding"),
      (371, yyparsing  371 "guarded expressions"),
      (372, yyparsing  372 "a qualified variable name"),
      (373, yyparsing  373 "a qualified variable name"),
      (374, yyparsing  374 "a module clause"),
      (375, yyparsing  375 "a list of qualified variable names"),
      (376, yyparsing  376 "else branch"),
      (377, yyexpect 377(yyfromId ELSE)),
      (378, yyparsing  378 "a top level expression"),
      (379, yyparsing  379 "case alternative"),
      (380, yybadstart 380 "a where clause"),
      (381, yyexpect 381(yyfromCh '}')),
      (382, yyparsing  382 "declarations in a let expression or where clause"),
      (383, yyparsing  383 "a top level expression")];
    sub7 = [      (384, yyexpect 384(yyfromCh '}')),
      (385, yyparsing  385 "a guard qualifier"),
      (386, yyparsing  386 "a list comprehension qualifier"),
      (387, yyparsing  387 "do expression qualifiers"),
      (388, yyparsing  388 "list of expressions separated by ';'"),
      (389, yyparsing  389 "a term"),
      (390, yyparsing  390 "a term"),
      (391, yyparsing  391 "list comprehension qualifiers"),
      (392, yyparsing  392 "a term"),
      (393, yyparsing  393 "a term"),
      (394, yyparsing  394 "field"),
      (395, yyparsing  395 "field list"),
      (396, yyparsing  396 "'.' or 'â¢'"),
      (397, yyparsing  397 "'.' or 'â¢'"),
      (398, yyparsing  398 "a qualified type"),
      (399, yyparsing  399 "type variables bound in a forall"),
      (400, yyparsing  400 "a type variable"),
      (401, yyparsing  401 "a type constructor"),
      (402, yyparsing  402 "a non function type"),
      (403, yyparsing  403 "a non function type"),
      (404, yyparsing  404 "a non function type"),
      (405, yyparsing  405 "a non function type"),
      (406, yyparsing  406 "a type constructor"),
      (407, yyparsing  407 "a non function type"),
      (408, yyparsing  408 "a type"),
      (409, yyparsing  409 "a type"),
      (410, yyparsing  410 "a constrained type"),
      (411, yyparsing  411 "a primary expression"),
      (412, yyexpect 412(yyfromCh '}')),
      (413, yyparsing  413 "a primary expression"),
      (414, yyparsing  414 "a primary expression"),
      (415, yyparsing  415 "a primary expression"),
      (416, yyparsing  416 "a primary expression"),
      (417, yyparsing  417 "field"),
      (418, yyparsing  418 "a primary expression"),
      (419, yyparsing  419 "a primary expression"),
      (420, yyparsing  420 "field"),
      (421, yyparsing  421 "field"),
      (422, yyparsing  422 "field list"),
      (423, yyparsing  423 "a module import"),
      (424, yyparsing  424 "a module import"),
      (425, yyparsing  425 "an import list"),
      (426, yyparsing  426 "an import item"),
      (427, yyparsing  427 "a qualified variable name"),
      (428, yyparsing  428 "an import specification"),
      (429, yyparsing  429 "an import list"),
      (430, yyexpect 430(yyfromCh ')')),
      (431, yyparsing  431 "a list of import items"),
      (432, yyparsing  432 "an import specification"),
      (433, yyparsing  433 "an import item"),
      (434, yyparsing  434 "an import item"),
      (435, yyparsing  435 "an import item"),
      (436, yyparsing  436 "an import item"),
      (437, yyparsing  437 "an import list"),
      (438, yyparsing  438 "the type this module derives from"),
      (439, yyparsing  439 "the interfaces this module implements"),
      (440, yyexpect 440(yyfromId WHERE)),
      (441, yyparsing  441 "an annotated item"),
      (442, yyparsing  442 "an annotated item"),
      (443, yyparsing  443 "an annotated item"),
      (444, yyexpect 444(yyfromId DCOLON)),
      (445, yyparsing  445 "a variant of an algebraic datatype"),
      (446, yyparsing  446 "a variant of an algebraic datatype"),
      (447, yyparsing  447 "a native data type")];
    sub8 = [      (448, yyparsing  448 "a variant of an algebraic datatype"),
      (449, yyparsing  449 "a variant of an algebraic datatype"),
      (450, yyparsing  450 "a variant of an algebraic datatype"),
      (451, yyexpect 451(yyfromId NATIVE)),
      (452, yyexpect 452(yyfromId NATIVE)),
      (453, yyexpect 453(yyfromId CONID)),
      (454, yyexpect 454(yyfromId CONID)),
      (455, yybadstart 455 "a valid java identifier"),
      (456, yyparsing  456 "a data definition"),
      (457, yyparsing  457 "an algebraic datatype"),
      (458, yyparsing  458 "a variant of an algebraic datatype"),
      (459, yyparsing  459 "a variant of an algebraic datatype"),
      (460, yyparsing  460 "a variant of an algebraic datatype"),
      (461, yyparsing  461 "a sequence of type variables"),
      (462, yyparsing  462 "a data definition"),
      (463, yyexpect 463(yyfromId VARID)),
      (464, yyparsing  464 "a type class declaration"),
      (465, yyparsing  465 "an instance declaration"),
      (466, yyparsing  466 "a type declaration"),
      (467, yyparsing  467 "a type declaration"),
      (468, yyparsing  468 "a where clause"),
      (469, yyexpect 469(yyfromCh '}')),
      (470, yyparsing  470 "a valid java identifier"),
      (471, yyparsing  471 "a method type with optional throws clause"),
      (472, yyparsing  472 "method types with optional throws clauses"),
      (473, yyparsing  473 "a declaration of a native item"),
      (474, yyparsing  474 "a declaration of a native item"),
      (475, yyparsing  475 "a declaration of a native item"),
      (476, yyparsing  476 "a protected or private local declaration"),
      (477, yyparsing  477 "a protected or private local declaration"),
      (478, yyparsing  478 "a protected or private local declaration"),
      (479, yyparsing  479 "declarations local to a class, instance or type"),
      (480, yyparsing  480 "a commented local declaration"),
      (481, yyparsing  481 "a protected or private local declaration"),
      (482, yyexpect 482(yyfromCh '}')),
      (483, yybadstart 483 "the next definition"),
      (484, yyparsing  484 "a commented local declaration"),
      (485, yyparsing  485 "guard qualifiers"),
      (486, yyparsing  486 "'='"),
      (487, yyparsing  487 "'='"),
      (488, yyparsing  488 "a guarded expression"),
      (489, yyparsing  489 "a qualified variable name"),
      (490, yyparsing  490 "a list of qualified variable names"),
      (491, yyparsing  491 "else branch"),
      (492, yyparsing  492 "a top level expression"),
      (493, yyparsing  493 "case alternative"),
      (494, yyparsing  494 "case alternative"),
      (495, yyparsing  495 "list of case alternatives"),
      (496, yyparsing  496 "case alternative"),
      (497, yyparsing  497 "a top level expression"),
      (498, yyparsing  498 "a top level expression"),
      (499, yyparsing  499 "a list comprehension qualifier"),
      (500, yyparsing  500 "list of expressions separated by ';'"),
      (501, yyparsing  501 "list comprehension qualifiers"),
      (502, yyparsing  502 "a qualified type"),
      (503, yyparsing  503 "a type kind"),
      (504, yyparsing  504 "a type kind"),
      (505, yyparsing  505 "a type kind"),
      (506, yyexpect 506(yyfromCh ')')),
      (507, yyparsing  507 "a type kind"),
      (508, yyparsing  508 "a list of types"),
      (509, yyexpect 509(yyfromCh ')')),
      (510, yyparsing  510 "a list of types separated by '|'"),
      (511, yyexpect 511(yyfromCh ')'))];
    sub9 = [      (512, yyparsing  512 "a non function type"),
      (513, yyparsing  513 "a primary expression"),
      (514, yyparsing  514 "a primary expression"),
      (515, yyparsing  515 "a primary expression"),
      (516, yyparsing  516 "field"),
      (517, yyparsing  517 "field"),
      (518, yyparsing  518 "a module import"),
      (519, yyparsing  519 "an import item"),
      (520, yyparsing  520 "a qualified variable name"),
      (521, yyparsing  521 "an import specification"),
      (522, yyparsing  522 "an import list"),
      (523, yyparsing  523 "a list of import items"),
      (524, yyparsing  524 "a simple name for a member or import item"),
      (525, yyparsing  525 "a simple name for a member or import item"),
      (526, yyparsing  526 "a simple name for a member or import item"),
      (527, yyparsing  527 "an import specification"),
      (528, yyexpect 528(yyfromCh ')')),
      (529, yyparsing  529 "the interfaces this module implements"),
      (530, yyexpect 530(yyfromCh '{')),
      (531, yyparsing  531 "specification for module class "),
      (532, yyparsing  532 "a variant of an algebraic datatype"),
      (533, yyparsing  533 "constructor types"),
      (534, yyparsing  534 "a variant of an algebraic datatype"),
      (535, yyparsing  535 "a variant of an algebraic datatype"),
      (536, yyparsing  536 "a variant of an algebraic datatype"),
      (537, yyparsing  537 "a variant of an algebraic datatype"),
      (538, yyparsing  538 "a variant of an algebraic datatype"),
      (539, yyparsing  539 "a native data type"),
      (540, yyparsing  540 "a native data type"),
      (541, yyparsing  541 "a variant of an algebraic datatype"),
      (542, yyparsing  542 "a variant of an algebraic datatype"),
      (543, yyparsing  543 "a data definition"),
      (544, yyparsing  544 "an algebraic datatype"),
      (545, yyparsing  545 "a variant of an algebraic datatype"),
      (546, yybadstart 546 "a valid java identifier"),
      (547, yyparsing  547 "a data definition"),
      (548, yybadstart 548 "declarations local to a class, instance or type"),
      (549, yyparsing  549 "a type declaration"),
      (550, yyparsing  550 "a where clause"),
      (551, yyparsing  551 "a method type with optional throws clause"),
      (552, yyparsing  552 "method types with optional throws clauses"),
      (553, yyparsing  553 "a protected or private local declaration"),
      (554, yyparsing  554 "a protected or private local declaration"),
      (555, yyparsing  555 "a protected or private local declaration"),
      (556, yyparsing  556 "a commented local declaration"),
      (557, yyparsing  557 "declarations local to a class, instance or type"),
      (558, yyparsing  558 "local declarations"),
      (559, yyparsing  559 "guard qualifiers"),
      (560, yyparsing  560 "a guarded expression"),
      (561, yyparsing  561 "case alternative"),
      (562, yyparsing  562 "list of case alternatives"),
      (563, yyexpect 563(yyfromCh ')')),
      (564, yyparsing  564 "a type variable"),
      (565, yyparsing  565 "a type kind"),
      (566, yyparsing  566 "a list of types"),
      (567, yyparsing  567 "a non function type"),
      (568, yyparsing  568 "a list of types separated by '|'"),
      (569, yyparsing  569 "a non function type"),
      (570, yyparsing  570 "a member import specification"),
      (571, yyparsing  571 "an import item"),
      (572, yyexpect 572(yyfromCh ')')),
      (573, yyparsing  573 "a member import specification"),
      (574, yyparsing  574 "a list of member imports"),
      (575, yyparsing  575 "a list of import items")];
    sub10 = [      (576, yyparsing  576 "an import list"),
      (577, yyparsing  577 "java code"),
      (578, yyparsing  578 "a field specification"),
      (579, yyparsing  579 "a field specification"),
      (580, yyexpect 580(yyfromId VARID)),
      (581, yyexpect 581(yyfromId VARID)),
      (582, yyparsing  582 "a constructor field"),
      (583, yyparsing  583 "a field specification"),
      (584, yyexpect 584(yyfromCh '}')),
      (585, yyparsing  585 "constructor fields"),
      (586, yyexpect 586(yyfromId DCOLON)),
      (587, yyparsing  587 "field specifications"),
      (588, yyparsing  588 "a field specification"),
      (589, yyparsing  589 "a field specification"),
      (590, yyparsing  590 "an algebraic datatype"),
      (591, yyparsing  591 "a data definition"),
      (592, yyparsing  592 "a type class declaration"),
      (593, yyparsing  593 "local declarations"),
      (594, yyparsing  594 "a type kind"),
      (595, yyparsing  595 "a type kind"),
      (596, yyparsing  596 "a list of types"),
      (597, yyparsing  597 "a list of types separated by '|'"),
      (598, yyparsing  598 "a member import specification"),
      (599, yyparsing  599 "an import item"),
      (600, yyparsing  600 "a member import specification"),
      (601, yyparsing  601 "a list of member imports"),
      (602, yyparsing  602 "java token"),
      (603, yyparsing  603 "java token"),
      (604, yyparsing  604 "java token"),
      (605, yyparsing  605 "java token"),
      (606, yyparsing  606 "java token"),
      (607, yyparsing  607 "java token"),
      (608, yyparsing  608 "java token"),
      (609, yyparsing  609 "java token"),
      (610, yyparsing  610 "java token"),
      (611, yyparsing  611 "java token"),
      (612, yyparsing  612 "java token"),
      (613, yyparsing  613 "java token"),
      (614, yyparsing  614 "java token"),
      (615, yyparsing  615 "java token"),
      (616, yyparsing  616 "java token"),
      (617, yyparsing  617 "java token"),
      (618, yyparsing  618 "java token"),
      (619, yyparsing  619 "java token"),
      (620, yyparsing  620 "java token"),
      (621, yyparsing  621 "java token"),
      (622, yyparsing  622 "java token"),
      (623, yyparsing  623 "java token"),
      (624, yyparsing  624 "java token"),
      (625, yyparsing  625 "java token"),
      (626, yyparsing  626 "java token"),
      (627, yyparsing  627 "java token"),
      (628, yyparsing  628 "java token"),
      (629, yyparsing  629 "java token"),
      (630, yyparsing  630 "java token"),
      (631, yyparsing  631 "java token"),
      (632, yyparsing  632 "java token"),
      (633, yyparsing  633 "java token"),
      (634, yyparsing  634 "java token"),
      (635, yyparsing  635 "java token"),
      (636, yyparsing  636 "java token"),
      (637, yyparsing  637 "java token"),
      (638, yyparsing  638 "java token"),
      (639, yyparsing  639 "java token")];
    sub11 = [      (640, yyparsing  640 "java token"),
      (641, yyparsing  641 "java token"),
      (642, yyparsing  642 "java token"),
      (643, yyparsing  643 "java token"),
      (644, yyparsing  644 "java token"),
      (645, yyparsing  645 "java token"),
      (646, yyparsing  646 "java token"),
      (647, yyparsing  647 "java token"),
      (648, yyparsing  648 "java token"),
      (649, yyparsing  649 "java token"),
      (650, yyparsing  650 "java token"),
      (651, yyparsing  651 "java token"),
      (652, yyparsing  652 "java token"),
      (653, yyparsing  653 "java tokens"),
      (654, yyparsing  654 "java code"),
      (655, yyparsing  655 "java token"),
      (656, yyparsing  656 "java token"),
      (657, yyparsing  657 "java token"),
      (658, yyparsing  658 "java token"),
      (659, yyparsing  659 "java token"),
      (660, yyparsing  660 "java token"),
      (661, yyparsing  661 "java token"),
      (662, yyparsing  662 "java token"),
      (663, yyparsing  663 "java token"),
      (664, yyparsing  664 "java token"),
      (665, yyparsing  665 "java token"),
      (666, yyexpect 666(yyfromCh '}')),
      (667, yyparsing  667 "java tokens"),
      (668, yyparsing  668 "a field specification"),
      (669, yyparsing  669 "a field specification"),
      (670, yyparsing  670 "a field specification"),
      (671, yyparsing  671 "a field specification"),
      (672, yyexpect 672(yyfromId DCOLON)),
      (673, yyparsing  673 "a variant of an algebraic datatype"),
      (674, yyparsing  674 "constructor fields"),
      (675, yyparsing  675 "constructor fields"),
      (676, yyparsing  676 "a constructor field"),
      (677, yyparsing  677 "field specifications"),
      (678, yyparsing  678 "a list of member imports"),
      (679, yyparsing  679 "java tokens"),
      (680, yyexpect 680(yyfromCh '}')),
      (681, yyparsing  681 "java code"),
      (682, yyparsing  682 "java tokens"),
      (683, yyparsing  683 "a constructor field"),
      (684, yyparsing  684 "constructor fields"),
      (685, yyparsing  685 "constructor fields"),
      (686, yyparsing  686 "a constructor field"),
      (687, yyparsing  687 "field specifications"),
      (688, yyparsing  688 "java tokens"),
      (689, yyparsing  689 "java tokens"),
      (690, yyparsing  690 "a constructor field"),
      (691, yyparsing  691 "java tokens")];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` sub8 `seq` sub9 `seq` sub10 `seq` sub11 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7 ++ sub8 ++ sub9 ++ sub10 ++ sub11);
private yyeacts = let 
    sub1 = [      (5, yyAccept),
      (8, (-25)),
      (9, (-15)),
      (11, (-172)),
      (12, (-10)),
      (14, (-177)),
      (15, (-178)),
      (16, (-175)),
      (17, (-173)),
      (18, (-174)),
      (19, (-176)),
      (20, (-13)),
      (22, (-18)),
      (24, (-183)),
      (25, (-186)),
      (27, (-323)),
      (28, (-324)),
      (33, (-327)),
      (34, (-326)),
      (35, (-329)),
      (36, (-330)),
      (37, (-331)),
      (38, (-325)),
      (39, (-332)),
      (40, (-328)),
      (44, (-195)),
      (45, (-194)),
      (47, (-398)),
      (48, (-3)),
      (49, (-4)),
      (50, (-396)),
      (51, (-399)),
      (53, (-362)),
      (54, (-397)),
      (55, (-374)),
      (56, (-370)),
      (57, (-375)),
      (58, (-376)),
      (59, (-378)),
      (61, (-382)),
      (62, (-22)),
      (69, (-26)),
      (70, (-16)),
      (71, (-12)),
      (73, (-20)),
      (74, (-187)),
      (75, (-185)),
      (77, (-188)),
      (78, (-182)),
      (83, (-369)),
      (84, (-193)),
      (86, (-402)),
      (93, (-413)),
      (96, (-333)),
      (99, (-379)),
      (103, (-377)),
      (108, (-117)),
      (125, (-1)),
      (126, (-27)),
      (127, (-30)),
      (128, (-32)),
      (129, (-33)),
      (130, (-41)),
      (131, (-119))];
    sub2 = [      (132, (-38)),
      (133, (-39)),
      (134, (-40)),
      (135, (-118)),
      (136, (-120)),
      (137, (-121)),
      (138, (-122)),
      (139, (-123)),
      (140, (-127)),
      (141, (-128)),
      (142, (-129)),
      (143, (-206)),
      (147, (-213)),
      (149, (-314)),
      (153, (-24)),
      (154, (-17)),
      (156, (-11)),
      (157, (-184)),
      (158, (-181)),
      (159, (-364)),
      (163, (-137)),
      (170, (-336)),
      (172, (-406)),
      (173, (-419)),
      (175, (-412)),
      (177, (-405)),
      (179, (-404)),
      (180, (-403)),
      (187, (-414)),
      (189, (-359)),
      (190, (-171)),
      (191, (-400)),
      (195, (-252)),
      (200, (-254)),
      (201, (-361)),
      (202, (-229)),
      (203, (-230)),
      (204, (-236)),
      (205, (-235)),
      (206, (-245)),
      (207, (-294)),
      (208, (-246)),
      (209, (-247)),
      (210, (-367)),
      (211, (-368)),
      (212, (-384)),
      (215, (-385)),
      (216, (-386)),
      (221, (-145)),
      (222, (-196)),
      (223, (-198)),
      (224, (-197)),
      (226, (-217)),
      (228, (-215)),
      (229, (-216)),
      (230, (-214)),
      (236, (-37)),
      (240, (-34)),
      (241, (-35)),
      (242, (-36)),
      (243, (-212)),
      (247, (-28)),
      (248, (-31)),
      (250, (-321))];
    sub3 = [      (251, (-200)),
      (252, (-201)),
      (253, (-199)),
      (254, (-202)),
      (255, (-204)),
      (258, (-5)),
      (259, (-6)),
      (261, (-9)),
      (267, (-268)),
      (270, (-320)),
      (271, (-351)),
      (274, (-192)),
      (276, (-191)),
      (277, (-19)),
      (278, (-363)),
      (287, (-383)),
      (292, (-407)),
      (293, (-409)),
      (294, (-408)),
      (295, (-432)),
      (298, (-415)),
      (300, (-360)),
      (302, (-401)),
      (305, (-228)),
      (310, (-256)),
      (312, (-239)),
      (313, (-238)),
      (315, (-255)),
      (319, (-295)),
      (326, (-390)),
      (328, (-2)),
      (330, (-145)),
      (331, (-145)),
      (333, (-142)),
      (345, (-314)),
      (346, (-314)),
      (349, (-267)),
      (353, (-29)),
      (355, (-203)),
      (356, (-205)),
      (357, (-211)),
      (359, (-8)),
      (360, (-219)),
      (361, (-220)),
      (362, (-222)),
      (370, (-319)),
      (371, (-352)),
      (373, (-190)),
      (374, (-21)),
      (376, (-366)),
      (382, (-141)),
      (385, (-346)),
      (386, (-337)),
      (387, (-344)),
      (389, (-411)),
      (390, (-410)),
      (392, (-417)),
      (393, (-416)),
      (394, (-429)),
      (395, (-421)),
      (396, (-233)),
      (397, (-232)),
      (399, (-227)),
      (401, (-258))];
    sub4 = [      (402, (-248)),
      (406, (-257)),
      (407, (-251)),
      (408, (-236)),
      (409, (-237)),
      (410, (-234)),
      (414, (-394)),
      (415, (-395)),
      (416, (-389)),
      (417, (-426)),
      (418, (-387)),
      (419, (-388)),
      (420, (-427)),
      (422, (-424)),
      (423, (-145)),
      (424, (-144)),
      (425, (-149)),
      (429, (-147)),
      (433, (-153)),
      (434, (-156)),
      (435, (-157)),
      (436, (-158)),
      (438, (-44)),
      (441, (-209)),
      (442, (-207)),
      (443, (-208)),
      (445, (-290)),
      (447, (-271)),
      (456, (-275)),
      (457, (-278)),
      (458, (-280)),
      (459, (-283)),
      (460, (-289)),
      (461, (-277)),
      (464, (-264)),
      (465, (-266)),
      (466, (-312)),
      (468, (-317)),
      (470, (-7)),
      (473, (-223)),
      (474, (-224)),
      (475, (-225)),
      (479, (-315)),
      (481, (-130)),
      (484, (-136)),
      (486, (-334)),
      (487, (-335)),
      (489, (-189)),
      (490, (-180)),
      (491, (-365)),
      (492, (-371)),
      (493, (-354)),
      (496, (-355)),
      (497, (-372)),
      (498, (-373)),
      (500, (-435)),
      (501, (-340)),
      (502, (-231)),
      (503, (-262)),
      (504, (-261)),
      (508, (-241)),
      (512, (-240)),
      (513, (-393)),
      (514, (-391))];
    sub5 = [      (515, (-392)),
      (518, (-143)),
      (521, (-161)),
      (522, (-148)),
      (524, (-168)),
      (525, (-169)),
      (526, (-170)),
      (527, (-160)),
      (529, (-46)),
      (531, (-42)),
      (533, (-293)),
      (534, (-292)),
      (535, (-282)),
      (536, (-285)),
      (537, (-286)),
      (538, (-284)),
      (539, (-269)),
      (540, (-270)),
      (541, (-288)),
      (542, (-287)),
      (543, (-272)),
      (545, (-281)),
      (547, (-274)),
      (548, (-314)),
      (549, (-313)),
      (550, (-318)),
      (551, (-218)),
      (552, (-221)),
      (553, (-131)),
      (554, (-132)),
      (555, (-133)),
      (556, (-135)),
      (557, (-316)),
      (559, (-348)),
      (560, (-350)),
      (561, (-353)),
      (562, (-357)),
      (564, (-253)),
      (567, (-249)),
      (569, (-250)),
      (571, (-155)),
      (575, (-152)),
      (576, (-146)),
      (583, (-311)),
      (588, (-305)),
      (589, (-308)),
      (590, (-279)),
      (591, (-273)),
      (592, (-265)),
      (593, (-126)),
      (594, (-263)),
      (595, (-259)),
      (596, (-242)),
      (597, (-244)),
      (598, (-164)),
      (599, (-154)),
      (600, (-163)),
      (602, (-49)),
      (603, (-50)),
      (604, (-51)),
      (605, (-52)),
      (606, (-53)),
      (607, (-54)),
      (608, (-55))];
    sub6 = [      (609, (-56)),
      (610, (-57)),
      (611, (-58)),
      (612, (-59)),
      (613, (-60)),
      (614, (-61)),
      (615, (-62)),
      (616, (-63)),
      (617, (-64)),
      (618, (-65)),
      (619, (-66)),
      (620, (-67)),
      (621, (-68)),
      (622, (-69)),
      (623, (-70)),
      (624, (-71)),
      (625, (-72)),
      (626, (-73)),
      (627, (-74)),
      (628, (-75)),
      (629, (-76)),
      (630, (-77)),
      (631, (-78)),
      (632, (-79)),
      (633, (-80)),
      (634, (-81)),
      (635, (-82)),
      (636, (-83)),
      (637, (-84)),
      (638, (-85)),
      (639, (-86)),
      (640, (-87)),
      (641, (-88)),
      (642, (-89)),
      (643, (-90)),
      (644, (-91)),
      (645, (-92)),
      (646, (-93)),
      (647, (-94)),
      (648, (-95)),
      (649, (-96)),
      (650, (-97)),
      (651, (-106)),
      (652, (-107)),
      (654, (-48)),
      (655, (-104)),
      (656, (-102)),
      (657, (-103)),
      (658, (-98)),
      (659, (-99)),
      (660, (-100)),
      (661, (-101)),
      (662, (-105)),
      (663, (-108)),
      (664, (-109)),
      (665, (-110)),
      (668, (-307)),
      (669, (-306)),
      (670, (-310)),
      (671, (-309)),
      (673, (-291)),
      (678, (-167)),
      (681, (-47)),
      (682, (-112))];
    sub7 = [      (684, (-300)),
      (685, (-299)),
      (686, (-301)),
      (687, (-304)),
      (688, (-116)),
      (690, (-302)),
      (691, (-114))];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` sub5 `seq` sub6 `seq` sub7 `seq` arrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4 ++ sub5 ++ sub6 ++ sub7);


decodeArr s1 s2 = arrayFromIndexList (zip (un s1) (un s2))
    where
        un :: String -> [Int]
        un s = (map ord . unpacked) s

private yygo0 = decodeArr "\u0001\u0002\u0003\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015" "\u0005\u0005\u0005\u0007\u0007\u0007\u0006\u0006\u0006\u0006\u0006"
private yygo1 = decodeArr "\u000e\u000f\u0010\u0019\u001a" "\t\t\t\n\n"
private yygo2 = decodeArr "\n\u000b\f\rÂ¬Â­Â®Â¯Â°Â±Â²" "\u0014\u0014\u0014\u0016\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo4 = decodeArr "\u0004ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "0222333446666666666771155558888899::<<;;;;;;;;;;;;;;======================"
private yygo6 = decodeArr "\u0016\u0017\u0018" "BAA"
private yygo8 = decodeArr "\u0019\u001a" "EE"
private yygo10 = decodeArr "\u000e\u000f\u0010" "FFF"
private yygo13 = decodeArr "\n\u000b\fÂ¬Â­Â®Â¯Â°Â±Â²" "GGG\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo23 = decodeArr "\n\u000b\f\rÂ¬Â­Â®Â¯Â°Â±Â²" "\u0014\u0014\u0014I\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo26 = decodeArr "Â»Â¼ÃÃ" "NNMM"
private yygo29 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677OO55558888899::<<;;;;;;;;;;;;;;======================"
private yygo30 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677PP55558888899::<<;;;;;;;;;;;;;;======================"
private yygo41 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677SSSSS99::<<;;;;;;;;;;;;;;======================"
private yygo42 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£" "222333YZZ666666666677XX\\\\\\\\8888899::<<;;;;;;;;;;;;;;======================[["
private yygo43 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¯Æ°Æ±" "22233344666666666677^^55558888899::<<;;;;;;;;;;;;;;======================___"
private yygo46 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666a77``55558888899::<<;;;;;;;;;;;;;;======================"
private yygo52 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666cc<<;;;;;;;;;;;;;;======================"
private yygo57 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666gg<<;;;;;;;;;;;;;;======================"
private yygo64 = decodeArr "\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*uvwxyz{\u007f\u0080\u0081\u008e\u008f\u0090Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄÄÄ¸Ä¹Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "}}}~~~~\u0081\u0081\u0081\u0081\u0080\u0080\u0080\u0080\u0086\u007f\u0082\u0082\u0082\u0082\u0082\u0082\u008b\u008b\u008b\u0084\u0084\u0084\u008f22233344\u0090\u0090\u0090\u0085\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo66 = decodeArr "\u0016\u0017\u0018" "B\u0099\u0099"
private yygo67 = decodeArr "\n\u000b\f\rÂ¬Â­Â®Â¯Â°Â±Â²" "\u0014\u0014\u0014\u009a\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo72 = decodeArr "\n\u000b\fÂ¬Â­Â®Â¯Â°Â±Â²" "\u009c\u009c\u009c\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo76 = decodeArr "Â»Â¼ÃÃ" "\u009e\u009eMM"
private yygo79 = decodeArr "Å«Å¬" "Â¡Â¡"
private yygo81 = decodeArr "\u0089\u008a\u008b\u008c\u008dÂ«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÄ¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Â¥Â¥Â¦Â¦Â¦\u008f22233344Â£\u0092\u0092\u0092\u0092\u0091\u0091Â¤Â¤Â¤\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo82 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666Â©Â©Â©Â«Â«Â«ÂªÂª77Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo85 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677SSSSS99::<<;;;;;;;;;;;;;;======================"
private yygo87 = decodeArr "Æ¢Æ£" "Â­Â­"
private yygo89 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Â²Â²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo90 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666cc<<;;;;;;;;;;;;;;======================"
private yygo92 = decodeArr "Ã" "Â·"
private yygo97 = decodeArr "Å§Å¨" "Â½Â½"
private yygo98 = decodeArr "Â«Æ¤Æ¥Æ¦Æ­Æ®" "ÃÃÃÃÃÃ"
private yygo100 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo101 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo102 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo104 = decodeArr "ÃÃÃ" "ÃÃÃ"
private yygo105 = decodeArr "Æ§Æ¨Æ©ÆªÆ«Æ¬" "ÃÃÃÃÃÃ"
private yygo106 = decodeArr "\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*uvwxyz{\u007f\u0080\u0081\u008e\u008f\u0090Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄÄÄ¸Ä¹Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "ÃÃÃ~~~~\u0081\u0081\u0081\u0081\u0080\u0080\u0080\u0080\u0086\u007f\u0082\u0082\u0082\u0082\u0082\u0082\u008b\u008b\u008b\u0084\u0084\u0084\u008f22233344\u0090\u0090\u0090\u0085\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo109 = decodeArr "\n\u000b\f\rÂ¬Â­Â®Â¯Â°Â±Â²" "\u0014\u0014\u0014Ã\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo113 = decodeArr "Â«ÃÃÃÃÃÃÃ" "\u008fÃ¤Ã¥Ã¥Ã¦Ã¦Ã¦Ã¦"
private yygo116 = decodeArr "Â¸Â¹ÂºÃ¾Ã¿ÄÄÄ" "ÃÃÃÃ«Ã«Ã«Ã«Ã«"
private yygo117 = decodeArr "ÄÄÄÄÄ" "Ã¬\u0095\u0095\u0095\u0095"
private yygo119 = decodeArr "Â¸Â¹ÂºÃ¾Ã¿ÄÄÄ" "ÃÃÃÃ®Ã®Ã®Ã®Ã®"
private yygo120 = decodeArr "vwxyz{\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄÄÄ¸Ä¹Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Ã°Ã°Ã°Ã°Ã°Ã°\u008b\u008b\u008b\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo121 = decodeArr "vwxyz{\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄÄÄ¸Ä¹Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Ã±Ã±Ã±Ã±Ã±Ã±\u008b\u008b\u008b\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo122 = decodeArr "vwxyz{\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄÄÄ¸Ä¹Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Ã²Ã²Ã²Ã²Ã²Ã²\u008b\u008b\u008b\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo123 = decodeArr "ÃÃÃÃÃÃÃ Ã¡" "\u0094\u0094\u0094\u0094Ã³Ã³Ã³Ã³"
private yygo124 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¢Æ£" "222333ÃµÃ¶Ã¶666666666677XX\\\\\\\\8888899::<<;;;;;;;;;;;;;;======================[["
private yygo126 = decodeArr "\u0019\u001a" "Ã·Ã·"
private yygo127 = decodeArr "\u001e\u001f !\"#$%&'()*uvwxyz{\u007f\u0080\u0081\u008e\u008f\u0090Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄÄÄ¸Ä¹Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Ã¸Ã¸Ã¸Ã¸\u0081\u0081\u0081\u0081\u0080\u0080\u0080\u0080\u0086\u007f\u0082\u0082\u0082\u0082\u0082\u0082\u008b\u008b\u008b\u0084\u0084\u0084\u008f22233344\u0090\u0090\u0090\u0085\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo142 = decodeArr "Ä½Ä¾" "ÃºÃº"
private yygo144 = decodeArr "ÃÃÃÃÃÃ" "Ã½Ã¾Ã¾Ã¾Ã¿Ã¿"
private yygo148 = decodeArr "\u0005\u0006\u0007\b\tÃÃÃ" "ÄÄÄÄÄÄÄÄ"
private yygo149 = decodeArr "ÄºÄ»Ä¼" "ÄÄÄ"
private yygo150 = decodeArr "ÅÅÅ " "ÄÄÄ"
private yygo152 = decodeArr "Â³Â´Â»Â¼Â½Â¾Â¿ÃÃÃÃ" "ÄÄÄÄÄÄÄÄÄMM"
private yygo155 = decodeArr "\n\u000b\f\rÂ¬Â­Â®Â¯Â°Â±Â²" "\u0014\u0014\u0014Ä\u0015\u0015\u0015\u0015\u0015\u0015\u0015"
private yygo161 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677ÄÄ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo164 = decodeArr "Ä½Ä¾" "ÃºÃº"
private yygo165 = decodeArr "\u0019\u001a" "ÄÄ"
private yygo169 = decodeArr "\u0019\u001a" "ÄÄ"
private yygo174 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ²Æ³Æ´" "22233344666666666677Ä Ä 55558888899::<<;;;;;;;;;;;;;;======================Ä¡Ä¡Ä¡"
private yygo176 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¯Æ°Æ±" "22233344666666666677Ä¢Ä¢55558888899::<<;;;;;;;;;;;;;;======================Ä£Ä£Ä£"
private yygo181 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo182 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677ÃÃÃÃ8888899::<<;;;;;;;;;;;;;;======================"
private yygo184 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ¯Æ°Æ±" "22233344666666666677Ä¢Ä¢55558888899::<<;;;;;;;;;;;;;;======================Ä§Ä§Ä§"
private yygo185 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666Ä¨Ä¨Ä¨Ä©Ä©Ä©ÂªÂª77Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo186 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Ä«Ä«55558888899::<<;;;;;;;;;;;;;;======================"
private yygo188 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Ä¬Ä¬55558888899::<<;;;;;;;;;;;;;;======================"
private yygo197 = decodeArr "Ã¢Ã£Ã¤" "Ä²Ä²Ä³"
private yygo198 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§Æ¢Æ£" "ÃÃÃÄ¸Ä·Ä·Ä·Ä¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÄºÄº"
private yygo199 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÄ¸Ä¼Ä¼Ä¼Ä¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo207 = decodeArr "Â¸Â¹ÂºÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÄ¿Ä¿"
private yygo213 = decodeArr "Æ§Æ¨Æ©ÆªÆ«Æ¬" "ÅÅÅÃÃÃ"
private yygo214 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677ÅÅ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo221 = decodeArr "\u0091\u0092\u0093\u0094\u0095Â«" "ÅÅÅÅÅÅ"
private yygo225 = decodeArr "+," "ÅÅ"
private yygo227 = decodeArr "ÃÃÃ" "ÅÅÅ"
private yygo231 = decodeArr "Ã¼Ã½ÄÄ" "ÅÅÅÅ"
private yygo232 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÄ¸ÅÅÅÄ¹ÃÃÃÃÃÃÅÅÃÃÃÃÃÃÃ"
private yygo233 = decodeArr "Æ¢Æ£" "ÄºÄº"
private yygo235 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÅÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo237 = decodeArr "Ã¼Ã½ÄÄ" "ÅÅÅÅ"
private yygo238 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÅÅÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo239 = decodeArr "Â«ÃÃÃÃÃÃÃ" "\u008fÃ¤Ã¥Ã¥Ã¦Ã¦Ã¦Ã¦"
private yygo244 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677SSSSS99::<<;;;;;;;;;;;;;;======================"
private yygo245 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Â²Â²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo246 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666cc<<;;;;;;;;;;;;;;======================"
private yygo247 = decodeArr "\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*uvwxyz{\u007f\u0080\u0081\u008e\u008f\u0090Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡ÄÄÄÄÄÄÄÄÄÄ¸Ä¹Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Å¡Å¡Å¡~~~~\u0081\u0081\u0081\u0081\u0080\u0080\u0080\u0080\u0086\u007f\u0082\u0082\u0082\u0082\u0082\u0082\u008b\u008b\u008b\u0084\u0084\u0084\u008f22233344\u0090\u0090\u0090\u0085\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u0088\u0088\u0089\u008a\u0083\u0095\u0095\u0095\u0095\u0087\u0087\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo254 = decodeArr "ÃÃÃÃÃÃ" "Ã½Ã¾Ã¾Ã¾Å£Å£"
private yygo256 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÅ¤Å¤ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo257 = decodeArr "Â«ÃÃÃÃÃÃ" "\u008f\u0092\u0092\u0092\u0092Å¥Å¥"
private yygo260 = decodeArr "\u0005\u0006\u0007\b\t" "Å§Å§Å§Å§Å§"
private yygo262 = decodeArr "Â¸Â¹ÂºÃÃÃÃÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÅ©Å©ÅªÅªÅ¨Å¨ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo268 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666Å°Å°Å±Å±Å±77Å¯Å¯55558888899::<<;;;;;;;;;;;;;;======================"
private yygo269 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Å²Å²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo271 = decodeArr "ÅÅÅ " "ÄÅ³Å³"
private yygo272 = decodeArr "Â»Â¼ÃÃ" "ÅµÅµMM"
private yygo279 = decodeArr "Å­Å®" "ÅºÅº"
private yygo280 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅ¡Å¢Å£Å¤Å¥Å¦Å§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666Å»Å¼Å¼Å¼Å½Å½Å½77``55558888899::<<;;;;;;;;;;;;;;======================"
private yygo281 = decodeArr "\u0089\u008a\u008b\u008c\u008dÂ«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÄ¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Â¥Â¥Å¾Å¾Å¾\u008f22233344Â£\u0092\u0092\u0092\u0092\u0091\u0091Â¤Â¤Â¤\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo283 = decodeArr "\u0089\u008a\u008b\u008c\u008dÂ«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÄ¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Â¥Â¥ÆÆÆ\u008f22233344Â£\u0092\u0092\u0092\u0092\u0091\u0091Â¤Â¤Â¤\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo284 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo285 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo286 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666Â©Â©Â©ÆÆÆÂªÂª77Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo301 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677ÆÆ55558888899::<<;;;;;;;;;;;;;;======================"
private yygo303 = decodeArr "Â«Æ¤Æ¥Æ¦Æ­Æ®" "ÃÆÆÆÃÃ"
private yygo306 = decodeArr "Ã¨Ã©" "ÆÆ"
private yygo307 = decodeArr "Ã¢Ã£Ã¤" "ÆÆÄ³"
private yygo317 = decodeArr "Â¸Â¹ÂºÃ¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÆÆÆÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo318 = decodeArr "Â¸Â¹ÂºÃ¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÆÆÆÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo323 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Æ¡Æ¡55558888899::<<;;;;;;;;;;;;;;======================"
private yygo325 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Æ¤Æ¤55558888899::<<;;;;;;;;;;;;;;======================"
private yygo327 = decodeArr "Æ§Æ¨Æ©ÆªÆ«Æ¬" "Æ¦Æ¦Æ¦ÃÃÃ"
private yygo330 = decodeArr "\u0091\u0092\u0093\u0094\u0095Â«" "Æ¨Æ¨Æ¨Æ¨Æ¨Å"
private yygo331 = decodeArr "\u0091\u0092\u0093\u0094\u0095Â«" "Æ©Æ©Æ©Æ©Æ©Å"
private yygo332 = decodeArr "\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃ" "Æ®Æ®Æ®Æ°Æ°Æ°Æ°Æ°Æ°Æ¯Æ¯Æ¯Æ±Æ±Æ±Æ²Æ²Æ²Æ³Æ´Æ´"
private yygo335 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÄ¸Æ¶Æ¶Æ¶Ä¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo336 = decodeArr "-." "Æ¸Æ¸"
private yygo341 = decodeArr "ÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Ä¡Ä¢Ä£Ä¤" "ÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇ"
private yygo342 = decodeArr "Ã¼Ã½ÄÄ" "ÅÅÇÇ"
private yygo345 = decodeArr "ÄºÄ»Ä¼" "ÇÇÇ"
private yygo346 = decodeArr "ÄºÄ»Ä¼" "ÇÇÇ"
private yygo347 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÇÇÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo354 = decodeArr "\u0089\u008a\u008b\u008c\u008dÂ«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÄ¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Â¥Â¥ÇÇÇ\u008f22233344Â£\u0092\u0092\u0092\u0092\u0091\u0091Â¤Â¤Â¤\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo358 = decodeArr "\u0005\u0006\u0007\b\t" "ÇÇÇÇÇ"
private yygo363 = decodeArr "Â¸Â¹ÂºÃÃÃÃÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÅ©Å©ÇÇÅ¨Å¨ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo364 = decodeArr "Â¸Â¹ÂºÃÃÃÃÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÅ©Å©ÇÇÅ¨Å¨ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo365 = decodeArr "Â¸Â¹ÂºÃÃÃÃÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÅ©Å©ÇÇÅ¨Å¨ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo366 = decodeArr "u|}~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Ç Ç¢Ç¢Ç¢Ç¡Ç¡Ç¡Ç¤Ç¤Ç¤Ç¤Ç£Ç£Ç£\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo369 = decodeArr "ÅÅ" "Ç¨Ç¨"
private yygo372 = decodeArr "Â»Â¼ÃÃ" "Ç©Ç©MM"
private yygo375 = decodeArr "Â³Â´Â»Â¼Â½Â¾Â¿ÃÃÃÃ" "ÇªÇªÄÄÄÄÄÄÄMM"
private yygo378 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Ç¬Ç¬55558888899::<<;;;;;;;;;;;;;;======================"
private yygo379 = decodeArr "ÅÅÅÅÅ " "Ç®Ç®ÄÇ­Ç­"
private yygo380 = decodeArr "Ä½Ä¾" "Ç°Ç°"
private yygo383 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Ç²Ç²55558888899::<<;;;;;;;;;;;;;;======================"
private yygo388 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡Æ²Æ³Æ´" "22233344666666666677Ä Ä 55558888899::<<;;;;;;;;;;;;;;======================Ç´Ç´Ç´"
private yygo391 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666Ä¨Ä¨Ä¨ÇµÇµÇµÂªÂª77Â¨Â¨55558888899::<<;;;;;;;;;;;;;;======================"
private yygo398 = decodeArr "Â¸Â¹ÂºÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÇ¶Ç¶ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo400 = decodeArr "ÄÄÄÄÄ" "ÇºÇºÇ»Ç»Ç»"
private yygo403 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã±Ã²ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÄ¸Ç¼Ç¼Ç¼Ç½Ç½Ä¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo404 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÄ¸Ç¾Ç¾Ç¾Ç¿Ç¿Ä¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo405 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÄ¸ÈÈÈÄ¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo411 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Æ¡Æ¡55558888899::<<;;;;;;;;;;;;;;======================"
private yygo413 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Æ¤Æ¤55558888899::<<;;;;;;;;;;;;;;======================"
private yygo423 = decodeArr "\u0091\u0092\u0093\u0094\u0095Â«" "ÈÈÈÈÈÅ"
private yygo427 = decodeArr "Â»Â¼ÃÃ" "NNMM"
private yygo428 = decodeArr "\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃ" "Æ°Æ°Æ°Æ°Æ°Æ°ÈÈÈÆ±Æ±Æ±Æ²Æ²Æ²Æ³Æ´Æ´"
private yygo432 = decodeArr "Â¨Â©ÂªÃ" "ÈÈÈÈ"
private yygo437 = decodeArr "\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃ" "ÈÈÈÆ°Æ°Æ°Æ°Æ°Æ°Æ¯Æ¯Æ¯Æ±Æ±Æ±Æ²Æ²Æ²Æ³Æ´Æ´"
private yygo439 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã±Ã²ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÄ¸Ç¼Ç¼Ç¼ÈÈÄ¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo440 = decodeArr "/0" "ÈÈ"
private yygo445 = decodeArr "Â¸Â¹ÂºÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¥Ä¦Ä§" "ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÈÈÈ"
private yygo446 = decodeArr "ÄÄÄÄÄÄ Ä¡Ä¢Ä£Ä¤" "ÈÈÈÈÇÇÇÇÇÇ"
private yygo448 = decodeArr "ÄÄ Ä¡Ä¢Ä£Ä¤" "ÈÈÈÇÇÇ"
private yygo449 = decodeArr "ÄÄ Ä¡Ä¢Ä£Ä¤" "ÈÈÈÇÇÇ"
private yygo450 = decodeArr "ÄÄ Ä¡Ä¢Ä£Ä¤" "ÈÈÈÇÇÇ"
private yygo453 = decodeArr "Ä¢Ä£Ä¤" "ÈÈÈ"
private yygo454 = decodeArr "Ä¢Ä£Ä¤" "ÈÈÈ"
private yygo455 = decodeArr "\u0005\u0006\u0007\b\t" "ÈÈÈÈÈ"
private yygo462 = decodeArr "ÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Ä¡Ä¢Ä£Ä¤" "È¢È¢È¢È£È£ÇÇÇÇÇÇÇÇÇÇÇÇÇ"
private yygo463 = decodeArr "Â«" "È¤"
private yygo467 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÈ¥È¥ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo471 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã±Ã²ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÄ¸Ç¼Ç¼Ç¼È§È§Ä¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo472 = decodeArr "Â¸Â¹ÂºÃÃÃÃÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÅ©Å©È¨È¨Å¨Å¨ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo476 = decodeArr "\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "È©È©È©\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo477 = decodeArr "\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "ÈªÈªÈª\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo478 = decodeArr "\u007f\u0080\u0081Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "È«È«È«\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo480 = decodeArr "u\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Ç Ç¡Ç¡Ç¡Ç¤Ç¤Ç¤Ç¤È¬È¬È¬\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo483 = decodeArr "\u0019\u001a" "È®È®"
private yygo485 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666Å°Å°È¯È¯È¯77Å¯Å¯55558888899::<<;;;;;;;;;;;;;;======================"
private yygo488 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677È°È°55558888899::<<;;;;;;;;;;;;;;======================"
private yygo494 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677È±È±55558888899::<<;;;;;;;;;;;;;;======================"
private yygo495 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅÅ¡Å¢Å£Å¤Å¥Å¦Å§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "222333446666666666Å»Å¼Å¼Å¼È²È²È²77``55558888899::<<;;;;;;;;;;;;;;======================"
private yygo505 = decodeArr "ÄÄÄÄÄ" "È³È³Ç»Ç»Ç»"
private yygo516 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Æ¡Æ¡55558888899::<<;;;;;;;;;;;;;;======================"
private yygo517 = decodeArr "ÂµÂ¶Â·Â¸Â¹ÂºÃÃÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å©ÅªÅ¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "22233344666666666677Æ¤Æ¤55558888899::<<;;;;;;;;;;;;;;======================"
private yygo519 = decodeArr "Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÃ" "È¾È¾È¾È¼È¼È¼È½È½È½È"
private yygo520 = decodeArr "Â»Â¼ÃÃ" "\u009e\u009eMM"
private yygo523 = decodeArr "\u0096\u0097\u0098\u0099\u009a\u009b\u009c\u009d\u009e\u009fÂ Â¡ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃ" "È¿È¿È¿Æ°Æ°Æ°Æ°Æ°Æ°Æ¯Æ¯Æ¯Æ±Æ±Æ±Æ²Æ²Æ²Æ³Æ´Æ´"
private yygo532 = decodeArr "\u000e\u000f\u0010Â«Ä¨Ä©ÄªÄ«Ä¬Ä­Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·" "ÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉÉ"
private yygo544 = decodeArr "ÄÄÄÄÄÄÄÄÄÄÄ Ä¡Ä¢Ä£Ä¤" "ÉÉÇÇÇÇÇÇÇÇÇÇÇÇÇ"
private yygo546 = decodeArr "\u0005\u0006\u0007\b\t" "ÉÉÉÉÉ"
private yygo548 = decodeArr "ÄºÄ»Ä¼" "ÉÉÉ"
private yygo558 = decodeArr "u|}~\u007f\u0080\u0081\u0082\u0083\u0084\u0085\u0086\u0087\u0088Â«ÂµÂ¶Â·Â¸Â¹ÂºÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ä¿ÅÅÅÅÅÅÅÅÅÅÅÅÅÅ§Å¨Å¯Å°Å±Å²Å³Å´ÅµÅ¶Å·Å¸Å¹ÅºÅ»Å¼Å½Å¾Å¿ÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆÆ Æ¡" "Ç ÉÉÉÇ¡Ç¡Ç¡Ç¤Ç¤Ç¤Ç¤Ç£Ç£Ç£\u008f22233344\u008c\u0092\u0092\u0092\u0092\u0091\u0091\u008d\u008d\u0094\u0094\u0094\u0094\u0093\u0093\u0093\u0093\u008e\u008e\u008e\u0096666666666677\u0097\u0097\u0097\u00978888899::<<;;;;;;;;;;;;;;======================"
private yygo565 = decodeArr "ÄÄÄÄÄ" "ÉÉÇ»Ç»Ç»"
private yygo566 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã±Ã²ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÄ¸Ç¼Ç¼Ç¼ÉÉÄ¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo568 = decodeArr "Â¸Â¹ÂºÃ§Ã®Ã¯Ã°Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÄ¸Ç¾Ç¾Ç¾ÉÉÄ¹ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo570 = decodeArr "Â¢Â£Â¤Â¨Â©ÂªÃ" "ÉÉÉÈ½È½È½È"
private yygo573 = decodeArr "Â¨Â©ÂªÃ" "ÉÉÉÈ"
private yygo577 = decodeArr "123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrst" "ÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ"
private yygo578 = decodeArr "Â«Ä´ÄµÄ¶Ä·" "ÉÊÊÊÉ"
private yygo579 = decodeArr "Â«Ä´ÄµÄ¶Ä·" "ÉÊÊÊÉ"
private yygo580 = decodeArr "Â«Ä·" "ÉÊ"
private yygo581 = decodeArr "Â«Ä·" "ÉÊ"
private yygo582 = decodeArr "Â«Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·" "ÉÊ Ê ÉÉÉÉÉÉÉ"
private yygo601 = decodeArr "Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÃ" "È¾È¾È¾Ê¦Ê¦Ê¦È½È½È½È"
private yygo653 = decodeArr "123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrst" "ÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ¨Ê¨Ê¨Ê¨Ê¨Ê¨"
private yygo667 = decodeArr "123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrst" "ÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊªÊªÊªÊªÊªÊª"
private yygo674 = decodeArr "\u000e\u000f\u0010Â«Ä¨Ä©ÄªÄ«Ä¬Ä­Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·" "ÉÉÉÉÊ¬Ê¬Ê¬Ê¬Ê¬ÉÉÉÉÉÉÉÉÉÉÉ"
private yygo675 = decodeArr "\u000e\u000f\u0010Â«Ä¨Ä©ÄªÄ«Ä¬Ä­Ä®Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·" "ÉÉÉÉÊ­Ê­Ê­Ê­Ê­ÉÉÉÉÉÉÉÉÉÉÉ"
private yygo676 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÊ®Ê®ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo677 = decodeArr "Â«Ä¯Ä°Ä±Ä²Ä³Ä´ÄµÄ¶Ä·" "ÉÊ¯Ê¯ÉÉÉÉÉÉÉ"
private yygo679 = decodeArr "123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrst" "ÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ°Ê°Ê°Ê°Ê°Ê°"
private yygo683 = decodeArr "Â¸Â¹ÂºÃ¥Ã¦Ã§ÃªÃ«Ã¬Ã­ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÄÄÄÄ¦Ä§" "ÃÃÃÊ²Ê²ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ"
private yygo689 = decodeArr "123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrst" "ÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ³Ê³Ê³Ê³Ê³Ê³"
private yygos = let 
    sub1 = [      (0, yygo0),
      (1, yygo1),
      (2, yygo2),
      (4, yygo4),
      (6, yygo6),
      (8, yygo8),
      (10, yygo10),
      (13, yygo13),
      (23, yygo23),
      (26, yygo26),
      (29, yygo29),
      (30, yygo30),
      (41, yygo41),
      (42, yygo42),
      (43, yygo43),
      (46, yygo46),
      (52, yygo52),
      (57, yygo57),
      (64, yygo64),
      (66, yygo66),
      (67, yygo67),
      (72, yygo72),
      (76, yygo76),
      (79, yygo79),
      (81, yygo81),
      (82, yygo82),
      (85, yygo85),
      (87, yygo87),
      (89, yygo89),
      (90, yygo90),
      (92, yygo92),
      (97, yygo97),
      (98, yygo98),
      (100, yygo100),
      (101, yygo101),
      (102, yygo102),
      (104, yygo104),
      (105, yygo105),
      (106, yygo106),
      (109, yygo109),
      (113, yygo113),
      (116, yygo116),
      (117, yygo117),
      (119, yygo119),
      (120, yygo120),
      (121, yygo121),
      (122, yygo122),
      (123, yygo123),
      (124, yygo124),
      (126, yygo126),
      (127, yygo127),
      (142, yygo142),
      (144, yygo144),
      (148, yygo148),
      (149, yygo149),
      (150, yygo150),
      (152, yygo152),
      (155, yygo155),
      (161, yygo161),
      (164, yygo164),
      (165, yygo165),
      (169, yygo169),
      (174, yygo174),
      (176, yygo176)];
    sub2 = [      (181, yygo181),
      (182, yygo182),
      (184, yygo184),
      (185, yygo185),
      (186, yygo186),
      (188, yygo188),
      (197, yygo197),
      (198, yygo198),
      (199, yygo199),
      (207, yygo207),
      (213, yygo213),
      (214, yygo214),
      (221, yygo221),
      (225, yygo225),
      (227, yygo227),
      (231, yygo231),
      (232, yygo232),
      (233, yygo233),
      (235, yygo235),
      (237, yygo237),
      (238, yygo238),
      (239, yygo239),
      (244, yygo244),
      (245, yygo245),
      (246, yygo246),
      (247, yygo247),
      (254, yygo254),
      (256, yygo256),
      (257, yygo257),
      (260, yygo260),
      (262, yygo262),
      (268, yygo268),
      (269, yygo269),
      (271, yygo271),
      (272, yygo272),
      (279, yygo279),
      (280, yygo280),
      (281, yygo281),
      (283, yygo283),
      (284, yygo284),
      (285, yygo285),
      (286, yygo286),
      (301, yygo301),
      (303, yygo303),
      (306, yygo306),
      (307, yygo307),
      (317, yygo317),
      (318, yygo318),
      (323, yygo323),
      (325, yygo325),
      (327, yygo327),
      (330, yygo330),
      (331, yygo331),
      (332, yygo332),
      (335, yygo335),
      (336, yygo336),
      (341, yygo341),
      (342, yygo342),
      (345, yygo345),
      (346, yygo346),
      (347, yygo347),
      (354, yygo354),
      (358, yygo358),
      (363, yygo363)];
    sub3 = [      (364, yygo364),
      (365, yygo365),
      (366, yygo366),
      (369, yygo369),
      (372, yygo372),
      (375, yygo375),
      (378, yygo378),
      (379, yygo379),
      (380, yygo380),
      (383, yygo383),
      (388, yygo388),
      (391, yygo391),
      (398, yygo398),
      (400, yygo400),
      (403, yygo403),
      (404, yygo404),
      (405, yygo405),
      (411, yygo411),
      (413, yygo413),
      (423, yygo423),
      (427, yygo427),
      (428, yygo428),
      (432, yygo432),
      (437, yygo437),
      (439, yygo439),
      (440, yygo440),
      (445, yygo445),
      (446, yygo446),
      (448, yygo448),
      (449, yygo449),
      (450, yygo450),
      (453, yygo453),
      (454, yygo454),
      (455, yygo455),
      (462, yygo462),
      (463, yygo463),
      (467, yygo467),
      (471, yygo471),
      (472, yygo472),
      (476, yygo476),
      (477, yygo477),
      (478, yygo478),
      (480, yygo480),
      (483, yygo483),
      (485, yygo485),
      (488, yygo488),
      (494, yygo494),
      (495, yygo495),
      (505, yygo505),
      (516, yygo516),
      (517, yygo517),
      (519, yygo519),
      (520, yygo520),
      (523, yygo523),
      (532, yygo532),
      (544, yygo544),
      (546, yygo546),
      (548, yygo548),
      (558, yygo558),
      (565, yygo565),
      (566, yygo566),
      (568, yygo568),
      (570, yygo570),
      (573, yygo573)];
    sub4 = [      (577, yygo577),
      (578, yygo578),
      (579, yygo579),
      (580, yygo580),
      (581, yygo581),
      (582, yygo582),
      (601, yygo601),
      (653, yygo653),
      (667, yygo667),
      (674, yygo674),
      (675, yygo675),
      (676, yygo676),
      (677, yygo677),
      (679, yygo679),
      (683, yygo683),
      (689, yygo689)];
      in sub1 `seq` sub2 `seq` sub3 `seq` sub4 `seq` genericArrayFromIndexList (sub1 ++ sub2 ++ sub3 ++ sub4);
{-

    this file will be appended to every parser YYgen.fr builds

 -}
 
 
--- the main loop of the parser
yyloop (yyvals@(st, _):_) (yytoks@yyt:yyts) =
    case yyaction st yyt of
        YYAction act
            | act == yyAccept -> YYM.return (yyaccept (yyvals, yytoks))  -- will this ever happen?
            | act == yyErr    -> do
                            let fun = elemAt yyrecs st
                            toks <- fun yytoks
                            yyloop yyvals toks
            -- shift?
            | act >= 0, yydebug, traceLn (show st ++ ": shift to " ++ show act ++ " on " ++ yyshow yyt) = undefined
            | act >= 0 = yyloop ((act; YYTok yyt)!:yyvals) yyts
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals yytoks
;
yyloop (yyvals@(st, _):_) [] =
    case yyeaction st of
        YYAction act
            | act == yyAccept -> YYM.return (yyaccept (yyvals, []))
            | act == yyErr = do
                yyerror yyEOF ("syntax error on end of file")
                YYM.return (yyvals, [])
            -- shift?
            | act >= 0 -> error ("Can't shift on end of file in state " ++ show act)
            -- must be reduction
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule (-act)) = undefined
            | otherwise = do
                vals <- yyreduce (-act) yyvals
                yyloop vals []
    ;
yyloop [] yytoks = error "empty stack in yyloop";

yyaction n tok = case itemAt yyacts n of {
    Just fun -> fun tok;
    Nothing  -> YYAction yyErr;
};

yyeaction n = case elemAt yyeacts n of  {
    0 -> YYAction yyErr;
    this -> YYAction this; 
};

--- nowarn: application of 'yybadprod' will diverge
yybadprod p yyvs = error ("bad stack for rule " ++ show p ++ ": " ++ showst yyvs);



--- drop tokens until token is valid in this state
yydrop i [] = yyrecover i [];
yydrop i (t:ts) = case yyaction i t of {
        YYAction err
            | yyErr == err, yydebug, trace (show i ++ ": error recovery drops " ++ yyshow t ++ "\n") = undefined
            | yyErr == err = yydrop i ts
            | otherwise  =  YYM.return (t:ts);
    };
yyrecover i []
    | yydebug, trace (show i ++ ": error recovery reaches end of file\n") = undefined
    | otherwise = YYM.return [];

yyrecover i (ts@t:_) = do
    yyerror (yyline t) ("syntax error on " ++ yynice t)
    yydrop i ts
;

yyexpect n trep (ts@t:_) = do
    yyerror (yyline t) ("expected " ++ yynice trep ++ ", found " ++ yynice t)
    YYM.return (trep:ts)
;

yyexpect n trep [] = do
    yyerror yyEOF ("expected " ++ yynice trep ++ ", found end of file")
    YYM.return [trep]
;

yyparsing n item (ts@t:_) = do
    yyerror (yyline t) ("unexpected " ++ yynice t ++ " while trying to parse " ++ item)
    yydrop n ts

yyparsing n item [] = do
    yyerror yyEOF ("unexpected end of file while parsing " ++ item)
    yyrecover n []

yybadstart n item (ts@t:_) = do
    yyerror (yyline t) ("syntax error, " ++ item ++ " cannot start with " ++ yynice t)
    yydrop n ts

yybadstart n item [] = do
    yyerror yyEOF ("end of file while expecting " ++ item)
    yyrecover n []

yyreduce red yyvs = case itemAt yyprods red of
    Just fun -> do
        reduced <- fun yyvs
        case reduced of
            (yyv, yyvals@(popst, _):_) -> case yygos.itemAt popst of
                Just arr -> case elemAt arr red of
                    go | go > 0, yydebug, trace (show popst
                                    ++ ": after reduction goto "
                                    ++ show go ++ "\n") = undefined
                       | go > 0 = YYM.return ((go, yyv):yyvals)
                       | otherwise = error ("nowhere to go in state "
                                                ++ show popst ++ " after reduction " ++ show red)
                Nothing -> error ("nowhere to go in state "
                                            ++ show popst ++ " after any reduction")
            _ -> error ("reduction " ++ show red ++ " yields nonsensical result.")
    Nothing -> error ("reduction " ++ show red ++ " is unknown.")
;


yyparse yytoks = do
    res <- yyloop [(0, YYStart ())] yytoks
    case res of
        ([(_, YYAcc x)], []) -> YYM.return (Just x)
        ([(_, YYAcc x)], (yyt:_)) -> do
            yyerror (yyline yyt) ("expected end of file, found `" ++ yynice yyt ++ "`")
            YYM.return (Just x)
        _ -> YYM.return Nothing;
;
--begin tail
{--
    the parser pass
 -}
pass :: [Token] -> StG (Maybe ParseResult) -- Global -> IO (Maybe ParseResult, Global)
pass = yyparse . substQQ
--end tail
