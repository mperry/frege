--- This is an undocumented module.
module frege.compiler.types.Kinds where 


--- encoding for type kinds    
data Kind =
        KVar                     --- unifies with every other kind 
        | KType                  --- indicates any type
        | KGen                   --- indicates a type that must appear as generic type
        | KApp Kind Kind         --- indicates it will be 2nd kind when applied to 1st kind
        where
            --- * -> * -> *
            fun   = kind 2
            --- * -> *    
            unary = kind 1     
            --- @(kind n)@ is the kind of a type constructor with @n@ type arguments of kind 0
            kind 0 = KType
            kind n = KApp KType (kind (n-1))
            kvar 0 = KType
            kvar n = KApp KVar  (kvar (n-1))
            kref 0 = KGen
            kref n = KApp KVar  (kref (n-1))


instance Show Kind where
    show KType        = "*"
    show KGen         = "generic"
    show KVar         = "?"
    show (KApp k1 k2) = showsub k1 ++ "->" ++ show k2
    showsub KType     = "*"
    showsub KVar      = "?"
    showsub KGen      = "generic"
    showsub k         = "(" ++ show k ++ ")"


derive Eq Kind
derive ArrayElement Kind


