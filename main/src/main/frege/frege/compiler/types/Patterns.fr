--- Data type for patterns.
module frege.compiler.types.Patterns where 

import  frege.compiler.types.Positions
import  frege.compiler.enums.Literals
import  frege.compiler.types.SNames
import  frege.compiler.types.QNames
import  frege.compiler.types.Types

{--
    Patterns appear in the following places:
    - on the left hand side of function definitions
    - between the backslash and the arrow in a lambda @\p -> x@
    - in case alternatives
    - generally, on the left hand side of the @<-@ in @do@ 
      expressions, list comprehensions and pattern guards.
    - on the left hand side of a @=@ in pattern bindings
    
    The parser has no rules for patterns, however. It parses
    expressions, which are later transformed to patterns. However,
    not all valid expressions are also valid patterns.
    
 -}
data PatternT q =
      !PVar    { pos::Position, uid::Int, var::String }                     --- > p
    | PCon     { pos::Position, qname::q, pats :: [PatternT q] }            --- > Con p1 p2 p3
    | PConFS   { pos::Position, qname::q, fields::[(String, PatternT q)] }  --- > Con { field1, field2=pat }
    | !PAt     { pos::Position, uid::Int, var::String, pat::PatternT q}     --- > a@pat
    | !PUser   { pat :: PatternT q, lazy :: Bool}                           --- > !pat or ?pat
    | !PLit    { pos::Position, kind::Literalkind, value::String}           --- > 42 ´foo´
    | !PAnn    { pat::PatternT q, typ::SigmaT q}                            --- > pat::forall a.Eq a => a -> a
    | !PMat    { pos::Position, uid::Int, var::String, value::String}       --- > m~´foo´



type PatternS = PatternT SName


type Pattern  = PatternT QName



instance Positioned (PatternT a) where
    is p = "pattern"
    --- get the line number of a pattern
    getpos (PAnn p t)   = (getpos p).merge t.getpos
    getpos (PUser{pat})    = getpos pat
    getpos (PCon {pos,pats}) = fold Position.merge pos (map getpos pats)
    getpos (PAt {pos,pat})   = pos.merge pat.getpos
    getpos p | p.{pos?} = p.pos
             | otherwise = Position.null
    -- untyped 'Pattern', this is yet another identity function
    -- untyped p = p


