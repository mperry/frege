--- 'JType' models a Java type.
module frege.compiler.types.JTypes where 

import  frege.compiler.types.JNames

{--
    Model of Java types
 -}
data JType =
      --- frege type (extends Algebraic)
      !Ref   { jname :: JName,  typeargs :: [JType] }
    | --- type argument @A@  
      !TArg  { var   :: String }                    
    | {-- 
        Native or array type
        
        An array type looks like
        >  Nativ { type = "[]", typeargs = [elem]}
        where @elem@ is the element type.
        -} 
      !Nativ { typ   :: String, typeargs :: [JType] }  
    | --- lazy type that yields etype
      !Lazy  { yields :: JType }                    
    -- | !Func  { args :: Int, yields :: JType }       {-- function that can take so many
    --                                                     arguments before yielding a result -} 
    | Lambda            --- some function
    | Something         {-- something unknown that can be casted
                            to the desired type -} 
    | Applicable        --- result of apply


derive Eq JType


--- compute the raw java type name
rawName :: JType -> String
rawName Ref{jname}      = show jname
rawName TArg{var}       = var
rawName Nativ{typ="[]", typeargs=[jt]} = rawName jt ++ "[]"
rawName Nativ{typ}      = typ
rawName Lazy{yields}    = rawName yields
rawName Lambda          = "frege.runtime.Lambda"
rawName Something       = "java.lang.Object"
rawName Applicable      = "frege.runtime.Applicable"


instance Show JType where
    show Lazy{yields} = "Lazy<" ++ show yields ++ ">"
    -- show TArg{var}    = var
    show Lambda       = "Lambda"
    show Something    = "Something"
    show Applicable   = "Applicable"
    show jt           = rawName jt
