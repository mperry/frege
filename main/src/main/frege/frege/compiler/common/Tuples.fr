--- This is an undocumented module.
module frege.compiler.common.Tuples where 
        -- generated by Splitter
import  frege.Prelude  hiding(error, print, println, break, <+>)
import  frege.compiler.enums.TokenID(TokenID)
import  frege.compiler.types.Positions
import  frege.compiler.types.Tokens
import  frege.compiler.types.SNames
import  frege.compiler.types.Patterns
import  frege.compiler.types.Expression


--- create a constructor for an n-tuple
tuple n = let
        i = n-1
        commas = repeat ","
        string = "(" ++ fold (++) "" (take i commas) ++ ")"
    in string



tupleName i = With1 baseToken baseToken.{tokid=CONID, value=tuple i}



mkTuple con (pos::Position) [x] = x
mkTuple con pos xs = fold app (con (pos.change CONID (tuple n)) (tupleName n) Nothing) xs
    where !n = length xs
          app a b = App a b Nothing




mkpTuple (pos::Position) [p] = p
mkpTuple pos xs = PCon (pos.change CONID (tuple n)) (tupleName n) xs
    where !n = length xs








