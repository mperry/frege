--- This is an undocumented module
module frege.compiler.common.Mangle where

import Data.TreeMap as TM


{--
 * Java keywords (along with substitutions)
 * as specified in the Java Language Specification, Version 3.0, page 21
 * and, in addition, "true", "false", and "null"
 *
 * It is, for instance, possible to name a frege item _int_, though
 * in the generated java code, this will appear as \__int_.
 *
 -}
javakeywords = TM.fromList  [(kw, "_"++kw) | kw <- [
    "abstract",     "continue",     "for",          "new",          "switch",
    "assert",       "default",      "if",           "package",      "synchronized",
    "boolean",      "do",           "goto",         "private",      "this",
    "break",        "double",       "implements",   "protected",    "then",
    "byte",         "else",         "import",       "public",       "throws",
    "case",         "enum",         "instanceof",   "return",       "transient",
    "catch",        "extends",      "int",          "short",        "try",
    "char",         "final",        "interface",    "static",       "void",
    "class",        "finally",      "long",         "strictfp",     "volatile",
    "const",        "float",        "native",       "super",        "while",
    -- also the literals, as variables cannot be named like so
    "true",         "false",        "null",
    -- likewise assert and main, in order to avoid confusion
    "assert",       "main",
    -- forgot throw
    "throw"
    ]]



repljavakws s = case TreeMap.lookupS javakeywords s of
    Just k  -> k
    Nothing -> s



--- replacement for certain graphic characters ∀
graphReplacements = TM.fromList . map (fmap unpacked) $ [
    ('°', "_deg"),  ('^', "_caret"),    ('!', "_excl"), ('²', "_two"),  ('³', "_three"),
    ('§', "_par"),  ('%', "_pct"),      ('&', "_amp"),  ('/', "_div"),  ('=', "_eq"),
    ('?', "_qm"),   ('\\', "_back"),     ('*', "_star"), ('+', "_plus"), ('~', "_tilde"),
    ('\'', "_tick"),('#', "_num"),      ('-', "_minus"),('.', "_dot"),  (':', "_colon"),   -- '#
    (',', "c"),(';', "_semi"),     ('@', "_at"),   ('|', "_bar"),  ('<', "_lt"),
    ('>', "_gt"),   ('•', "_bullet"),   ('«', "_lang"), ('»', "_rang"), ('¦', "_bar2"),
    ('¿', "_iqm"),  ('€', "_euro"),     ('£', "_pound"),('¥', "_yen"),  ('¢', "_cent"),
    ('¬', "_not"),  ('±', "_plusminus"),('¡', "_iexcl"),('¤', "_money"),('©', "_copy"),
    ('®', "_trade"),('¹', "_one"),      ('$', "_dollar"),
    ('[', "_lbrack"), (']', "_rbrack"), ('(', "l_"), (')', "_r")]


--- look in 'graphReplacements' for character translation, if not there, use ordinal number
replaceGraphic c = case graphReplacements.lookup c of
    Just s ->  s
    Nothing -> unpacked (String.format "_%d" (ord c))


{--
    encode certain special characters so that the result is a
    valid java identifier
 -}
mangled :: String -> String
mangled s | s.startsWith "(," = "Tuple" ++ show (length s - 2 + 1)
mangled "()" = "Unit"
mangled "[]" = "List"
mangled ":"  = "Cons"
mangled "->" = "Function"
mangled s = (repljavakws . packed . loop . unpacked) s
    where
        loop (a:xs)
            | a.isLetterOrDigit
              || a == '$' || a == '_' = a : loop xs
            | (b:ys) <- xs,
              Char.isSurrogatePair a b,
              cp <- Char.toCodePoint a b,
              Char.isLetter cp || Char.isDigit cp = a:b:loop ys
            | otherwise = (replaceGraphic a) ++ loop xs
        loop [] = []
