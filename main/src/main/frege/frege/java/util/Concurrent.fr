--- Java classes from package @java.util.concurrent@

module frege.java.util.Concurrent where

import Java.Util

--- Thrown when a task is submitted to an 'ExecutorService' that was shut down or whose queue is full.
data RejectedExecutionException = pure native java.util.concurrent.RejectedExecutionException
derive Exceptional RejectedExecutionException


data BlockingQueue e = mutable native java.util.concurrent.BlockingQueue where
    --- add element to blocking queue, throw exception if not possible
    native add      :: BlockingQueue e -> e -> IO Bool throws IllegalStateException
    --- add element to blocking queue, return false if not possible
    native offer    :: BlockingQueue e -> e -> IO Bool
    --- add element to blocking queue, block until possible
    native put      :: BlockingQueue e -> e -> IO () throws InterruptedException
    
    --- get and remove element from blocking queue, throw exception if it is empty
    native remove   :: BlockingQueue e -> IO e throws NoSuchElementException
    --- get and remove element from blocking queue, return null if it is empty
    native poll     :: BlockingQueue e -> IO (Maybe e)
    --- get and remove element from blocking queue, block until something is available
    native take     :: BlockingQueue e -> IO e throws InterruptedException

data ArrayBlockingQueue e = mutable native java.util.concurrent.ArrayBlockingQueue where
    {--
        Creates an ArrayBlockingQueue with the given (fixed) capacity and the specified access policy.
        
        If the 'Bool' argument is missing, the default access policy is used.
        If it is @true@ then queue accesses for threads blocked on insertion or removal, 
        are processed in FIFO order; 
        otherwise the access order is unspecified.
        
        The capacity must be greater than 0, otherwise an 'IllegalArgumentException' is thrown.
    -}
    native new      :: Int -> IO (ArrayBlockingQueue e)
                     | Int -> Bool ->  IO (ArrayBlockingQueue e)           


--- The Java 'http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html executor service' interface.
data ExecutorService = mutable native java.util.concurrent.ExecutorService where
    --- The default executor service of the Frege runtime
    native executorService frege.runtime.Concurrent.executorService :: () -> IO ExecutorService
    --- Tells if this executor has been shut down.
    native isShutdown :: ExecutorService -> IO Bool
    ---  Tells if all tasks have completed after 'ExecutorService.shutdown'.
    native isTerminated :: ExecutorService -> IO Bool
    --- Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.
    native shutdown :: ExecutorService -> IO ()
    --- Submit a 'Runnable' for execution.
    --- Note that unlike in Java, no Future is returned.
    native submit :: ExecutorService -> MutableIO Runnable -> IO () throws RejectedExecutionException
