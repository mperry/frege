--- 'Monad' transformer for 'Either'
package frege.control.monad.trans.EitherT where


import Data.Monoid
import frege.control.monad.trans.MonadTrans
import frege.control.monad.trans.MonadIO

data EitherT l m a = EitherT { run :: m (Either l a) }


left :: Monad m => l -> EitherT l m a
left = EitherT . return . Left

instance Functor Functor f => (EitherT l) f where
    fmap :: Functor γ => (δ -> α) -> EitherT β γ δ -> EitherT β γ α
    fmap f = EitherT . fmap (fmap f) . EitherT.run

instance Monad Monad m => (EitherT l m) where
    return = EitherT . return . Right
    EitherT x >>= f = EitherT  do
        res <- x
        case res of
          Right r -> EitherT.run  (f r)
          Left l -> return (Left l)

instance MonadTrans (EitherT l) where
    lift = EitherT . liftM Right 

instance MonadIO MonadIO m => EitherT l m where
  liftIO = lift . liftIO

instance MonadPlus (MonadPlus m) => EitherT l m where
    mzero = EitherT mzero
    e1 `mplus` e2 = EitherT $ e1.run `mplus` e2.run 

instance MonadAlt (MonadAlt m) => EitherT l m where
    pzero = EitherT pzero
    e1 <|> e2 = EitherT $ e1.run <|> e2.run
    e1 <+> e2 = EitherT $ e1.run <+> e2.run

instance Monoid (Monad m, Monoid a) => EitherT l m a where
    mempty = pure mempty
    mappend = liftA2 mappend
  