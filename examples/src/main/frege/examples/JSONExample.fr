--- Example code for making algebraic data work with JSON
module examples.JSONExample where

import Data.JSON

data Engine = Electric Double --- just performance in kW
            | Combustion { fuel :: [Fuel], displacement :: Double, cyls :: Int }

data Fuel = DIESEL | GASOLINE | NATURALGAS | LPG

data Vehicle = Vehicle { wheels :: Int, engine :: Maybe Engine }

derive Show Fuel
derive Show Engine
derive Show Vehicle

instance ToJSON Fuel where
    toJSON = String . show

instance ToJSON Engine where
    toJSON (Electric d) 
            = struct "Electric" d
    toJSON Combustion{fuel, displacement, cyls}
            = struct "Combustion" (fuel, displacement, cyls)

instance ToJSON Vehicle where
    --- for illustration, we use a struct with record fields
    toJSON Vehicle{wheels, engine} 
            = Struct [
                    assoc "wheels" wheels,
                    assoc "engine" (maybeToJSON engine), 
            ]

bicycle = Vehicle { wheels = 2, engine = Nothing }
ebike   = Vehicle { wheels = 2, engine = Just (Electric 0.9) }
car     = Vehicle { wheels = 4, 
                    engine = Just Combustion {
                                  fuel = [LPG, GASOLINE], 
                                  displacement = 2.0,
                                  cyls = 4 }}
vehicles = [car, bicycle, ebike]

main = do
    println (toJSON vehicles)
    println (parseJSON "{ \"Combustion\" : [ [\"Water\"], 2.7, 3]}" :: Either String Engine)
    println (parseJSON "{\"wheels\" : 3}" :: Maybe Vehicle)


instance FromJSON Fuel where
    fromJSON (String "DIESEL") = return DIESEL
    fromJSON (String "GASOLINE") = return GASOLINE
    fromJSON (String "NATURALGAS") = return NATURALGAS
    fromJSON (String "LPG") = return LPG
    fromJSON s = fail ("cannot decode fuel from " ++ show s)

import Data.List(lookup)  -- for looking up associations
instance FromJSON Engine where
   fromJSON (Struct as)
      | Just n   <- lookup "Electric" as   = Electric <$> fromJSON n
      | Just fdc <- lookup "Combustion" as = do
              (fuel, displacement, cyls) <- fromJSON fdc
              return Combustion{fuel, displacement, cyls}
   fromJSON x = fail ("invalid engine: " ++ show x)

instance FromJSON Vehicle where
   fromJSON (Struct as)  
        | Just jw <- lookup "wheels" as 
        = case lookup "engine" as of
            Just je -> do
                 wheels <- fromJSON jw
                 engine <- fromJSON je
                 return Vehicle{wheels, engine}
            Nothing -> do
                w <- fromJSON jw
                return Vehicle{wheels=w, engine=Nothing}
        | otherwise = fail "Vehicels without wheels are not supported." 
   fromJSON garbage = fail "not even remotely a vehicle"
